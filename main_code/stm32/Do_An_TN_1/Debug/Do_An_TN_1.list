
Do_An_TN_1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006534  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  080066bc  080066bc  000166bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080066d4  080066d4  0002001c  2**0
                  CONTENTS
  4 .ARM          00000008  080066d4  080066d4  000166d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080066dc  080066dc  0002001c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080066dc  080066dc  000166dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080066e0  080066e0  000166e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000001c  20000000  080066e4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002001c  2**0
                  CONTENTS
 10 .bss          0000047c  20000020  20000020  00020020  2**3
                  ALLOC
 11 ._user_heap_stack 00000604  2000049c  2000049c  00020020  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002001c  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  0002004c  2**0
                  CONTENTS, READONLY
 14 .debug_info   00012408  00000000  00000000  0002008f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00002351  00000000  00000000  00032497  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001190  00000000  00000000  000347e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00000df7  00000000  00000000  00035978  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00021b2e  00000000  00000000  0003676f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00016170  00000000  00000000  0005829d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000cf95c  00000000  00000000  0006e40d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00004d0c  00000000  00000000  0013dd6c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000055  00000000  00000000  00142a78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000020 	.word	0x20000020
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080066a4 	.word	0x080066a4

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000024 	.word	0x20000024
 80001c4:	080066a4 	.word	0x080066a4

080001c8 <__aeabi_dmul>:
 80001c8:	b570      	push	{r4, r5, r6, lr}
 80001ca:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80001ce:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80001d2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80001d6:	bf1d      	ittte	ne
 80001d8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80001dc:	ea94 0f0c 	teqne	r4, ip
 80001e0:	ea95 0f0c 	teqne	r5, ip
 80001e4:	f000 f8de 	bleq	80003a4 <__aeabi_dmul+0x1dc>
 80001e8:	442c      	add	r4, r5
 80001ea:	ea81 0603 	eor.w	r6, r1, r3
 80001ee:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80001f2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80001f6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80001fa:	bf18      	it	ne
 80001fc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000200:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000204:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000208:	d038      	beq.n	800027c <__aeabi_dmul+0xb4>
 800020a:	fba0 ce02 	umull	ip, lr, r0, r2
 800020e:	f04f 0500 	mov.w	r5, #0
 8000212:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000216:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800021a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800021e:	f04f 0600 	mov.w	r6, #0
 8000222:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000226:	f09c 0f00 	teq	ip, #0
 800022a:	bf18      	it	ne
 800022c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000230:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000234:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000238:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800023c:	d204      	bcs.n	8000248 <__aeabi_dmul+0x80>
 800023e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000242:	416d      	adcs	r5, r5
 8000244:	eb46 0606 	adc.w	r6, r6, r6
 8000248:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800024c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000250:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000254:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000258:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800025c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000260:	bf88      	it	hi
 8000262:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000266:	d81e      	bhi.n	80002a6 <__aeabi_dmul+0xde>
 8000268:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800026c:	bf08      	it	eq
 800026e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000272:	f150 0000 	adcs.w	r0, r0, #0
 8000276:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800027a:	bd70      	pop	{r4, r5, r6, pc}
 800027c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000280:	ea46 0101 	orr.w	r1, r6, r1
 8000284:	ea40 0002 	orr.w	r0, r0, r2
 8000288:	ea81 0103 	eor.w	r1, r1, r3
 800028c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000290:	bfc2      	ittt	gt
 8000292:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000296:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800029a:	bd70      	popgt	{r4, r5, r6, pc}
 800029c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80002a0:	f04f 0e00 	mov.w	lr, #0
 80002a4:	3c01      	subs	r4, #1
 80002a6:	f300 80ab 	bgt.w	8000400 <__aeabi_dmul+0x238>
 80002aa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80002ae:	bfde      	ittt	le
 80002b0:	2000      	movle	r0, #0
 80002b2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80002b6:	bd70      	pople	{r4, r5, r6, pc}
 80002b8:	f1c4 0400 	rsb	r4, r4, #0
 80002bc:	3c20      	subs	r4, #32
 80002be:	da35      	bge.n	800032c <__aeabi_dmul+0x164>
 80002c0:	340c      	adds	r4, #12
 80002c2:	dc1b      	bgt.n	80002fc <__aeabi_dmul+0x134>
 80002c4:	f104 0414 	add.w	r4, r4, #20
 80002c8:	f1c4 0520 	rsb	r5, r4, #32
 80002cc:	fa00 f305 	lsl.w	r3, r0, r5
 80002d0:	fa20 f004 	lsr.w	r0, r0, r4
 80002d4:	fa01 f205 	lsl.w	r2, r1, r5
 80002d8:	ea40 0002 	orr.w	r0, r0, r2
 80002dc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80002e0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80002e4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80002e8:	fa21 f604 	lsr.w	r6, r1, r4
 80002ec:	eb42 0106 	adc.w	r1, r2, r6
 80002f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80002f4:	bf08      	it	eq
 80002f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80002fa:	bd70      	pop	{r4, r5, r6, pc}
 80002fc:	f1c4 040c 	rsb	r4, r4, #12
 8000300:	f1c4 0520 	rsb	r5, r4, #32
 8000304:	fa00 f304 	lsl.w	r3, r0, r4
 8000308:	fa20 f005 	lsr.w	r0, r0, r5
 800030c:	fa01 f204 	lsl.w	r2, r1, r4
 8000310:	ea40 0002 	orr.w	r0, r0, r2
 8000314:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000318:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800031c:	f141 0100 	adc.w	r1, r1, #0
 8000320:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000324:	bf08      	it	eq
 8000326:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800032a:	bd70      	pop	{r4, r5, r6, pc}
 800032c:	f1c4 0520 	rsb	r5, r4, #32
 8000330:	fa00 f205 	lsl.w	r2, r0, r5
 8000334:	ea4e 0e02 	orr.w	lr, lr, r2
 8000338:	fa20 f304 	lsr.w	r3, r0, r4
 800033c:	fa01 f205 	lsl.w	r2, r1, r5
 8000340:	ea43 0302 	orr.w	r3, r3, r2
 8000344:	fa21 f004 	lsr.w	r0, r1, r4
 8000348:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800034c:	fa21 f204 	lsr.w	r2, r1, r4
 8000350:	ea20 0002 	bic.w	r0, r0, r2
 8000354:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000358:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800035c:	bf08      	it	eq
 800035e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000362:	bd70      	pop	{r4, r5, r6, pc}
 8000364:	f094 0f00 	teq	r4, #0
 8000368:	d10f      	bne.n	800038a <__aeabi_dmul+0x1c2>
 800036a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800036e:	0040      	lsls	r0, r0, #1
 8000370:	eb41 0101 	adc.w	r1, r1, r1
 8000374:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000378:	bf08      	it	eq
 800037a:	3c01      	subeq	r4, #1
 800037c:	d0f7      	beq.n	800036e <__aeabi_dmul+0x1a6>
 800037e:	ea41 0106 	orr.w	r1, r1, r6
 8000382:	f095 0f00 	teq	r5, #0
 8000386:	bf18      	it	ne
 8000388:	4770      	bxne	lr
 800038a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800038e:	0052      	lsls	r2, r2, #1
 8000390:	eb43 0303 	adc.w	r3, r3, r3
 8000394:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000398:	bf08      	it	eq
 800039a:	3d01      	subeq	r5, #1
 800039c:	d0f7      	beq.n	800038e <__aeabi_dmul+0x1c6>
 800039e:	ea43 0306 	orr.w	r3, r3, r6
 80003a2:	4770      	bx	lr
 80003a4:	ea94 0f0c 	teq	r4, ip
 80003a8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80003ac:	bf18      	it	ne
 80003ae:	ea95 0f0c 	teqne	r5, ip
 80003b2:	d00c      	beq.n	80003ce <__aeabi_dmul+0x206>
 80003b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80003b8:	bf18      	it	ne
 80003ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80003be:	d1d1      	bne.n	8000364 <__aeabi_dmul+0x19c>
 80003c0:	ea81 0103 	eor.w	r1, r1, r3
 80003c4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80003c8:	f04f 0000 	mov.w	r0, #0
 80003cc:	bd70      	pop	{r4, r5, r6, pc}
 80003ce:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80003d2:	bf06      	itte	eq
 80003d4:	4610      	moveq	r0, r2
 80003d6:	4619      	moveq	r1, r3
 80003d8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80003dc:	d019      	beq.n	8000412 <__aeabi_dmul+0x24a>
 80003de:	ea94 0f0c 	teq	r4, ip
 80003e2:	d102      	bne.n	80003ea <__aeabi_dmul+0x222>
 80003e4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80003e8:	d113      	bne.n	8000412 <__aeabi_dmul+0x24a>
 80003ea:	ea95 0f0c 	teq	r5, ip
 80003ee:	d105      	bne.n	80003fc <__aeabi_dmul+0x234>
 80003f0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80003f4:	bf1c      	itt	ne
 80003f6:	4610      	movne	r0, r2
 80003f8:	4619      	movne	r1, r3
 80003fa:	d10a      	bne.n	8000412 <__aeabi_dmul+0x24a>
 80003fc:	ea81 0103 	eor.w	r1, r1, r3
 8000400:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000404:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000408:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800040c:	f04f 0000 	mov.w	r0, #0
 8000410:	bd70      	pop	{r4, r5, r6, pc}
 8000412:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000416:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800041a:	bd70      	pop	{r4, r5, r6, pc}

0800041c <__aeabi_drsub>:
 800041c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000420:	e002      	b.n	8000428 <__adddf3>
 8000422:	bf00      	nop

08000424 <__aeabi_dsub>:
 8000424:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000428 <__adddf3>:
 8000428:	b530      	push	{r4, r5, lr}
 800042a:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800042e:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000432:	ea94 0f05 	teq	r4, r5
 8000436:	bf08      	it	eq
 8000438:	ea90 0f02 	teqeq	r0, r2
 800043c:	bf1f      	itttt	ne
 800043e:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000442:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000446:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800044a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800044e:	f000 80e2 	beq.w	8000616 <__adddf3+0x1ee>
 8000452:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000456:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800045a:	bfb8      	it	lt
 800045c:	426d      	neglt	r5, r5
 800045e:	dd0c      	ble.n	800047a <__adddf3+0x52>
 8000460:	442c      	add	r4, r5
 8000462:	ea80 0202 	eor.w	r2, r0, r2
 8000466:	ea81 0303 	eor.w	r3, r1, r3
 800046a:	ea82 0000 	eor.w	r0, r2, r0
 800046e:	ea83 0101 	eor.w	r1, r3, r1
 8000472:	ea80 0202 	eor.w	r2, r0, r2
 8000476:	ea81 0303 	eor.w	r3, r1, r3
 800047a:	2d36      	cmp	r5, #54	; 0x36
 800047c:	bf88      	it	hi
 800047e:	bd30      	pophi	{r4, r5, pc}
 8000480:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000484:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000488:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 800048c:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000490:	d002      	beq.n	8000498 <__adddf3+0x70>
 8000492:	4240      	negs	r0, r0
 8000494:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000498:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 800049c:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80004a0:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80004a4:	d002      	beq.n	80004ac <__adddf3+0x84>
 80004a6:	4252      	negs	r2, r2
 80004a8:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80004ac:	ea94 0f05 	teq	r4, r5
 80004b0:	f000 80a7 	beq.w	8000602 <__adddf3+0x1da>
 80004b4:	f1a4 0401 	sub.w	r4, r4, #1
 80004b8:	f1d5 0e20 	rsbs	lr, r5, #32
 80004bc:	db0d      	blt.n	80004da <__adddf3+0xb2>
 80004be:	fa02 fc0e 	lsl.w	ip, r2, lr
 80004c2:	fa22 f205 	lsr.w	r2, r2, r5
 80004c6:	1880      	adds	r0, r0, r2
 80004c8:	f141 0100 	adc.w	r1, r1, #0
 80004cc:	fa03 f20e 	lsl.w	r2, r3, lr
 80004d0:	1880      	adds	r0, r0, r2
 80004d2:	fa43 f305 	asr.w	r3, r3, r5
 80004d6:	4159      	adcs	r1, r3
 80004d8:	e00e      	b.n	80004f8 <__adddf3+0xd0>
 80004da:	f1a5 0520 	sub.w	r5, r5, #32
 80004de:	f10e 0e20 	add.w	lr, lr, #32
 80004e2:	2a01      	cmp	r2, #1
 80004e4:	fa03 fc0e 	lsl.w	ip, r3, lr
 80004e8:	bf28      	it	cs
 80004ea:	f04c 0c02 	orrcs.w	ip, ip, #2
 80004ee:	fa43 f305 	asr.w	r3, r3, r5
 80004f2:	18c0      	adds	r0, r0, r3
 80004f4:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004fc:	d507      	bpl.n	800050e <__adddf3+0xe6>
 80004fe:	f04f 0e00 	mov.w	lr, #0
 8000502:	f1dc 0c00 	rsbs	ip, ip, #0
 8000506:	eb7e 0000 	sbcs.w	r0, lr, r0
 800050a:	eb6e 0101 	sbc.w	r1, lr, r1
 800050e:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000512:	d31b      	bcc.n	800054c <__adddf3+0x124>
 8000514:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000518:	d30c      	bcc.n	8000534 <__adddf3+0x10c>
 800051a:	0849      	lsrs	r1, r1, #1
 800051c:	ea5f 0030 	movs.w	r0, r0, rrx
 8000520:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000524:	f104 0401 	add.w	r4, r4, #1
 8000528:	ea4f 5244 	mov.w	r2, r4, lsl #21
 800052c:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000530:	f080 809a 	bcs.w	8000668 <__adddf3+0x240>
 8000534:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000538:	bf08      	it	eq
 800053a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800053e:	f150 0000 	adcs.w	r0, r0, #0
 8000542:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000546:	ea41 0105 	orr.w	r1, r1, r5
 800054a:	bd30      	pop	{r4, r5, pc}
 800054c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000550:	4140      	adcs	r0, r0
 8000552:	eb41 0101 	adc.w	r1, r1, r1
 8000556:	3c01      	subs	r4, #1
 8000558:	bf28      	it	cs
 800055a:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800055e:	d2e9      	bcs.n	8000534 <__adddf3+0x10c>
 8000560:	f091 0f00 	teq	r1, #0
 8000564:	bf04      	itt	eq
 8000566:	4601      	moveq	r1, r0
 8000568:	2000      	moveq	r0, #0
 800056a:	fab1 f381 	clz	r3, r1
 800056e:	bf08      	it	eq
 8000570:	3320      	addeq	r3, #32
 8000572:	f1a3 030b 	sub.w	r3, r3, #11
 8000576:	f1b3 0220 	subs.w	r2, r3, #32
 800057a:	da0c      	bge.n	8000596 <__adddf3+0x16e>
 800057c:	320c      	adds	r2, #12
 800057e:	dd08      	ble.n	8000592 <__adddf3+0x16a>
 8000580:	f102 0c14 	add.w	ip, r2, #20
 8000584:	f1c2 020c 	rsb	r2, r2, #12
 8000588:	fa01 f00c 	lsl.w	r0, r1, ip
 800058c:	fa21 f102 	lsr.w	r1, r1, r2
 8000590:	e00c      	b.n	80005ac <__adddf3+0x184>
 8000592:	f102 0214 	add.w	r2, r2, #20
 8000596:	bfd8      	it	le
 8000598:	f1c2 0c20 	rsble	ip, r2, #32
 800059c:	fa01 f102 	lsl.w	r1, r1, r2
 80005a0:	fa20 fc0c 	lsr.w	ip, r0, ip
 80005a4:	bfdc      	itt	le
 80005a6:	ea41 010c 	orrle.w	r1, r1, ip
 80005aa:	4090      	lslle	r0, r2
 80005ac:	1ae4      	subs	r4, r4, r3
 80005ae:	bfa2      	ittt	ge
 80005b0:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80005b4:	4329      	orrge	r1, r5
 80005b6:	bd30      	popge	{r4, r5, pc}
 80005b8:	ea6f 0404 	mvn.w	r4, r4
 80005bc:	3c1f      	subs	r4, #31
 80005be:	da1c      	bge.n	80005fa <__adddf3+0x1d2>
 80005c0:	340c      	adds	r4, #12
 80005c2:	dc0e      	bgt.n	80005e2 <__adddf3+0x1ba>
 80005c4:	f104 0414 	add.w	r4, r4, #20
 80005c8:	f1c4 0220 	rsb	r2, r4, #32
 80005cc:	fa20 f004 	lsr.w	r0, r0, r4
 80005d0:	fa01 f302 	lsl.w	r3, r1, r2
 80005d4:	ea40 0003 	orr.w	r0, r0, r3
 80005d8:	fa21 f304 	lsr.w	r3, r1, r4
 80005dc:	ea45 0103 	orr.w	r1, r5, r3
 80005e0:	bd30      	pop	{r4, r5, pc}
 80005e2:	f1c4 040c 	rsb	r4, r4, #12
 80005e6:	f1c4 0220 	rsb	r2, r4, #32
 80005ea:	fa20 f002 	lsr.w	r0, r0, r2
 80005ee:	fa01 f304 	lsl.w	r3, r1, r4
 80005f2:	ea40 0003 	orr.w	r0, r0, r3
 80005f6:	4629      	mov	r1, r5
 80005f8:	bd30      	pop	{r4, r5, pc}
 80005fa:	fa21 f004 	lsr.w	r0, r1, r4
 80005fe:	4629      	mov	r1, r5
 8000600:	bd30      	pop	{r4, r5, pc}
 8000602:	f094 0f00 	teq	r4, #0
 8000606:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800060a:	bf06      	itte	eq
 800060c:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000610:	3401      	addeq	r4, #1
 8000612:	3d01      	subne	r5, #1
 8000614:	e74e      	b.n	80004b4 <__adddf3+0x8c>
 8000616:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800061a:	bf18      	it	ne
 800061c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000620:	d029      	beq.n	8000676 <__adddf3+0x24e>
 8000622:	ea94 0f05 	teq	r4, r5
 8000626:	bf08      	it	eq
 8000628:	ea90 0f02 	teqeq	r0, r2
 800062c:	d005      	beq.n	800063a <__adddf3+0x212>
 800062e:	ea54 0c00 	orrs.w	ip, r4, r0
 8000632:	bf04      	itt	eq
 8000634:	4619      	moveq	r1, r3
 8000636:	4610      	moveq	r0, r2
 8000638:	bd30      	pop	{r4, r5, pc}
 800063a:	ea91 0f03 	teq	r1, r3
 800063e:	bf1e      	ittt	ne
 8000640:	2100      	movne	r1, #0
 8000642:	2000      	movne	r0, #0
 8000644:	bd30      	popne	{r4, r5, pc}
 8000646:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800064a:	d105      	bne.n	8000658 <__adddf3+0x230>
 800064c:	0040      	lsls	r0, r0, #1
 800064e:	4149      	adcs	r1, r1
 8000650:	bf28      	it	cs
 8000652:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000656:	bd30      	pop	{r4, r5, pc}
 8000658:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 800065c:	bf3c      	itt	cc
 800065e:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000662:	bd30      	popcc	{r4, r5, pc}
 8000664:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000668:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 800066c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000670:	f04f 0000 	mov.w	r0, #0
 8000674:	bd30      	pop	{r4, r5, pc}
 8000676:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800067a:	bf1a      	itte	ne
 800067c:	4619      	movne	r1, r3
 800067e:	4610      	movne	r0, r2
 8000680:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000684:	bf1c      	itt	ne
 8000686:	460b      	movne	r3, r1
 8000688:	4602      	movne	r2, r0
 800068a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800068e:	bf06      	itte	eq
 8000690:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000694:	ea91 0f03 	teqeq	r1, r3
 8000698:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 800069c:	bd30      	pop	{r4, r5, pc}
 800069e:	bf00      	nop

080006a0 <__aeabi_ui2d>:
 80006a0:	f090 0f00 	teq	r0, #0
 80006a4:	bf04      	itt	eq
 80006a6:	2100      	moveq	r1, #0
 80006a8:	4770      	bxeq	lr
 80006aa:	b530      	push	{r4, r5, lr}
 80006ac:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80006b0:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80006b4:	f04f 0500 	mov.w	r5, #0
 80006b8:	f04f 0100 	mov.w	r1, #0
 80006bc:	e750      	b.n	8000560 <__adddf3+0x138>
 80006be:	bf00      	nop

080006c0 <__aeabi_i2d>:
 80006c0:	f090 0f00 	teq	r0, #0
 80006c4:	bf04      	itt	eq
 80006c6:	2100      	moveq	r1, #0
 80006c8:	4770      	bxeq	lr
 80006ca:	b530      	push	{r4, r5, lr}
 80006cc:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80006d0:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80006d4:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80006d8:	bf48      	it	mi
 80006da:	4240      	negmi	r0, r0
 80006dc:	f04f 0100 	mov.w	r1, #0
 80006e0:	e73e      	b.n	8000560 <__adddf3+0x138>
 80006e2:	bf00      	nop

080006e4 <__aeabi_f2d>:
 80006e4:	0042      	lsls	r2, r0, #1
 80006e6:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80006ea:	ea4f 0131 	mov.w	r1, r1, rrx
 80006ee:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80006f2:	bf1f      	itttt	ne
 80006f4:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80006f8:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80006fc:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000700:	4770      	bxne	lr
 8000702:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000706:	bf08      	it	eq
 8000708:	4770      	bxeq	lr
 800070a:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800070e:	bf04      	itt	eq
 8000710:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000714:	4770      	bxeq	lr
 8000716:	b530      	push	{r4, r5, lr}
 8000718:	f44f 7460 	mov.w	r4, #896	; 0x380
 800071c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	e71c      	b.n	8000560 <__adddf3+0x138>
 8000726:	bf00      	nop

08000728 <__aeabi_ul2d>:
 8000728:	ea50 0201 	orrs.w	r2, r0, r1
 800072c:	bf08      	it	eq
 800072e:	4770      	bxeq	lr
 8000730:	b530      	push	{r4, r5, lr}
 8000732:	f04f 0500 	mov.w	r5, #0
 8000736:	e00a      	b.n	800074e <__aeabi_l2d+0x16>

08000738 <__aeabi_l2d>:
 8000738:	ea50 0201 	orrs.w	r2, r0, r1
 800073c:	bf08      	it	eq
 800073e:	4770      	bxeq	lr
 8000740:	b530      	push	{r4, r5, lr}
 8000742:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000746:	d502      	bpl.n	800074e <__aeabi_l2d+0x16>
 8000748:	4240      	negs	r0, r0
 800074a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800074e:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000752:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000756:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800075a:	f43f aed8 	beq.w	800050e <__adddf3+0xe6>
 800075e:	f04f 0203 	mov.w	r2, #3
 8000762:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000766:	bf18      	it	ne
 8000768:	3203      	addne	r2, #3
 800076a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800076e:	bf18      	it	ne
 8000770:	3203      	addne	r2, #3
 8000772:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000776:	f1c2 0320 	rsb	r3, r2, #32
 800077a:	fa00 fc03 	lsl.w	ip, r0, r3
 800077e:	fa20 f002 	lsr.w	r0, r0, r2
 8000782:	fa01 fe03 	lsl.w	lr, r1, r3
 8000786:	ea40 000e 	orr.w	r0, r0, lr
 800078a:	fa21 f102 	lsr.w	r1, r1, r2
 800078e:	4414      	add	r4, r2
 8000790:	e6bd      	b.n	800050e <__adddf3+0xe6>
 8000792:	bf00      	nop

08000794 <__aeabi_d2uiz>:
 8000794:	004a      	lsls	r2, r1, #1
 8000796:	d211      	bcs.n	80007bc <__aeabi_d2uiz+0x28>
 8000798:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 800079c:	d211      	bcs.n	80007c2 <__aeabi_d2uiz+0x2e>
 800079e:	d50d      	bpl.n	80007bc <__aeabi_d2uiz+0x28>
 80007a0:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80007a4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80007a8:	d40e      	bmi.n	80007c8 <__aeabi_d2uiz+0x34>
 80007aa:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80007ae:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80007b2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80007b6:	fa23 f002 	lsr.w	r0, r3, r2
 80007ba:	4770      	bx	lr
 80007bc:	f04f 0000 	mov.w	r0, #0
 80007c0:	4770      	bx	lr
 80007c2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80007c6:	d102      	bne.n	80007ce <__aeabi_d2uiz+0x3a>
 80007c8:	f04f 30ff 	mov.w	r0, #4294967295
 80007cc:	4770      	bx	lr
 80007ce:	f04f 0000 	mov.w	r0, #0
 80007d2:	4770      	bx	lr

080007d4 <__aeabi_d2f>:
 80007d4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80007d8:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 80007dc:	bf24      	itt	cs
 80007de:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 80007e2:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 80007e6:	d90d      	bls.n	8000804 <__aeabi_d2f+0x30>
 80007e8:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80007ec:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 80007f0:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 80007f4:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 80007f8:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 80007fc:	bf08      	it	eq
 80007fe:	f020 0001 	biceq.w	r0, r0, #1
 8000802:	4770      	bx	lr
 8000804:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000808:	d121      	bne.n	800084e <__aeabi_d2f+0x7a>
 800080a:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 800080e:	bfbc      	itt	lt
 8000810:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000814:	4770      	bxlt	lr
 8000816:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800081a:	ea4f 5252 	mov.w	r2, r2, lsr #21
 800081e:	f1c2 0218 	rsb	r2, r2, #24
 8000822:	f1c2 0c20 	rsb	ip, r2, #32
 8000826:	fa10 f30c 	lsls.w	r3, r0, ip
 800082a:	fa20 f002 	lsr.w	r0, r0, r2
 800082e:	bf18      	it	ne
 8000830:	f040 0001 	orrne.w	r0, r0, #1
 8000834:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000838:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 800083c:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000840:	ea40 000c 	orr.w	r0, r0, ip
 8000844:	fa23 f302 	lsr.w	r3, r3, r2
 8000848:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800084c:	e7cc      	b.n	80007e8 <__aeabi_d2f+0x14>
 800084e:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000852:	d107      	bne.n	8000864 <__aeabi_d2f+0x90>
 8000854:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000858:	bf1e      	ittt	ne
 800085a:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 800085e:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000862:	4770      	bxne	lr
 8000864:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000868:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 800086c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000870:	4770      	bx	lr
 8000872:	bf00      	nop

08000874 <__aeabi_uldivmod>:
 8000874:	b953      	cbnz	r3, 800088c <__aeabi_uldivmod+0x18>
 8000876:	b94a      	cbnz	r2, 800088c <__aeabi_uldivmod+0x18>
 8000878:	2900      	cmp	r1, #0
 800087a:	bf08      	it	eq
 800087c:	2800      	cmpeq	r0, #0
 800087e:	bf1c      	itt	ne
 8000880:	f04f 31ff 	movne.w	r1, #4294967295
 8000884:	f04f 30ff 	movne.w	r0, #4294967295
 8000888:	f000 b970 	b.w	8000b6c <__aeabi_idiv0>
 800088c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000890:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000894:	f000 f806 	bl	80008a4 <__udivmoddi4>
 8000898:	f8dd e004 	ldr.w	lr, [sp, #4]
 800089c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80008a0:	b004      	add	sp, #16
 80008a2:	4770      	bx	lr

080008a4 <__udivmoddi4>:
 80008a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80008a8:	9e08      	ldr	r6, [sp, #32]
 80008aa:	460d      	mov	r5, r1
 80008ac:	4604      	mov	r4, r0
 80008ae:	460f      	mov	r7, r1
 80008b0:	2b00      	cmp	r3, #0
 80008b2:	d14a      	bne.n	800094a <__udivmoddi4+0xa6>
 80008b4:	428a      	cmp	r2, r1
 80008b6:	4694      	mov	ip, r2
 80008b8:	d965      	bls.n	8000986 <__udivmoddi4+0xe2>
 80008ba:	fab2 f382 	clz	r3, r2
 80008be:	b143      	cbz	r3, 80008d2 <__udivmoddi4+0x2e>
 80008c0:	fa02 fc03 	lsl.w	ip, r2, r3
 80008c4:	f1c3 0220 	rsb	r2, r3, #32
 80008c8:	409f      	lsls	r7, r3
 80008ca:	fa20 f202 	lsr.w	r2, r0, r2
 80008ce:	4317      	orrs	r7, r2
 80008d0:	409c      	lsls	r4, r3
 80008d2:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80008d6:	fa1f f58c 	uxth.w	r5, ip
 80008da:	fbb7 f1fe 	udiv	r1, r7, lr
 80008de:	0c22      	lsrs	r2, r4, #16
 80008e0:	fb0e 7711 	mls	r7, lr, r1, r7
 80008e4:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80008e8:	fb01 f005 	mul.w	r0, r1, r5
 80008ec:	4290      	cmp	r0, r2
 80008ee:	d90a      	bls.n	8000906 <__udivmoddi4+0x62>
 80008f0:	eb1c 0202 	adds.w	r2, ip, r2
 80008f4:	f101 37ff 	add.w	r7, r1, #4294967295
 80008f8:	f080 811c 	bcs.w	8000b34 <__udivmoddi4+0x290>
 80008fc:	4290      	cmp	r0, r2
 80008fe:	f240 8119 	bls.w	8000b34 <__udivmoddi4+0x290>
 8000902:	3902      	subs	r1, #2
 8000904:	4462      	add	r2, ip
 8000906:	1a12      	subs	r2, r2, r0
 8000908:	b2a4      	uxth	r4, r4
 800090a:	fbb2 f0fe 	udiv	r0, r2, lr
 800090e:	fb0e 2210 	mls	r2, lr, r0, r2
 8000912:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000916:	fb00 f505 	mul.w	r5, r0, r5
 800091a:	42a5      	cmp	r5, r4
 800091c:	d90a      	bls.n	8000934 <__udivmoddi4+0x90>
 800091e:	eb1c 0404 	adds.w	r4, ip, r4
 8000922:	f100 32ff 	add.w	r2, r0, #4294967295
 8000926:	f080 8107 	bcs.w	8000b38 <__udivmoddi4+0x294>
 800092a:	42a5      	cmp	r5, r4
 800092c:	f240 8104 	bls.w	8000b38 <__udivmoddi4+0x294>
 8000930:	4464      	add	r4, ip
 8000932:	3802      	subs	r0, #2
 8000934:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000938:	1b64      	subs	r4, r4, r5
 800093a:	2100      	movs	r1, #0
 800093c:	b11e      	cbz	r6, 8000946 <__udivmoddi4+0xa2>
 800093e:	40dc      	lsrs	r4, r3
 8000940:	2300      	movs	r3, #0
 8000942:	e9c6 4300 	strd	r4, r3, [r6]
 8000946:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800094a:	428b      	cmp	r3, r1
 800094c:	d908      	bls.n	8000960 <__udivmoddi4+0xbc>
 800094e:	2e00      	cmp	r6, #0
 8000950:	f000 80ed 	beq.w	8000b2e <__udivmoddi4+0x28a>
 8000954:	2100      	movs	r1, #0
 8000956:	e9c6 0500 	strd	r0, r5, [r6]
 800095a:	4608      	mov	r0, r1
 800095c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000960:	fab3 f183 	clz	r1, r3
 8000964:	2900      	cmp	r1, #0
 8000966:	d149      	bne.n	80009fc <__udivmoddi4+0x158>
 8000968:	42ab      	cmp	r3, r5
 800096a:	d302      	bcc.n	8000972 <__udivmoddi4+0xce>
 800096c:	4282      	cmp	r2, r0
 800096e:	f200 80f8 	bhi.w	8000b62 <__udivmoddi4+0x2be>
 8000972:	1a84      	subs	r4, r0, r2
 8000974:	eb65 0203 	sbc.w	r2, r5, r3
 8000978:	2001      	movs	r0, #1
 800097a:	4617      	mov	r7, r2
 800097c:	2e00      	cmp	r6, #0
 800097e:	d0e2      	beq.n	8000946 <__udivmoddi4+0xa2>
 8000980:	e9c6 4700 	strd	r4, r7, [r6]
 8000984:	e7df      	b.n	8000946 <__udivmoddi4+0xa2>
 8000986:	b902      	cbnz	r2, 800098a <__udivmoddi4+0xe6>
 8000988:	deff      	udf	#255	; 0xff
 800098a:	fab2 f382 	clz	r3, r2
 800098e:	2b00      	cmp	r3, #0
 8000990:	f040 8090 	bne.w	8000ab4 <__udivmoddi4+0x210>
 8000994:	1a8a      	subs	r2, r1, r2
 8000996:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800099a:	fa1f fe8c 	uxth.w	lr, ip
 800099e:	2101      	movs	r1, #1
 80009a0:	fbb2 f5f7 	udiv	r5, r2, r7
 80009a4:	fb07 2015 	mls	r0, r7, r5, r2
 80009a8:	0c22      	lsrs	r2, r4, #16
 80009aa:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80009ae:	fb0e f005 	mul.w	r0, lr, r5
 80009b2:	4290      	cmp	r0, r2
 80009b4:	d908      	bls.n	80009c8 <__udivmoddi4+0x124>
 80009b6:	eb1c 0202 	adds.w	r2, ip, r2
 80009ba:	f105 38ff 	add.w	r8, r5, #4294967295
 80009be:	d202      	bcs.n	80009c6 <__udivmoddi4+0x122>
 80009c0:	4290      	cmp	r0, r2
 80009c2:	f200 80cb 	bhi.w	8000b5c <__udivmoddi4+0x2b8>
 80009c6:	4645      	mov	r5, r8
 80009c8:	1a12      	subs	r2, r2, r0
 80009ca:	b2a4      	uxth	r4, r4
 80009cc:	fbb2 f0f7 	udiv	r0, r2, r7
 80009d0:	fb07 2210 	mls	r2, r7, r0, r2
 80009d4:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80009d8:	fb0e fe00 	mul.w	lr, lr, r0
 80009dc:	45a6      	cmp	lr, r4
 80009de:	d908      	bls.n	80009f2 <__udivmoddi4+0x14e>
 80009e0:	eb1c 0404 	adds.w	r4, ip, r4
 80009e4:	f100 32ff 	add.w	r2, r0, #4294967295
 80009e8:	d202      	bcs.n	80009f0 <__udivmoddi4+0x14c>
 80009ea:	45a6      	cmp	lr, r4
 80009ec:	f200 80bb 	bhi.w	8000b66 <__udivmoddi4+0x2c2>
 80009f0:	4610      	mov	r0, r2
 80009f2:	eba4 040e 	sub.w	r4, r4, lr
 80009f6:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 80009fa:	e79f      	b.n	800093c <__udivmoddi4+0x98>
 80009fc:	f1c1 0720 	rsb	r7, r1, #32
 8000a00:	408b      	lsls	r3, r1
 8000a02:	fa22 fc07 	lsr.w	ip, r2, r7
 8000a06:	ea4c 0c03 	orr.w	ip, ip, r3
 8000a0a:	fa05 f401 	lsl.w	r4, r5, r1
 8000a0e:	fa20 f307 	lsr.w	r3, r0, r7
 8000a12:	40fd      	lsrs	r5, r7
 8000a14:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000a18:	4323      	orrs	r3, r4
 8000a1a:	fbb5 f8f9 	udiv	r8, r5, r9
 8000a1e:	fa1f fe8c 	uxth.w	lr, ip
 8000a22:	fb09 5518 	mls	r5, r9, r8, r5
 8000a26:	0c1c      	lsrs	r4, r3, #16
 8000a28:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000a2c:	fb08 f50e 	mul.w	r5, r8, lr
 8000a30:	42a5      	cmp	r5, r4
 8000a32:	fa02 f201 	lsl.w	r2, r2, r1
 8000a36:	fa00 f001 	lsl.w	r0, r0, r1
 8000a3a:	d90b      	bls.n	8000a54 <__udivmoddi4+0x1b0>
 8000a3c:	eb1c 0404 	adds.w	r4, ip, r4
 8000a40:	f108 3aff 	add.w	sl, r8, #4294967295
 8000a44:	f080 8088 	bcs.w	8000b58 <__udivmoddi4+0x2b4>
 8000a48:	42a5      	cmp	r5, r4
 8000a4a:	f240 8085 	bls.w	8000b58 <__udivmoddi4+0x2b4>
 8000a4e:	f1a8 0802 	sub.w	r8, r8, #2
 8000a52:	4464      	add	r4, ip
 8000a54:	1b64      	subs	r4, r4, r5
 8000a56:	b29d      	uxth	r5, r3
 8000a58:	fbb4 f3f9 	udiv	r3, r4, r9
 8000a5c:	fb09 4413 	mls	r4, r9, r3, r4
 8000a60:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000a64:	fb03 fe0e 	mul.w	lr, r3, lr
 8000a68:	45a6      	cmp	lr, r4
 8000a6a:	d908      	bls.n	8000a7e <__udivmoddi4+0x1da>
 8000a6c:	eb1c 0404 	adds.w	r4, ip, r4
 8000a70:	f103 35ff 	add.w	r5, r3, #4294967295
 8000a74:	d26c      	bcs.n	8000b50 <__udivmoddi4+0x2ac>
 8000a76:	45a6      	cmp	lr, r4
 8000a78:	d96a      	bls.n	8000b50 <__udivmoddi4+0x2ac>
 8000a7a:	3b02      	subs	r3, #2
 8000a7c:	4464      	add	r4, ip
 8000a7e:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000a82:	fba3 9502 	umull	r9, r5, r3, r2
 8000a86:	eba4 040e 	sub.w	r4, r4, lr
 8000a8a:	42ac      	cmp	r4, r5
 8000a8c:	46c8      	mov	r8, r9
 8000a8e:	46ae      	mov	lr, r5
 8000a90:	d356      	bcc.n	8000b40 <__udivmoddi4+0x29c>
 8000a92:	d053      	beq.n	8000b3c <__udivmoddi4+0x298>
 8000a94:	b156      	cbz	r6, 8000aac <__udivmoddi4+0x208>
 8000a96:	ebb0 0208 	subs.w	r2, r0, r8
 8000a9a:	eb64 040e 	sbc.w	r4, r4, lr
 8000a9e:	fa04 f707 	lsl.w	r7, r4, r7
 8000aa2:	40ca      	lsrs	r2, r1
 8000aa4:	40cc      	lsrs	r4, r1
 8000aa6:	4317      	orrs	r7, r2
 8000aa8:	e9c6 7400 	strd	r7, r4, [r6]
 8000aac:	4618      	mov	r0, r3
 8000aae:	2100      	movs	r1, #0
 8000ab0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ab4:	f1c3 0120 	rsb	r1, r3, #32
 8000ab8:	fa02 fc03 	lsl.w	ip, r2, r3
 8000abc:	fa20 f201 	lsr.w	r2, r0, r1
 8000ac0:	fa25 f101 	lsr.w	r1, r5, r1
 8000ac4:	409d      	lsls	r5, r3
 8000ac6:	432a      	orrs	r2, r5
 8000ac8:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000acc:	fa1f fe8c 	uxth.w	lr, ip
 8000ad0:	fbb1 f0f7 	udiv	r0, r1, r7
 8000ad4:	fb07 1510 	mls	r5, r7, r0, r1
 8000ad8:	0c11      	lsrs	r1, r2, #16
 8000ada:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000ade:	fb00 f50e 	mul.w	r5, r0, lr
 8000ae2:	428d      	cmp	r5, r1
 8000ae4:	fa04 f403 	lsl.w	r4, r4, r3
 8000ae8:	d908      	bls.n	8000afc <__udivmoddi4+0x258>
 8000aea:	eb1c 0101 	adds.w	r1, ip, r1
 8000aee:	f100 38ff 	add.w	r8, r0, #4294967295
 8000af2:	d22f      	bcs.n	8000b54 <__udivmoddi4+0x2b0>
 8000af4:	428d      	cmp	r5, r1
 8000af6:	d92d      	bls.n	8000b54 <__udivmoddi4+0x2b0>
 8000af8:	3802      	subs	r0, #2
 8000afa:	4461      	add	r1, ip
 8000afc:	1b49      	subs	r1, r1, r5
 8000afe:	b292      	uxth	r2, r2
 8000b00:	fbb1 f5f7 	udiv	r5, r1, r7
 8000b04:	fb07 1115 	mls	r1, r7, r5, r1
 8000b08:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000b0c:	fb05 f10e 	mul.w	r1, r5, lr
 8000b10:	4291      	cmp	r1, r2
 8000b12:	d908      	bls.n	8000b26 <__udivmoddi4+0x282>
 8000b14:	eb1c 0202 	adds.w	r2, ip, r2
 8000b18:	f105 38ff 	add.w	r8, r5, #4294967295
 8000b1c:	d216      	bcs.n	8000b4c <__udivmoddi4+0x2a8>
 8000b1e:	4291      	cmp	r1, r2
 8000b20:	d914      	bls.n	8000b4c <__udivmoddi4+0x2a8>
 8000b22:	3d02      	subs	r5, #2
 8000b24:	4462      	add	r2, ip
 8000b26:	1a52      	subs	r2, r2, r1
 8000b28:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000b2c:	e738      	b.n	80009a0 <__udivmoddi4+0xfc>
 8000b2e:	4631      	mov	r1, r6
 8000b30:	4630      	mov	r0, r6
 8000b32:	e708      	b.n	8000946 <__udivmoddi4+0xa2>
 8000b34:	4639      	mov	r1, r7
 8000b36:	e6e6      	b.n	8000906 <__udivmoddi4+0x62>
 8000b38:	4610      	mov	r0, r2
 8000b3a:	e6fb      	b.n	8000934 <__udivmoddi4+0x90>
 8000b3c:	4548      	cmp	r0, r9
 8000b3e:	d2a9      	bcs.n	8000a94 <__udivmoddi4+0x1f0>
 8000b40:	ebb9 0802 	subs.w	r8, r9, r2
 8000b44:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000b48:	3b01      	subs	r3, #1
 8000b4a:	e7a3      	b.n	8000a94 <__udivmoddi4+0x1f0>
 8000b4c:	4645      	mov	r5, r8
 8000b4e:	e7ea      	b.n	8000b26 <__udivmoddi4+0x282>
 8000b50:	462b      	mov	r3, r5
 8000b52:	e794      	b.n	8000a7e <__udivmoddi4+0x1da>
 8000b54:	4640      	mov	r0, r8
 8000b56:	e7d1      	b.n	8000afc <__udivmoddi4+0x258>
 8000b58:	46d0      	mov	r8, sl
 8000b5a:	e77b      	b.n	8000a54 <__udivmoddi4+0x1b0>
 8000b5c:	3d02      	subs	r5, #2
 8000b5e:	4462      	add	r2, ip
 8000b60:	e732      	b.n	80009c8 <__udivmoddi4+0x124>
 8000b62:	4608      	mov	r0, r1
 8000b64:	e70a      	b.n	800097c <__udivmoddi4+0xd8>
 8000b66:	4464      	add	r4, ip
 8000b68:	3802      	subs	r0, #2
 8000b6a:	e742      	b.n	80009f2 <__udivmoddi4+0x14e>

08000b6c <__aeabi_idiv0>:
 8000b6c:	4770      	bx	lr
 8000b6e:	bf00      	nop

08000b70 <Average_5_times>:
float GT_Convert_radian = 0.1047197551;
uint16_t HIGH_Limit_PWM = 999;
uint16_t LOW_Limit_PWM = 0;
int32_t delta = 0;

float Average_5_times(float Var, float Temp[20]){
 8000b70:	b480      	push	{r7}
 8000b72:	b087      	sub	sp, #28
 8000b74:	af00      	add	r7, sp, #0
 8000b76:	ed87 0a01 	vstr	s0, [r7, #4]
 8000b7a:	6038      	str	r0, [r7, #0]
    float sum = 0, Out_Average_Var; // Initialize sum to 0
 8000b7c:	f04f 0300 	mov.w	r3, #0
 8000b80:	617b      	str	r3, [r7, #20]
    for (int i = 0; i < 19; i++)
 8000b82:	2300      	movs	r3, #0
 8000b84:	613b      	str	r3, [r7, #16]
 8000b86:	e019      	b.n	8000bbc <Average_5_times+0x4c>
    {
        Temp[i] = Temp[i + 1];  // gán giá trị hiện tại vào giá trị trước
 8000b88:	693b      	ldr	r3, [r7, #16]
 8000b8a:	3301      	adds	r3, #1
 8000b8c:	009b      	lsls	r3, r3, #2
 8000b8e:	683a      	ldr	r2, [r7, #0]
 8000b90:	441a      	add	r2, r3
 8000b92:	693b      	ldr	r3, [r7, #16]
 8000b94:	009b      	lsls	r3, r3, #2
 8000b96:	6839      	ldr	r1, [r7, #0]
 8000b98:	440b      	add	r3, r1
 8000b9a:	6812      	ldr	r2, [r2, #0]
 8000b9c:	601a      	str	r2, [r3, #0]
        sum += Temp[i];        // Cộng dần các giá trị vừa lưu
 8000b9e:	693b      	ldr	r3, [r7, #16]
 8000ba0:	009b      	lsls	r3, r3, #2
 8000ba2:	683a      	ldr	r2, [r7, #0]
 8000ba4:	4413      	add	r3, r2
 8000ba6:	edd3 7a00 	vldr	s15, [r3]
 8000baa:	ed97 7a05 	vldr	s14, [r7, #20]
 8000bae:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000bb2:	edc7 7a05 	vstr	s15, [r7, #20]
    for (int i = 0; i < 19; i++)
 8000bb6:	693b      	ldr	r3, [r7, #16]
 8000bb8:	3301      	adds	r3, #1
 8000bba:	613b      	str	r3, [r7, #16]
 8000bbc:	693b      	ldr	r3, [r7, #16]
 8000bbe:	2b12      	cmp	r3, #18
 8000bc0:	dde2      	ble.n	8000b88 <Average_5_times+0x18>
    }
    // Gán giá trị mới nhất
    Temp[19] = Var;
 8000bc2:	683b      	ldr	r3, [r7, #0]
 8000bc4:	334c      	adds	r3, #76	; 0x4c
 8000bc6:	687a      	ldr	r2, [r7, #4]
 8000bc8:	601a      	str	r2, [r3, #0]
    sum += Temp[19] ;
 8000bca:	683b      	ldr	r3, [r7, #0]
 8000bcc:	334c      	adds	r3, #76	; 0x4c
 8000bce:	edd3 7a00 	vldr	s15, [r3]
 8000bd2:	ed97 7a05 	vldr	s14, [r7, #20]
 8000bd6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000bda:	edc7 7a05 	vstr	s15, [r7, #20]
    // Tính trung bình
    Out_Average_Var = sum / 20;
 8000bde:	ed97 7a05 	vldr	s14, [r7, #20]
 8000be2:	eef3 6a04 	vmov.f32	s13, #52	; 0x41a00000  20.0
 8000be6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000bea:	edc7 7a03 	vstr	s15, [r7, #12]

    return Out_Average_Var;
 8000bee:	68fb      	ldr	r3, [r7, #12]
 8000bf0:	ee07 3a90 	vmov	s15, r3
}
 8000bf4:	eeb0 0a67 	vmov.f32	s0, s15
 8000bf8:	371c      	adds	r7, #28
 8000bfa:	46bd      	mov	sp, r7
 8000bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c00:	4770      	bx	lr
	...

08000c04 <RPM_Calc>:

void read_encoder(TIM_HandleTypeDef* htim, struct Para_Motor* pt_Para_M){
	pt_Para_M->Encoder = __HAL_TIM_GET_COUNTER(htim);
}

void RPM_Calc(TIM_HandleTypeDef* htim, struct Para_Motor* pt_Para_M ){
 8000c04:	b580      	push	{r7, lr}
 8000c06:	b082      	sub	sp, #8
 8000c08:	af00      	add	r7, sp, #0
 8000c0a:	6078      	str	r0, [r7, #4]
 8000c0c:	6039      	str	r1, [r7, #0]

	pt_Para_M->Encoder = __HAL_TIM_GET_COUNTER(htim);		// Cập nhật encoder
 8000c0e:	687b      	ldr	r3, [r7, #4]
 8000c10:	681b      	ldr	r3, [r3, #0]
 8000c12:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000c14:	683b      	ldr	r3, [r7, #0]
 8000c16:	661a      	str	r2, [r3, #96]	; 0x60
	delta = abs(pt_Para_M->Encoder - pt_Para_M->Encoder_P);		//Lấy chênh lệch 2 khoảng encoder
 8000c18:	683b      	ldr	r3, [r7, #0]
 8000c1a:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8000c1c:	683b      	ldr	r3, [r7, #0]
 8000c1e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8000c20:	1ad3      	subs	r3, r2, r3
 8000c22:	2b00      	cmp	r3, #0
 8000c24:	bfb8      	it	lt
 8000c26:	425b      	neglt	r3, r3
 8000c28:	4a22      	ldr	r2, [pc, #136]	; (8000cb4 <RPM_Calc+0xb0>)
 8000c2a:	6013      	str	r3, [r2, #0]

	// Kiểm tra giá trị chênh lệch lớn hơn nửa vòng là vô lý nên lấy giá trị tràn trừ giá trị chênh lệch
	if (delta >= __HAL_TIM_GET_AUTORELOAD(htim) / 2){
 8000c2c:	687b      	ldr	r3, [r7, #4]
 8000c2e:	681b      	ldr	r3, [r3, #0]
 8000c30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000c32:	085b      	lsrs	r3, r3, #1
 8000c34:	4a1f      	ldr	r2, [pc, #124]	; (8000cb4 <RPM_Calc+0xb0>)
 8000c36:	6812      	ldr	r2, [r2, #0]
 8000c38:	4293      	cmp	r3, r2
 8000c3a:	d808      	bhi.n	8000c4e <RPM_Calc+0x4a>
		delta = __HAL_TIM_GET_AUTORELOAD(htim) - delta;
 8000c3c:	687b      	ldr	r3, [r7, #4]
 8000c3e:	681b      	ldr	r3, [r3, #0]
 8000c40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000c42:	4a1c      	ldr	r2, [pc, #112]	; (8000cb4 <RPM_Calc+0xb0>)
 8000c44:	6812      	ldr	r2, [r2, #0]
 8000c46:	1a9b      	subs	r3, r3, r2
 8000c48:	461a      	mov	r2, r3
 8000c4a:	4b1a      	ldr	r3, [pc, #104]	; (8000cb4 <RPM_Calc+0xb0>)
 8000c4c:	601a      	str	r2, [r3, #0]
	}
	pt_Para_M->RPM_Avg = (delta / (PPR*4*Time_Interrupt)*60);
 8000c4e:	4b19      	ldr	r3, [pc, #100]	; (8000cb4 <RPM_Calc+0xb0>)
 8000c50:	681b      	ldr	r3, [r3, #0]
 8000c52:	ee07 3a90 	vmov	s15, r3
 8000c56:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8000c5a:	4b17      	ldr	r3, [pc, #92]	; (8000cb8 <RPM_Calc+0xb4>)
 8000c5c:	881b      	ldrh	r3, [r3, #0]
 8000c5e:	009b      	lsls	r3, r3, #2
 8000c60:	ee07 3a90 	vmov	s15, r3
 8000c64:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000c68:	4b14      	ldr	r3, [pc, #80]	; (8000cbc <RPM_Calc+0xb8>)
 8000c6a:	edd3 7a00 	vldr	s15, [r3]
 8000c6e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000c72:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000c76:	ed9f 7a12 	vldr	s14, [pc, #72]	; 8000cc0 <RPM_Calc+0xbc>
 8000c7a:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000c7e:	683b      	ldr	r3, [r7, #0]
 8000c80:	edc3 7a1a 	vstr	s15, [r3, #104]	; 0x68
	pt_Para_M->RPM = Average_5_times(pt_Para_M->RPM_Avg, pt_Para_M->Temp);
 8000c84:	683b      	ldr	r3, [r7, #0]
 8000c86:	edd3 7a1a 	vldr	s15, [r3, #104]	; 0x68
 8000c8a:	683b      	ldr	r3, [r7, #0]
 8000c8c:	3370      	adds	r3, #112	; 0x70
 8000c8e:	4618      	mov	r0, r3
 8000c90:	eeb0 0a67 	vmov.f32	s0, s15
 8000c94:	f7ff ff6c 	bl	8000b70 <Average_5_times>
 8000c98:	eef0 7a40 	vmov.f32	s15, s0
 8000c9c:	683b      	ldr	r3, [r7, #0]
 8000c9e:	edc3 7a1b 	vstr	s15, [r3, #108]	; 0x6c

	pt_Para_M->Encoder_P = pt_Para_M->Encoder;
 8000ca2:	683b      	ldr	r3, [r7, #0]
 8000ca4:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8000ca6:	683b      	ldr	r3, [r7, #0]
 8000ca8:	665a      	str	r2, [r3, #100]	; 0x64

}
 8000caa:	bf00      	nop
 8000cac:	3708      	adds	r7, #8
 8000cae:	46bd      	mov	sp, r7
 8000cb0:	bd80      	pop	{r7, pc}
 8000cb2:	bf00      	nop
 8000cb4:	20000040 	.word	0x20000040
 8000cb8:	20000000 	.word	0x20000000
 8000cbc:	20000004 	.word	0x20000004
 8000cc0:	42700000 	.word	0x42700000

08000cc4 <Anti_Windup>:

float Anti_Windup(float Out_PWM, uint16_t HIGH_Limit, uint16_t LOW_Limit, float Kb){
 8000cc4:	b480      	push	{r7}
 8000cc6:	b087      	sub	sp, #28
 8000cc8:	af00      	add	r7, sp, #0
 8000cca:	ed87 0a03 	vstr	s0, [r7, #12]
 8000cce:	4603      	mov	r3, r0
 8000cd0:	460a      	mov	r2, r1
 8000cd2:	edc7 0a01 	vstr	s1, [r7, #4]
 8000cd6:	817b      	strh	r3, [r7, #10]
 8000cd8:	4613      	mov	r3, r2
 8000cda:	813b      	strh	r3, [r7, #8]
    float e_reset = 0;
 8000cdc:	f04f 0300 	mov.w	r3, #0
 8000ce0:	617b      	str	r3, [r7, #20]
    float Ui_anti;

    if (Out_PWM > HIGH_Limit){
 8000ce2:	897b      	ldrh	r3, [r7, #10]
 8000ce4:	ee07 3a90 	vmov	s15, r3
 8000ce8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000cec:	ed97 7a03 	vldr	s14, [r7, #12]
 8000cf0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000cf4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000cf8:	dd0b      	ble.n	8000d12 <Anti_Windup+0x4e>
        e_reset = (HIGH_Limit - Out_PWM );
 8000cfa:	897b      	ldrh	r3, [r7, #10]
 8000cfc:	ee07 3a90 	vmov	s15, r3
 8000d00:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000d04:	edd7 7a03 	vldr	s15, [r7, #12]
 8000d08:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000d0c:	edc7 7a05 	vstr	s15, [r7, #20]
 8000d10:	e01a      	b.n	8000d48 <Anti_Windup+0x84>
    }
    else if (Out_PWM < LOW_Limit){
 8000d12:	893b      	ldrh	r3, [r7, #8]
 8000d14:	ee07 3a90 	vmov	s15, r3
 8000d18:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000d1c:	ed97 7a03 	vldr	s14, [r7, #12]
 8000d20:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000d24:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000d28:	d50b      	bpl.n	8000d42 <Anti_Windup+0x7e>
        e_reset = (LOW_Limit - Out_PWM);
 8000d2a:	893b      	ldrh	r3, [r7, #8]
 8000d2c:	ee07 3a90 	vmov	s15, r3
 8000d30:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000d34:	edd7 7a03 	vldr	s15, [r7, #12]
 8000d38:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000d3c:	edc7 7a05 	vstr	s15, [r7, #20]
 8000d40:	e002      	b.n	8000d48 <Anti_Windup+0x84>
    }
    else {
        e_reset = 0;
 8000d42:	f04f 0300 	mov.w	r3, #0
 8000d46:	617b      	str	r3, [r7, #20]
    }
    Ui_anti = Time_Interrupt * e_reset * Kb;
 8000d48:	4b0b      	ldr	r3, [pc, #44]	; (8000d78 <Anti_Windup+0xb4>)
 8000d4a:	ed93 7a00 	vldr	s14, [r3]
 8000d4e:	edd7 7a05 	vldr	s15, [r7, #20]
 8000d52:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000d56:	ed97 7a01 	vldr	s14, [r7, #4]
 8000d5a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000d5e:	edc7 7a04 	vstr	s15, [r7, #16]

    return Ui_anti;
 8000d62:	693b      	ldr	r3, [r7, #16]
 8000d64:	ee07 3a90 	vmov	s15, r3
}
 8000d68:	eeb0 0a67 	vmov.f32	s0, s15
 8000d6c:	371c      	adds	r7, #28
 8000d6e:	46bd      	mov	sp, r7
 8000d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d74:	4770      	bx	lr
 8000d76:	bf00      	nop
 8000d78:	20000004 	.word	0x20000004

08000d7c <PID_control>:

void PID_control(TIM_HandleTypeDef* htim,struct Para_Motor* pt_Para_M, uint32_t channel){
 8000d7c:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8000d80:	b084      	sub	sp, #16
 8000d82:	af00      	add	r7, sp, #0
 8000d84:	60f8      	str	r0, [r7, #12]
 8000d86:	60b9      	str	r1, [r7, #8]
 8000d88:	607a      	str	r2, [r7, #4]
	pt_Para_M->ek = (pt_Para_M->SP_RPM - pt_Para_M->RPM);	// Xác định sai số
 8000d8a:	68bb      	ldr	r3, [r7, #8]
 8000d8c:	ed93 7a30 	vldr	s14, [r3, #192]	; 0xc0
 8000d90:	68bb      	ldr	r3, [r7, #8]
 8000d92:	edd3 7a1b 	vldr	s15, [r3, #108]	; 0x6c
 8000d96:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000d9a:	ee17 0a90 	vmov	r0, s15
 8000d9e:	f7ff fca1 	bl	80006e4 <__aeabi_f2d>
 8000da2:	4602      	mov	r2, r0
 8000da4:	460b      	mov	r3, r1
 8000da6:	68b9      	ldr	r1, [r7, #8]
 8000da8:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40

	pt_Para_M->Up = pt_Para_M->Kp * pt_Para_M->ek;			// Xác định Up
 8000dac:	68bb      	ldr	r3, [r7, #8]
 8000dae:	689b      	ldr	r3, [r3, #8]
 8000db0:	4618      	mov	r0, r3
 8000db2:	f7ff fc97 	bl	80006e4 <__aeabi_f2d>
 8000db6:	68bb      	ldr	r3, [r7, #8]
 8000db8:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	; 0x40
 8000dbc:	f7ff fa04 	bl	80001c8 <__aeabi_dmul>
 8000dc0:	4602      	mov	r2, r0
 8000dc2:	460b      	mov	r3, r1
 8000dc4:	4610      	mov	r0, r2
 8000dc6:	4619      	mov	r1, r3
 8000dc8:	f7ff fd04 	bl	80007d4 <__aeabi_d2f>
 8000dcc:	4602      	mov	r2, r0
 8000dce:	68bb      	ldr	r3, [r7, #8]
 8000dd0:	619a      	str	r2, [r3, #24]
	pt_Para_M->Ui = pt_Para_M->Ui_1 + pt_Para_M->Ki * pt_Para_M->ek_1 * Time_Interrupt + pt_Para_M->Ui_Antiwindup;
 8000dd2:	68bb      	ldr	r3, [r7, #8]
 8000dd4:	e9d3 450a 	ldrd	r4, r5, [r3, #40]	; 0x28
 8000dd8:	68bb      	ldr	r3, [r7, #8]
 8000dda:	68db      	ldr	r3, [r3, #12]
 8000ddc:	4618      	mov	r0, r3
 8000dde:	f7ff fc81 	bl	80006e4 <__aeabi_f2d>
 8000de2:	68bb      	ldr	r3, [r7, #8]
 8000de4:	e9d3 2312 	ldrd	r2, r3, [r3, #72]	; 0x48
 8000de8:	f7ff f9ee 	bl	80001c8 <__aeabi_dmul>
 8000dec:	4602      	mov	r2, r0
 8000dee:	460b      	mov	r3, r1
 8000df0:	4690      	mov	r8, r2
 8000df2:	4699      	mov	r9, r3
 8000df4:	4b70      	ldr	r3, [pc, #448]	; (8000fb8 <PID_control+0x23c>)
 8000df6:	681b      	ldr	r3, [r3, #0]
 8000df8:	4618      	mov	r0, r3
 8000dfa:	f7ff fc73 	bl	80006e4 <__aeabi_f2d>
 8000dfe:	4602      	mov	r2, r0
 8000e00:	460b      	mov	r3, r1
 8000e02:	4640      	mov	r0, r8
 8000e04:	4649      	mov	r1, r9
 8000e06:	f7ff f9df 	bl	80001c8 <__aeabi_dmul>
 8000e0a:	4602      	mov	r2, r0
 8000e0c:	460b      	mov	r3, r1
 8000e0e:	4620      	mov	r0, r4
 8000e10:	4629      	mov	r1, r5
 8000e12:	f7ff fb09 	bl	8000428 <__adddf3>
 8000e16:	4602      	mov	r2, r0
 8000e18:	460b      	mov	r3, r1
 8000e1a:	4610      	mov	r0, r2
 8000e1c:	4619      	mov	r1, r3
 8000e1e:	68bb      	ldr	r3, [r7, #8]
 8000e20:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 8000e24:	f7ff fb00 	bl	8000428 <__adddf3>
 8000e28:	4602      	mov	r2, r0
 8000e2a:	460b      	mov	r3, r1
 8000e2c:	68b9      	ldr	r1, [r7, #8]
 8000e2e:	e9c1 2308 	strd	r2, r3, [r1, #32]
	pt_Para_M->Ud = pt_Para_M->Ud_1 * (pt_Para_M->ek - pt_Para_M->ek_1);
 8000e32:	68bb      	ldr	r3, [r7, #8]
 8000e34:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000e36:	4618      	mov	r0, r3
 8000e38:	f7ff fc54 	bl	80006e4 <__aeabi_f2d>
 8000e3c:	4604      	mov	r4, r0
 8000e3e:	460d      	mov	r5, r1
 8000e40:	68bb      	ldr	r3, [r7, #8]
 8000e42:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	; 0x40
 8000e46:	68bb      	ldr	r3, [r7, #8]
 8000e48:	e9d3 2312 	ldrd	r2, r3, [r3, #72]	; 0x48
 8000e4c:	f7ff faea 	bl	8000424 <__aeabi_dsub>
 8000e50:	4602      	mov	r2, r0
 8000e52:	460b      	mov	r3, r1
 8000e54:	4620      	mov	r0, r4
 8000e56:	4629      	mov	r1, r5
 8000e58:	f7ff f9b6 	bl	80001c8 <__aeabi_dmul>
 8000e5c:	4602      	mov	r2, r0
 8000e5e:	460b      	mov	r3, r1
 8000e60:	4610      	mov	r0, r2
 8000e62:	4619      	mov	r1, r3
 8000e64:	f7ff fcb6 	bl	80007d4 <__aeabi_d2f>
 8000e68:	4602      	mov	r2, r0
 8000e6a:	68bb      	ldr	r3, [r7, #8]
 8000e6c:	639a      	str	r2, [r3, #56]	; 0x38

	// Anti windup
	pt_Para_M->Ui_Antiwindup = Anti_Windup(pt_Para_M->Temp_PWM, HIGH_Limit_PWM, LOW_Limit_PWM, pt_Para_M->Kb);
 8000e6e:	68bb      	ldr	r3, [r7, #8]
 8000e70:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	; 0x50
 8000e74:	4610      	mov	r0, r2
 8000e76:	4619      	mov	r1, r3
 8000e78:	f7ff fcac 	bl	80007d4 <__aeabi_d2f>
 8000e7c:	4604      	mov	r4, r0
 8000e7e:	4b4f      	ldr	r3, [pc, #316]	; (8000fbc <PID_control+0x240>)
 8000e80:	881a      	ldrh	r2, [r3, #0]
 8000e82:	4b4f      	ldr	r3, [pc, #316]	; (8000fc0 <PID_control+0x244>)
 8000e84:	8819      	ldrh	r1, [r3, #0]
 8000e86:	68bb      	ldr	r3, [r7, #8]
 8000e88:	edd3 7a05 	vldr	s15, [r3, #20]
 8000e8c:	eef0 0a67 	vmov.f32	s1, s15
 8000e90:	4610      	mov	r0, r2
 8000e92:	ee00 4a10 	vmov	s0, r4
 8000e96:	f7ff ff15 	bl	8000cc4 <Anti_Windup>
 8000e9a:	ee10 3a10 	vmov	r3, s0
 8000e9e:	4618      	mov	r0, r3
 8000ea0:	f7ff fc20 	bl	80006e4 <__aeabi_f2d>
 8000ea4:	4602      	mov	r2, r0
 8000ea6:	460b      	mov	r3, r1
 8000ea8:	68b9      	ldr	r1, [r7, #8]
 8000eaa:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30

	pt_Para_M->Temp_PWM = pt_Para_M->Up + pt_Para_M->Ui + pt_Para_M->Ud;
 8000eae:	68bb      	ldr	r3, [r7, #8]
 8000eb0:	699b      	ldr	r3, [r3, #24]
 8000eb2:	4618      	mov	r0, r3
 8000eb4:	f7ff fc16 	bl	80006e4 <__aeabi_f2d>
 8000eb8:	68bb      	ldr	r3, [r7, #8]
 8000eba:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8000ebe:	f7ff fab3 	bl	8000428 <__adddf3>
 8000ec2:	4602      	mov	r2, r0
 8000ec4:	460b      	mov	r3, r1
 8000ec6:	4614      	mov	r4, r2
 8000ec8:	461d      	mov	r5, r3
 8000eca:	68bb      	ldr	r3, [r7, #8]
 8000ecc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000ece:	4618      	mov	r0, r3
 8000ed0:	f7ff fc08 	bl	80006e4 <__aeabi_f2d>
 8000ed4:	4602      	mov	r2, r0
 8000ed6:	460b      	mov	r3, r1
 8000ed8:	4620      	mov	r0, r4
 8000eda:	4629      	mov	r1, r5
 8000edc:	f7ff faa4 	bl	8000428 <__adddf3>
 8000ee0:	4602      	mov	r2, r0
 8000ee2:	460b      	mov	r3, r1
 8000ee4:	68b9      	ldr	r1, [r7, #8]
 8000ee6:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50

	pt_Para_M->Out_PWM = round(pt_Para_M->Temp_PWM);
 8000eea:	68bb      	ldr	r3, [r7, #8]
 8000eec:	ed93 7b14 	vldr	d7, [r3, #80]	; 0x50
 8000ef0:	eeb0 0a47 	vmov.f32	s0, s14
 8000ef4:	eef0 0a67 	vmov.f32	s1, s15
 8000ef8:	f005 fb8c 	bl	8006614 <round>
 8000efc:	ec53 2b10 	vmov	r2, r3, d0
 8000f00:	4610      	mov	r0, r2
 8000f02:	4619      	mov	r1, r3
 8000f04:	f7ff fc46 	bl	8000794 <__aeabi_d2uiz>
 8000f08:	4603      	mov	r3, r0
 8000f0a:	b29a      	uxth	r2, r3
 8000f0c:	68bb      	ldr	r3, [r7, #8]
 8000f0e:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

	if (pt_Para_M->Out_PWM >= 999){
 8000f12:	68bb      	ldr	r3, [r7, #8]
 8000f14:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8000f18:	f240 32e6 	movw	r2, #998	; 0x3e6
 8000f1c:	4293      	cmp	r3, r2
 8000f1e:	d905      	bls.n	8000f2c <PID_control+0x1b0>
		pt_Para_M->Out_PWM = 999;
 8000f20:	68bb      	ldr	r3, [r7, #8]
 8000f22:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000f26:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
 8000f2a:	e008      	b.n	8000f3e <PID_control+0x1c2>
	}
	else if (pt_Para_M->Out_PWM <= 0){
 8000f2c:	68bb      	ldr	r3, [r7, #8]
 8000f2e:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8000f32:	2b00      	cmp	r3, #0
 8000f34:	d103      	bne.n	8000f3e <PID_control+0x1c2>
		pt_Para_M->Out_PWM = 0;
 8000f36:	68bb      	ldr	r3, [r7, #8]
 8000f38:	2200      	movs	r2, #0
 8000f3a:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
	}

	// Gán lại giá trị
	pt_Para_M->ek_1 = pt_Para_M->ek;
 8000f3e:	68bb      	ldr	r3, [r7, #8]
 8000f40:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	; 0x40
 8000f44:	68b9      	ldr	r1, [r7, #8]
 8000f46:	e9c1 2312 	strd	r2, r3, [r1, #72]	; 0x48
	pt_Para_M->Ui_1 = pt_Para_M->Ui;
 8000f4a:	68bb      	ldr	r3, [r7, #8]
 8000f4c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8000f50:	68b9      	ldr	r1, [r7, #8]
 8000f52:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
	pt_Para_M->Ud_1 = pt_Para_M->Ud_1;
 8000f56:	68bb      	ldr	r3, [r7, #8]
 8000f58:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000f5a:	68bb      	ldr	r3, [r7, #8]
 8000f5c:	63da      	str	r2, [r3, #60]	; 0x3c



	__HAL_TIM_SET_COMPARE(htim, channel, pt_Para_M->Out_PWM);
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	2b00      	cmp	r3, #0
 8000f62:	d106      	bne.n	8000f72 <PID_control+0x1f6>
 8000f64:	68bb      	ldr	r3, [r7, #8]
 8000f66:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8000f6a:	68fb      	ldr	r3, [r7, #12]
 8000f6c:	681b      	ldr	r3, [r3, #0]
 8000f6e:	635a      	str	r2, [r3, #52]	; 0x34
}
 8000f70:	e01c      	b.n	8000fac <PID_control+0x230>
	__HAL_TIM_SET_COMPARE(htim, channel, pt_Para_M->Out_PWM);
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	2b04      	cmp	r3, #4
 8000f76:	d107      	bne.n	8000f88 <PID_control+0x20c>
 8000f78:	68bb      	ldr	r3, [r7, #8]
 8000f7a:	f8b3 1058 	ldrh.w	r1, [r3, #88]	; 0x58
 8000f7e:	68fb      	ldr	r3, [r7, #12]
 8000f80:	681a      	ldr	r2, [r3, #0]
 8000f82:	460b      	mov	r3, r1
 8000f84:	6393      	str	r3, [r2, #56]	; 0x38
}
 8000f86:	e011      	b.n	8000fac <PID_control+0x230>
	__HAL_TIM_SET_COMPARE(htim, channel, pt_Para_M->Out_PWM);
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	2b08      	cmp	r3, #8
 8000f8c:	d107      	bne.n	8000f9e <PID_control+0x222>
 8000f8e:	68bb      	ldr	r3, [r7, #8]
 8000f90:	f8b3 1058 	ldrh.w	r1, [r3, #88]	; 0x58
 8000f94:	68fb      	ldr	r3, [r7, #12]
 8000f96:	681a      	ldr	r2, [r3, #0]
 8000f98:	460b      	mov	r3, r1
 8000f9a:	63d3      	str	r3, [r2, #60]	; 0x3c
}
 8000f9c:	e006      	b.n	8000fac <PID_control+0x230>
	__HAL_TIM_SET_COMPARE(htim, channel, pt_Para_M->Out_PWM);
 8000f9e:	68bb      	ldr	r3, [r7, #8]
 8000fa0:	f8b3 1058 	ldrh.w	r1, [r3, #88]	; 0x58
 8000fa4:	68fb      	ldr	r3, [r7, #12]
 8000fa6:	681a      	ldr	r2, [r3, #0]
 8000fa8:	460b      	mov	r3, r1
 8000faa:	6413      	str	r3, [r2, #64]	; 0x40
}
 8000fac:	bf00      	nop
 8000fae:	3710      	adds	r7, #16
 8000fb0:	46bd      	mov	sp, r7
 8000fb2:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8000fb6:	bf00      	nop
 8000fb8:	20000004 	.word	0x20000004
 8000fbc:	20000008 	.word	0x20000008
 8000fc0:	2000003c 	.word	0x2000003c

08000fc4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000fc4:	b580      	push	{r7, lr}
 8000fc6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000fc8:	f001 f8c4 	bl	8002154 <HAL_Init>

  /* USER CODE BEGIN Init */
  pt_Para_MR->Kb = 900;
 8000fcc:	4b29      	ldr	r3, [pc, #164]	; (8001074 <main+0xb0>)
 8000fce:	681b      	ldr	r3, [r3, #0]
 8000fd0:	4a29      	ldr	r2, [pc, #164]	; (8001078 <main+0xb4>)
 8000fd2:	615a      	str	r2, [r3, #20]
  pt_Para_MR->Kp = 0.0671641791;
 8000fd4:	4b27      	ldr	r3, [pc, #156]	; (8001074 <main+0xb0>)
 8000fd6:	681b      	ldr	r3, [r3, #0]
 8000fd8:	4a28      	ldr	r2, [pc, #160]	; (800107c <main+0xb8>)
 8000fda:	609a      	str	r2, [r3, #8]
  pt_Para_MR->Ki = 129.9951014957;
 8000fdc:	4b25      	ldr	r3, [pc, #148]	; (8001074 <main+0xb0>)
 8000fde:	681b      	ldr	r3, [r3, #0]
 8000fe0:	4a27      	ldr	r2, [pc, #156]	; (8001080 <main+0xbc>)
 8000fe2:	60da      	str	r2, [r3, #12]
  pt_Para_MR->Kd = 0;
 8000fe4:	4b23      	ldr	r3, [pc, #140]	; (8001074 <main+0xb0>)
 8000fe6:	681b      	ldr	r3, [r3, #0]
 8000fe8:	f04f 0200 	mov.w	r2, #0
 8000fec:	611a      	str	r2, [r3, #16]

  pt_Para_MR->Ui_1 = 0;
 8000fee:	4b21      	ldr	r3, [pc, #132]	; (8001074 <main+0xb0>)
 8000ff0:	6819      	ldr	r1, [r3, #0]
 8000ff2:	f04f 0200 	mov.w	r2, #0
 8000ff6:	f04f 0300 	mov.w	r3, #0
 8000ffa:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
  pt_Para_MR->Ud_1 = 0;
 8000ffe:	4b1d      	ldr	r3, [pc, #116]	; (8001074 <main+0xb0>)
 8001000:	681b      	ldr	r3, [r3, #0]
 8001002:	f04f 0200 	mov.w	r2, #0
 8001006:	63da      	str	r2, [r3, #60]	; 0x3c

  pt_Para_MR->HIGH = 999;
 8001008:	4b1a      	ldr	r3, [pc, #104]	; (8001074 <main+0xb0>)
 800100a:	681b      	ldr	r3, [r3, #0]
 800100c:	4a1d      	ldr	r2, [pc, #116]	; (8001084 <main+0xc0>)
 800100e:	601a      	str	r2, [r3, #0]
  pt_Para_MR->LOW = 0;
 8001010:	4b18      	ldr	r3, [pc, #96]	; (8001074 <main+0xb0>)
 8001012:	681b      	ldr	r3, [r3, #0]
 8001014:	f04f 0200 	mov.w	r2, #0
 8001018:	605a      	str	r2, [r3, #4]

  pt_Para_MR->SP_RPM = 20;
 800101a:	4b16      	ldr	r3, [pc, #88]	; (8001074 <main+0xb0>)
 800101c:	681b      	ldr	r3, [r3, #0]
 800101e:	4a1a      	ldr	r2, [pc, #104]	; (8001088 <main+0xc4>)
 8001020:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
/* USER CODE END SysInit */
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001024:	f000 f838 	bl	8001098 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001028:	f000 fbf0 	bl	800180c <MX_GPIO_Init>
  MX_TIM2_Init();
 800102c:	f000 f9b4 	bl	8001398 <MX_TIM2_Init>
  MX_TIM3_Init();
 8001030:	f000 fa0a 	bl	8001448 <MX_TIM3_Init>
  MX_TIM4_Init();
 8001034:	f000 fa5c 	bl	80014f0 <MX_TIM4_Init>
  MX_I2C1_Init();
 8001038:	f000 f898 	bl	800116c <MX_I2C1_Init>
  MX_I2C2_Init();
 800103c:	f000 f8c4 	bl	80011c8 <MX_I2C2_Init>
  MX_SPI1_Init();
 8001040:	f000 f8f0 	bl	8001224 <MX_SPI1_Init>
  MX_TIM1_Init();
 8001044:	f000 f924 	bl	8001290 <MX_TIM1_Init>
  MX_TIM5_Init();
 8001048:	f000 faa6 	bl	8001598 <MX_TIM5_Init>
  MX_USART1_UART_Init();
 800104c:	f000 fb8a 	bl	8001764 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8001050:	f000 fbb2 	bl	80017b8 <MX_USART2_UART_Init>
  MX_TIM8_Init();
 8001054:	f000 fafa 	bl	800164c <MX_TIM8_Init>
  MX_TIM9_Init();
 8001058:	f000 fb4a 	bl	80016f0 <MX_TIM9_Init>
  /* USER CODE BEGIN 2 */
  void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim);

  HAL_TIM_Base_Start_IT(&htim8);
 800105c:	480b      	ldr	r0, [pc, #44]	; (800108c <main+0xc8>)
 800105e:	f003 fe6d 	bl	8004d3c <HAL_TIM_Base_Start_IT>

  HAL_TIM_Encoder_Start_IT(&htim3, TIM_CHANNEL_ALL);
 8001062:	213c      	movs	r1, #60	; 0x3c
 8001064:	480a      	ldr	r0, [pc, #40]	; (8001090 <main+0xcc>)
 8001066:	f004 f897 	bl	8005198 <HAL_TIM_Encoder_Start_IT>

  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 800106a:	2100      	movs	r1, #0
 800106c:	4809      	ldr	r0, [pc, #36]	; (8001094 <main+0xd0>)
 800106e:	f003 ff25 	bl	8004ebc <HAL_TIM_PWM_Start>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001072:	e7fe      	b.n	8001072 <main+0xae>
 8001074:	2000000c 	.word	0x2000000c
 8001078:	44610000 	.word	0x44610000
 800107c:	3d898d60 	.word	0x3d898d60
 8001080:	4301febf 	.word	0x4301febf
 8001084:	4479c000 	.word	0x4479c000
 8001088:	41a00000 	.word	0x41a00000
 800108c:	20000378 	.word	0x20000378
 8001090:	200002a0 	.word	0x200002a0
 8001094:	20000258 	.word	0x20000258

08001098 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001098:	b580      	push	{r7, lr}
 800109a:	b094      	sub	sp, #80	; 0x50
 800109c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800109e:	f107 0320 	add.w	r3, r7, #32
 80010a2:	2230      	movs	r2, #48	; 0x30
 80010a4:	2100      	movs	r1, #0
 80010a6:	4618      	mov	r0, r3
 80010a8:	f005 fa88 	bl	80065bc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80010ac:	f107 030c 	add.w	r3, r7, #12
 80010b0:	2200      	movs	r2, #0
 80010b2:	601a      	str	r2, [r3, #0]
 80010b4:	605a      	str	r2, [r3, #4]
 80010b6:	609a      	str	r2, [r3, #8]
 80010b8:	60da      	str	r2, [r3, #12]
 80010ba:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80010bc:	2300      	movs	r3, #0
 80010be:	60bb      	str	r3, [r7, #8]
 80010c0:	4b28      	ldr	r3, [pc, #160]	; (8001164 <SystemClock_Config+0xcc>)
 80010c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010c4:	4a27      	ldr	r2, [pc, #156]	; (8001164 <SystemClock_Config+0xcc>)
 80010c6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80010ca:	6413      	str	r3, [r2, #64]	; 0x40
 80010cc:	4b25      	ldr	r3, [pc, #148]	; (8001164 <SystemClock_Config+0xcc>)
 80010ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010d0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80010d4:	60bb      	str	r3, [r7, #8]
 80010d6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80010d8:	2300      	movs	r3, #0
 80010da:	607b      	str	r3, [r7, #4]
 80010dc:	4b22      	ldr	r3, [pc, #136]	; (8001168 <SystemClock_Config+0xd0>)
 80010de:	681b      	ldr	r3, [r3, #0]
 80010e0:	4a21      	ldr	r2, [pc, #132]	; (8001168 <SystemClock_Config+0xd0>)
 80010e2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80010e6:	6013      	str	r3, [r2, #0]
 80010e8:	4b1f      	ldr	r3, [pc, #124]	; (8001168 <SystemClock_Config+0xd0>)
 80010ea:	681b      	ldr	r3, [r3, #0]
 80010ec:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80010f0:	607b      	str	r3, [r7, #4]
 80010f2:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80010f4:	2301      	movs	r3, #1
 80010f6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80010f8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80010fc:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80010fe:	2302      	movs	r3, #2
 8001100:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001102:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001106:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001108:	2304      	movs	r3, #4
 800110a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 144;
 800110c:	2390      	movs	r3, #144	; 0x90
 800110e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001110:	2302      	movs	r3, #2
 8001112:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001114:	2304      	movs	r3, #4
 8001116:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001118:	f107 0320 	add.w	r3, r7, #32
 800111c:	4618      	mov	r0, r3
 800111e:	f003 f89d 	bl	800425c <HAL_RCC_OscConfig>
 8001122:	4603      	mov	r3, r0
 8001124:	2b00      	cmp	r3, #0
 8001126:	d001      	beq.n	800112c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001128:	f000 fc20 	bl	800196c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800112c:	230f      	movs	r3, #15
 800112e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001130:	2302      	movs	r3, #2
 8001132:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001134:	2300      	movs	r3, #0
 8001136:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001138:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800113c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800113e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001142:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001144:	f107 030c 	add.w	r3, r7, #12
 8001148:	2104      	movs	r1, #4
 800114a:	4618      	mov	r0, r3
 800114c:	f003 fafe 	bl	800474c <HAL_RCC_ClockConfig>
 8001150:	4603      	mov	r3, r0
 8001152:	2b00      	cmp	r3, #0
 8001154:	d001      	beq.n	800115a <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8001156:	f000 fc09 	bl	800196c <Error_Handler>
  }
}
 800115a:	bf00      	nop
 800115c:	3750      	adds	r7, #80	; 0x50
 800115e:	46bd      	mov	sp, r7
 8001160:	bd80      	pop	{r7, pc}
 8001162:	bf00      	nop
 8001164:	40023800 	.word	0x40023800
 8001168:	40007000 	.word	0x40007000

0800116c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800116c:	b580      	push	{r7, lr}
 800116e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001170:	4b12      	ldr	r3, [pc, #72]	; (80011bc <MX_I2C1_Init+0x50>)
 8001172:	4a13      	ldr	r2, [pc, #76]	; (80011c0 <MX_I2C1_Init+0x54>)
 8001174:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001176:	4b11      	ldr	r3, [pc, #68]	; (80011bc <MX_I2C1_Init+0x50>)
 8001178:	4a12      	ldr	r2, [pc, #72]	; (80011c4 <MX_I2C1_Init+0x58>)
 800117a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800117c:	4b0f      	ldr	r3, [pc, #60]	; (80011bc <MX_I2C1_Init+0x50>)
 800117e:	2200      	movs	r2, #0
 8001180:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001182:	4b0e      	ldr	r3, [pc, #56]	; (80011bc <MX_I2C1_Init+0x50>)
 8001184:	2200      	movs	r2, #0
 8001186:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001188:	4b0c      	ldr	r3, [pc, #48]	; (80011bc <MX_I2C1_Init+0x50>)
 800118a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800118e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001190:	4b0a      	ldr	r3, [pc, #40]	; (80011bc <MX_I2C1_Init+0x50>)
 8001192:	2200      	movs	r2, #0
 8001194:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001196:	4b09      	ldr	r3, [pc, #36]	; (80011bc <MX_I2C1_Init+0x50>)
 8001198:	2200      	movs	r2, #0
 800119a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800119c:	4b07      	ldr	r3, [pc, #28]	; (80011bc <MX_I2C1_Init+0x50>)
 800119e:	2200      	movs	r2, #0
 80011a0:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80011a2:	4b06      	ldr	r3, [pc, #24]	; (80011bc <MX_I2C1_Init+0x50>)
 80011a4:	2200      	movs	r2, #0
 80011a6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80011a8:	4804      	ldr	r0, [pc, #16]	; (80011bc <MX_I2C1_Init+0x50>)
 80011aa:	f001 fb3d 	bl	8002828 <HAL_I2C_Init>
 80011ae:	4603      	mov	r3, r0
 80011b0:	2b00      	cmp	r3, #0
 80011b2:	d001      	beq.n	80011b8 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80011b4:	f000 fbda 	bl	800196c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80011b8:	bf00      	nop
 80011ba:	bd80      	pop	{r7, pc}
 80011bc:	20000110 	.word	0x20000110
 80011c0:	40005400 	.word	0x40005400
 80011c4:	000186a0 	.word	0x000186a0

080011c8 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 80011c8:	b580      	push	{r7, lr}
 80011ca:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80011cc:	4b12      	ldr	r3, [pc, #72]	; (8001218 <MX_I2C2_Init+0x50>)
 80011ce:	4a13      	ldr	r2, [pc, #76]	; (800121c <MX_I2C2_Init+0x54>)
 80011d0:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 80011d2:	4b11      	ldr	r3, [pc, #68]	; (8001218 <MX_I2C2_Init+0x50>)
 80011d4:	4a12      	ldr	r2, [pc, #72]	; (8001220 <MX_I2C2_Init+0x58>)
 80011d6:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80011d8:	4b0f      	ldr	r3, [pc, #60]	; (8001218 <MX_I2C2_Init+0x50>)
 80011da:	2200      	movs	r2, #0
 80011dc:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 80011de:	4b0e      	ldr	r3, [pc, #56]	; (8001218 <MX_I2C2_Init+0x50>)
 80011e0:	2200      	movs	r2, #0
 80011e2:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80011e4:	4b0c      	ldr	r3, [pc, #48]	; (8001218 <MX_I2C2_Init+0x50>)
 80011e6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80011ea:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80011ec:	4b0a      	ldr	r3, [pc, #40]	; (8001218 <MX_I2C2_Init+0x50>)
 80011ee:	2200      	movs	r2, #0
 80011f0:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 80011f2:	4b09      	ldr	r3, [pc, #36]	; (8001218 <MX_I2C2_Init+0x50>)
 80011f4:	2200      	movs	r2, #0
 80011f6:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80011f8:	4b07      	ldr	r3, [pc, #28]	; (8001218 <MX_I2C2_Init+0x50>)
 80011fa:	2200      	movs	r2, #0
 80011fc:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80011fe:	4b06      	ldr	r3, [pc, #24]	; (8001218 <MX_I2C2_Init+0x50>)
 8001200:	2200      	movs	r2, #0
 8001202:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8001204:	4804      	ldr	r0, [pc, #16]	; (8001218 <MX_I2C2_Init+0x50>)
 8001206:	f001 fb0f 	bl	8002828 <HAL_I2C_Init>
 800120a:	4603      	mov	r3, r0
 800120c:	2b00      	cmp	r3, #0
 800120e:	d001      	beq.n	8001214 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8001210:	f000 fbac 	bl	800196c <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8001214:	bf00      	nop
 8001216:	bd80      	pop	{r7, pc}
 8001218:	20000164 	.word	0x20000164
 800121c:	40005800 	.word	0x40005800
 8001220:	000186a0 	.word	0x000186a0

08001224 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001224:	b580      	push	{r7, lr}
 8001226:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001228:	4b17      	ldr	r3, [pc, #92]	; (8001288 <MX_SPI1_Init+0x64>)
 800122a:	4a18      	ldr	r2, [pc, #96]	; (800128c <MX_SPI1_Init+0x68>)
 800122c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800122e:	4b16      	ldr	r3, [pc, #88]	; (8001288 <MX_SPI1_Init+0x64>)
 8001230:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001234:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001236:	4b14      	ldr	r3, [pc, #80]	; (8001288 <MX_SPI1_Init+0x64>)
 8001238:	2200      	movs	r2, #0
 800123a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800123c:	4b12      	ldr	r3, [pc, #72]	; (8001288 <MX_SPI1_Init+0x64>)
 800123e:	2200      	movs	r2, #0
 8001240:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001242:	4b11      	ldr	r3, [pc, #68]	; (8001288 <MX_SPI1_Init+0x64>)
 8001244:	2200      	movs	r2, #0
 8001246:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001248:	4b0f      	ldr	r3, [pc, #60]	; (8001288 <MX_SPI1_Init+0x64>)
 800124a:	2200      	movs	r2, #0
 800124c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800124e:	4b0e      	ldr	r3, [pc, #56]	; (8001288 <MX_SPI1_Init+0x64>)
 8001250:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001254:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001256:	4b0c      	ldr	r3, [pc, #48]	; (8001288 <MX_SPI1_Init+0x64>)
 8001258:	2200      	movs	r2, #0
 800125a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800125c:	4b0a      	ldr	r3, [pc, #40]	; (8001288 <MX_SPI1_Init+0x64>)
 800125e:	2200      	movs	r2, #0
 8001260:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001262:	4b09      	ldr	r3, [pc, #36]	; (8001288 <MX_SPI1_Init+0x64>)
 8001264:	2200      	movs	r2, #0
 8001266:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001268:	4b07      	ldr	r3, [pc, #28]	; (8001288 <MX_SPI1_Init+0x64>)
 800126a:	2200      	movs	r2, #0
 800126c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 800126e:	4b06      	ldr	r3, [pc, #24]	; (8001288 <MX_SPI1_Init+0x64>)
 8001270:	220a      	movs	r2, #10
 8001272:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001274:	4804      	ldr	r0, [pc, #16]	; (8001288 <MX_SPI1_Init+0x64>)
 8001276:	f003 fc89 	bl	8004b8c <HAL_SPI_Init>
 800127a:	4603      	mov	r3, r0
 800127c:	2b00      	cmp	r3, #0
 800127e:	d001      	beq.n	8001284 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001280:	f000 fb74 	bl	800196c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001284:	bf00      	nop
 8001286:	bd80      	pop	{r7, pc}
 8001288:	200001b8 	.word	0x200001b8
 800128c:	40013000 	.word	0x40013000

08001290 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001290:	b580      	push	{r7, lr}
 8001292:	b092      	sub	sp, #72	; 0x48
 8001294:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001296:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800129a:	2200      	movs	r2, #0
 800129c:	601a      	str	r2, [r3, #0]
 800129e:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80012a0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80012a4:	2200      	movs	r2, #0
 80012a6:	601a      	str	r2, [r3, #0]
 80012a8:	605a      	str	r2, [r3, #4]
 80012aa:	609a      	str	r2, [r3, #8]
 80012ac:	60da      	str	r2, [r3, #12]
 80012ae:	611a      	str	r2, [r3, #16]
 80012b0:	615a      	str	r2, [r3, #20]
 80012b2:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80012b4:	1d3b      	adds	r3, r7, #4
 80012b6:	2220      	movs	r2, #32
 80012b8:	2100      	movs	r1, #0
 80012ba:	4618      	mov	r0, r3
 80012bc:	f005 f97e 	bl	80065bc <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80012c0:	4b33      	ldr	r3, [pc, #204]	; (8001390 <MX_TIM1_Init+0x100>)
 80012c2:	4a34      	ldr	r2, [pc, #208]	; (8001394 <MX_TIM1_Init+0x104>)
 80012c4:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 6;
 80012c6:	4b32      	ldr	r3, [pc, #200]	; (8001390 <MX_TIM1_Init+0x100>)
 80012c8:	2206      	movs	r2, #6
 80012ca:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80012cc:	4b30      	ldr	r3, [pc, #192]	; (8001390 <MX_TIM1_Init+0x100>)
 80012ce:	2200      	movs	r2, #0
 80012d0:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 999;
 80012d2:	4b2f      	ldr	r3, [pc, #188]	; (8001390 <MX_TIM1_Init+0x100>)
 80012d4:	f240 32e7 	movw	r2, #999	; 0x3e7
 80012d8:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80012da:	4b2d      	ldr	r3, [pc, #180]	; (8001390 <MX_TIM1_Init+0x100>)
 80012dc:	2200      	movs	r2, #0
 80012de:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80012e0:	4b2b      	ldr	r3, [pc, #172]	; (8001390 <MX_TIM1_Init+0x100>)
 80012e2:	2200      	movs	r2, #0
 80012e4:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80012e6:	4b2a      	ldr	r3, [pc, #168]	; (8001390 <MX_TIM1_Init+0x100>)
 80012e8:	2200      	movs	r2, #0
 80012ea:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80012ec:	4828      	ldr	r0, [pc, #160]	; (8001390 <MX_TIM1_Init+0x100>)
 80012ee:	f003 fd95 	bl	8004e1c <HAL_TIM_PWM_Init>
 80012f2:	4603      	mov	r3, r0
 80012f4:	2b00      	cmp	r3, #0
 80012f6:	d001      	beq.n	80012fc <MX_TIM1_Init+0x6c>
  {
    Error_Handler();
 80012f8:	f000 fb38 	bl	800196c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80012fc:	2300      	movs	r3, #0
 80012fe:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001300:	2300      	movs	r3, #0
 8001302:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001304:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001308:	4619      	mov	r1, r3
 800130a:	4821      	ldr	r0, [pc, #132]	; (8001390 <MX_TIM1_Init+0x100>)
 800130c:	f004 fdb0 	bl	8005e70 <HAL_TIMEx_MasterConfigSynchronization>
 8001310:	4603      	mov	r3, r0
 8001312:	2b00      	cmp	r3, #0
 8001314:	d001      	beq.n	800131a <MX_TIM1_Init+0x8a>
  {
    Error_Handler();
 8001316:	f000 fb29 	bl	800196c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800131a:	2360      	movs	r3, #96	; 0x60
 800131c:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 800131e:	2300      	movs	r3, #0
 8001320:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001322:	2300      	movs	r3, #0
 8001324:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001326:	2300      	movs	r3, #0
 8001328:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800132a:	2300      	movs	r3, #0
 800132c:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800132e:	2300      	movs	r3, #0
 8001330:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001332:	2300      	movs	r3, #0
 8001334:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001336:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800133a:	2200      	movs	r2, #0
 800133c:	4619      	mov	r1, r3
 800133e:	4814      	ldr	r0, [pc, #80]	; (8001390 <MX_TIM1_Init+0x100>)
 8001340:	f004 f8c8 	bl	80054d4 <HAL_TIM_PWM_ConfigChannel>
 8001344:	4603      	mov	r3, r0
 8001346:	2b00      	cmp	r3, #0
 8001348:	d001      	beq.n	800134e <MX_TIM1_Init+0xbe>
  {
    Error_Handler();
 800134a:	f000 fb0f 	bl	800196c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800134e:	2300      	movs	r3, #0
 8001350:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001352:	2300      	movs	r3, #0
 8001354:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001356:	2300      	movs	r3, #0
 8001358:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800135a:	2300      	movs	r3, #0
 800135c:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800135e:	2300      	movs	r3, #0
 8001360:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001362:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001366:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001368:	2300      	movs	r3, #0
 800136a:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800136c:	1d3b      	adds	r3, r7, #4
 800136e:	4619      	mov	r1, r3
 8001370:	4807      	ldr	r0, [pc, #28]	; (8001390 <MX_TIM1_Init+0x100>)
 8001372:	f004 fdf9 	bl	8005f68 <HAL_TIMEx_ConfigBreakDeadTime>
 8001376:	4603      	mov	r3, r0
 8001378:	2b00      	cmp	r3, #0
 800137a:	d001      	beq.n	8001380 <MX_TIM1_Init+0xf0>
  {
    Error_Handler();
 800137c:	f000 faf6 	bl	800196c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001380:	4803      	ldr	r0, [pc, #12]	; (8001390 <MX_TIM1_Init+0x100>)
 8001382:	f000 fd2b 	bl	8001ddc <HAL_TIM_MspPostInit>

}
 8001386:	bf00      	nop
 8001388:	3748      	adds	r7, #72	; 0x48
 800138a:	46bd      	mov	sp, r7
 800138c:	bd80      	pop	{r7, pc}
 800138e:	bf00      	nop
 8001390:	20000210 	.word	0x20000210
 8001394:	40010000 	.word	0x40010000

08001398 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001398:	b580      	push	{r7, lr}
 800139a:	b08a      	sub	sp, #40	; 0x28
 800139c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800139e:	f107 0320 	add.w	r3, r7, #32
 80013a2:	2200      	movs	r2, #0
 80013a4:	601a      	str	r2, [r3, #0]
 80013a6:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80013a8:	1d3b      	adds	r3, r7, #4
 80013aa:	2200      	movs	r2, #0
 80013ac:	601a      	str	r2, [r3, #0]
 80013ae:	605a      	str	r2, [r3, #4]
 80013b0:	609a      	str	r2, [r3, #8]
 80013b2:	60da      	str	r2, [r3, #12]
 80013b4:	611a      	str	r2, [r3, #16]
 80013b6:	615a      	str	r2, [r3, #20]
 80013b8:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80013ba:	4b22      	ldr	r3, [pc, #136]	; (8001444 <MX_TIM2_Init+0xac>)
 80013bc:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80013c0:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 6;
 80013c2:	4b20      	ldr	r3, [pc, #128]	; (8001444 <MX_TIM2_Init+0xac>)
 80013c4:	2206      	movs	r2, #6
 80013c6:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80013c8:	4b1e      	ldr	r3, [pc, #120]	; (8001444 <MX_TIM2_Init+0xac>)
 80013ca:	2200      	movs	r2, #0
 80013cc:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 999;
 80013ce:	4b1d      	ldr	r3, [pc, #116]	; (8001444 <MX_TIM2_Init+0xac>)
 80013d0:	f240 32e7 	movw	r2, #999	; 0x3e7
 80013d4:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80013d6:	4b1b      	ldr	r3, [pc, #108]	; (8001444 <MX_TIM2_Init+0xac>)
 80013d8:	2200      	movs	r2, #0
 80013da:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80013dc:	4b19      	ldr	r3, [pc, #100]	; (8001444 <MX_TIM2_Init+0xac>)
 80013de:	2200      	movs	r2, #0
 80013e0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80013e2:	4818      	ldr	r0, [pc, #96]	; (8001444 <MX_TIM2_Init+0xac>)
 80013e4:	f003 fd1a 	bl	8004e1c <HAL_TIM_PWM_Init>
 80013e8:	4603      	mov	r3, r0
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	d001      	beq.n	80013f2 <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 80013ee:	f000 fabd 	bl	800196c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80013f2:	2300      	movs	r3, #0
 80013f4:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80013f6:	2300      	movs	r3, #0
 80013f8:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80013fa:	f107 0320 	add.w	r3, r7, #32
 80013fe:	4619      	mov	r1, r3
 8001400:	4810      	ldr	r0, [pc, #64]	; (8001444 <MX_TIM2_Init+0xac>)
 8001402:	f004 fd35 	bl	8005e70 <HAL_TIMEx_MasterConfigSynchronization>
 8001406:	4603      	mov	r3, r0
 8001408:	2b00      	cmp	r3, #0
 800140a:	d001      	beq.n	8001410 <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 800140c:	f000 faae 	bl	800196c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001410:	2360      	movs	r3, #96	; 0x60
 8001412:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001414:	2300      	movs	r3, #0
 8001416:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001418:	2300      	movs	r3, #0
 800141a:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800141c:	2300      	movs	r3, #0
 800141e:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001420:	1d3b      	adds	r3, r7, #4
 8001422:	2200      	movs	r2, #0
 8001424:	4619      	mov	r1, r3
 8001426:	4807      	ldr	r0, [pc, #28]	; (8001444 <MX_TIM2_Init+0xac>)
 8001428:	f004 f854 	bl	80054d4 <HAL_TIM_PWM_ConfigChannel>
 800142c:	4603      	mov	r3, r0
 800142e:	2b00      	cmp	r3, #0
 8001430:	d001      	beq.n	8001436 <MX_TIM2_Init+0x9e>
  {
    Error_Handler();
 8001432:	f000 fa9b 	bl	800196c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001436:	4803      	ldr	r0, [pc, #12]	; (8001444 <MX_TIM2_Init+0xac>)
 8001438:	f000 fcd0 	bl	8001ddc <HAL_TIM_MspPostInit>

}
 800143c:	bf00      	nop
 800143e:	3728      	adds	r7, #40	; 0x28
 8001440:	46bd      	mov	sp, r7
 8001442:	bd80      	pop	{r7, pc}
 8001444:	20000258 	.word	0x20000258

08001448 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001448:	b580      	push	{r7, lr}
 800144a:	b08c      	sub	sp, #48	; 0x30
 800144c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800144e:	f107 030c 	add.w	r3, r7, #12
 8001452:	2224      	movs	r2, #36	; 0x24
 8001454:	2100      	movs	r1, #0
 8001456:	4618      	mov	r0, r3
 8001458:	f005 f8b0 	bl	80065bc <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800145c:	1d3b      	adds	r3, r7, #4
 800145e:	2200      	movs	r2, #0
 8001460:	601a      	str	r2, [r3, #0]
 8001462:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001464:	4b20      	ldr	r3, [pc, #128]	; (80014e8 <MX_TIM3_Init+0xa0>)
 8001466:	4a21      	ldr	r2, [pc, #132]	; (80014ec <MX_TIM3_Init+0xa4>)
 8001468:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 800146a:	4b1f      	ldr	r3, [pc, #124]	; (80014e8 <MX_TIM3_Init+0xa0>)
 800146c:	2200      	movs	r2, #0
 800146e:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001470:	4b1d      	ldr	r3, [pc, #116]	; (80014e8 <MX_TIM3_Init+0xa0>)
 8001472:	2200      	movs	r2, #0
 8001474:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8001476:	4b1c      	ldr	r3, [pc, #112]	; (80014e8 <MX_TIM3_Init+0xa0>)
 8001478:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800147c:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800147e:	4b1a      	ldr	r3, [pc, #104]	; (80014e8 <MX_TIM3_Init+0xa0>)
 8001480:	2200      	movs	r2, #0
 8001482:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001484:	4b18      	ldr	r3, [pc, #96]	; (80014e8 <MX_TIM3_Init+0xa0>)
 8001486:	2200      	movs	r2, #0
 8001488:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 800148a:	2303      	movs	r3, #3
 800148c:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800148e:	2300      	movs	r3, #0
 8001490:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001492:	2301      	movs	r3, #1
 8001494:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001496:	2300      	movs	r3, #0
 8001498:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 800149a:	2300      	movs	r3, #0
 800149c:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800149e:	2300      	movs	r3, #0
 80014a0:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80014a2:	2301      	movs	r3, #1
 80014a4:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80014a6:	2300      	movs	r3, #0
 80014a8:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 80014aa:	2300      	movs	r3, #0
 80014ac:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 80014ae:	f107 030c 	add.w	r3, r7, #12
 80014b2:	4619      	mov	r1, r3
 80014b4:	480c      	ldr	r0, [pc, #48]	; (80014e8 <MX_TIM3_Init+0xa0>)
 80014b6:	f003 fdc9 	bl	800504c <HAL_TIM_Encoder_Init>
 80014ba:	4603      	mov	r3, r0
 80014bc:	2b00      	cmp	r3, #0
 80014be:	d001      	beq.n	80014c4 <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 80014c0:	f000 fa54 	bl	800196c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80014c4:	2300      	movs	r3, #0
 80014c6:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80014c8:	2300      	movs	r3, #0
 80014ca:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80014cc:	1d3b      	adds	r3, r7, #4
 80014ce:	4619      	mov	r1, r3
 80014d0:	4805      	ldr	r0, [pc, #20]	; (80014e8 <MX_TIM3_Init+0xa0>)
 80014d2:	f004 fccd 	bl	8005e70 <HAL_TIMEx_MasterConfigSynchronization>
 80014d6:	4603      	mov	r3, r0
 80014d8:	2b00      	cmp	r3, #0
 80014da:	d001      	beq.n	80014e0 <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 80014dc:	f000 fa46 	bl	800196c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80014e0:	bf00      	nop
 80014e2:	3730      	adds	r7, #48	; 0x30
 80014e4:	46bd      	mov	sp, r7
 80014e6:	bd80      	pop	{r7, pc}
 80014e8:	200002a0 	.word	0x200002a0
 80014ec:	40000400 	.word	0x40000400

080014f0 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80014f0:	b580      	push	{r7, lr}
 80014f2:	b08c      	sub	sp, #48	; 0x30
 80014f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80014f6:	f107 030c 	add.w	r3, r7, #12
 80014fa:	2224      	movs	r2, #36	; 0x24
 80014fc:	2100      	movs	r1, #0
 80014fe:	4618      	mov	r0, r3
 8001500:	f005 f85c 	bl	80065bc <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001504:	1d3b      	adds	r3, r7, #4
 8001506:	2200      	movs	r2, #0
 8001508:	601a      	str	r2, [r3, #0]
 800150a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 800150c:	4b20      	ldr	r3, [pc, #128]	; (8001590 <MX_TIM4_Init+0xa0>)
 800150e:	4a21      	ldr	r2, [pc, #132]	; (8001594 <MX_TIM4_Init+0xa4>)
 8001510:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8001512:	4b1f      	ldr	r3, [pc, #124]	; (8001590 <MX_TIM4_Init+0xa0>)
 8001514:	2200      	movs	r2, #0
 8001516:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001518:	4b1d      	ldr	r3, [pc, #116]	; (8001590 <MX_TIM4_Init+0xa0>)
 800151a:	2200      	movs	r2, #0
 800151c:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 800151e:	4b1c      	ldr	r3, [pc, #112]	; (8001590 <MX_TIM4_Init+0xa0>)
 8001520:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001524:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001526:	4b1a      	ldr	r3, [pc, #104]	; (8001590 <MX_TIM4_Init+0xa0>)
 8001528:	2200      	movs	r2, #0
 800152a:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800152c:	4b18      	ldr	r3, [pc, #96]	; (8001590 <MX_TIM4_Init+0xa0>)
 800152e:	2200      	movs	r2, #0
 8001530:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001532:	2303      	movs	r3, #3
 8001534:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001536:	2300      	movs	r3, #0
 8001538:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800153a:	2301      	movs	r3, #1
 800153c:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800153e:	2300      	movs	r3, #0
 8001540:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001542:	2300      	movs	r3, #0
 8001544:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001546:	2300      	movs	r3, #0
 8001548:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800154a:	2301      	movs	r3, #1
 800154c:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800154e:	2300      	movs	r3, #0
 8001550:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8001552:	2300      	movs	r3, #0
 8001554:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 8001556:	f107 030c 	add.w	r3, r7, #12
 800155a:	4619      	mov	r1, r3
 800155c:	480c      	ldr	r0, [pc, #48]	; (8001590 <MX_TIM4_Init+0xa0>)
 800155e:	f003 fd75 	bl	800504c <HAL_TIM_Encoder_Init>
 8001562:	4603      	mov	r3, r0
 8001564:	2b00      	cmp	r3, #0
 8001566:	d001      	beq.n	800156c <MX_TIM4_Init+0x7c>
  {
    Error_Handler();
 8001568:	f000 fa00 	bl	800196c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800156c:	2300      	movs	r3, #0
 800156e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001570:	2300      	movs	r3, #0
 8001572:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001574:	1d3b      	adds	r3, r7, #4
 8001576:	4619      	mov	r1, r3
 8001578:	4805      	ldr	r0, [pc, #20]	; (8001590 <MX_TIM4_Init+0xa0>)
 800157a:	f004 fc79 	bl	8005e70 <HAL_TIMEx_MasterConfigSynchronization>
 800157e:	4603      	mov	r3, r0
 8001580:	2b00      	cmp	r3, #0
 8001582:	d001      	beq.n	8001588 <MX_TIM4_Init+0x98>
  {
    Error_Handler();
 8001584:	f000 f9f2 	bl	800196c <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8001588:	bf00      	nop
 800158a:	3730      	adds	r7, #48	; 0x30
 800158c:	46bd      	mov	sp, r7
 800158e:	bd80      	pop	{r7, pc}
 8001590:	200002e8 	.word	0x200002e8
 8001594:	40000800 	.word	0x40000800

08001598 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8001598:	b580      	push	{r7, lr}
 800159a:	b08a      	sub	sp, #40	; 0x28
 800159c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800159e:	f107 0320 	add.w	r3, r7, #32
 80015a2:	2200      	movs	r2, #0
 80015a4:	601a      	str	r2, [r3, #0]
 80015a6:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80015a8:	1d3b      	adds	r3, r7, #4
 80015aa:	2200      	movs	r2, #0
 80015ac:	601a      	str	r2, [r3, #0]
 80015ae:	605a      	str	r2, [r3, #4]
 80015b0:	609a      	str	r2, [r3, #8]
 80015b2:	60da      	str	r2, [r3, #12]
 80015b4:	611a      	str	r2, [r3, #16]
 80015b6:	615a      	str	r2, [r3, #20]
 80015b8:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 80015ba:	4b22      	ldr	r3, [pc, #136]	; (8001644 <MX_TIM5_Init+0xac>)
 80015bc:	4a22      	ldr	r2, [pc, #136]	; (8001648 <MX_TIM5_Init+0xb0>)
 80015be:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 80015c0:	4b20      	ldr	r3, [pc, #128]	; (8001644 <MX_TIM5_Init+0xac>)
 80015c2:	2200      	movs	r2, #0
 80015c4:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 80015c6:	4b1f      	ldr	r3, [pc, #124]	; (8001644 <MX_TIM5_Init+0xac>)
 80015c8:	2200      	movs	r2, #0
 80015ca:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 80015cc:	4b1d      	ldr	r3, [pc, #116]	; (8001644 <MX_TIM5_Init+0xac>)
 80015ce:	f04f 32ff 	mov.w	r2, #4294967295
 80015d2:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80015d4:	4b1b      	ldr	r3, [pc, #108]	; (8001644 <MX_TIM5_Init+0xac>)
 80015d6:	2200      	movs	r2, #0
 80015d8:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80015da:	4b1a      	ldr	r3, [pc, #104]	; (8001644 <MX_TIM5_Init+0xac>)
 80015dc:	2200      	movs	r2, #0
 80015de:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 80015e0:	4818      	ldr	r0, [pc, #96]	; (8001644 <MX_TIM5_Init+0xac>)
 80015e2:	f003 fc1b 	bl	8004e1c <HAL_TIM_PWM_Init>
 80015e6:	4603      	mov	r3, r0
 80015e8:	2b00      	cmp	r3, #0
 80015ea:	d001      	beq.n	80015f0 <MX_TIM5_Init+0x58>
  {
    Error_Handler();
 80015ec:	f000 f9be 	bl	800196c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80015f0:	2300      	movs	r3, #0
 80015f2:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80015f4:	2300      	movs	r3, #0
 80015f6:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 80015f8:	f107 0320 	add.w	r3, r7, #32
 80015fc:	4619      	mov	r1, r3
 80015fe:	4811      	ldr	r0, [pc, #68]	; (8001644 <MX_TIM5_Init+0xac>)
 8001600:	f004 fc36 	bl	8005e70 <HAL_TIMEx_MasterConfigSynchronization>
 8001604:	4603      	mov	r3, r0
 8001606:	2b00      	cmp	r3, #0
 8001608:	d001      	beq.n	800160e <MX_TIM5_Init+0x76>
  {
    Error_Handler();
 800160a:	f000 f9af 	bl	800196c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800160e:	2360      	movs	r3, #96	; 0x60
 8001610:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001612:	2300      	movs	r3, #0
 8001614:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001616:	2300      	movs	r3, #0
 8001618:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800161a:	2300      	movs	r3, #0
 800161c:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800161e:	1d3b      	adds	r3, r7, #4
 8001620:	2200      	movs	r2, #0
 8001622:	4619      	mov	r1, r3
 8001624:	4807      	ldr	r0, [pc, #28]	; (8001644 <MX_TIM5_Init+0xac>)
 8001626:	f003 ff55 	bl	80054d4 <HAL_TIM_PWM_ConfigChannel>
 800162a:	4603      	mov	r3, r0
 800162c:	2b00      	cmp	r3, #0
 800162e:	d001      	beq.n	8001634 <MX_TIM5_Init+0x9c>
  {
    Error_Handler();
 8001630:	f000 f99c 	bl	800196c <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 8001634:	4803      	ldr	r0, [pc, #12]	; (8001644 <MX_TIM5_Init+0xac>)
 8001636:	f000 fbd1 	bl	8001ddc <HAL_TIM_MspPostInit>

}
 800163a:	bf00      	nop
 800163c:	3728      	adds	r7, #40	; 0x28
 800163e:	46bd      	mov	sp, r7
 8001640:	bd80      	pop	{r7, pc}
 8001642:	bf00      	nop
 8001644:	20000330 	.word	0x20000330
 8001648:	40000c00 	.word	0x40000c00

0800164c <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 800164c:	b580      	push	{r7, lr}
 800164e:	b086      	sub	sp, #24
 8001650:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001652:	f107 0308 	add.w	r3, r7, #8
 8001656:	2200      	movs	r2, #0
 8001658:	601a      	str	r2, [r3, #0]
 800165a:	605a      	str	r2, [r3, #4]
 800165c:	609a      	str	r2, [r3, #8]
 800165e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001660:	463b      	mov	r3, r7
 8001662:	2200      	movs	r2, #0
 8001664:	601a      	str	r2, [r3, #0]
 8001666:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8001668:	4b1f      	ldr	r3, [pc, #124]	; (80016e8 <MX_TIM8_Init+0x9c>)
 800166a:	4a20      	ldr	r2, [pc, #128]	; (80016ec <MX_TIM8_Init+0xa0>)
 800166c:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 1439;
 800166e:	4b1e      	ldr	r3, [pc, #120]	; (80016e8 <MX_TIM8_Init+0x9c>)
 8001670:	f240 529f 	movw	r2, #1439	; 0x59f
 8001674:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001676:	4b1c      	ldr	r3, [pc, #112]	; (80016e8 <MX_TIM8_Init+0x9c>)
 8001678:	2200      	movs	r2, #0
 800167a:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 499;
 800167c:	4b1a      	ldr	r3, [pc, #104]	; (80016e8 <MX_TIM8_Init+0x9c>)
 800167e:	f240 12f3 	movw	r2, #499	; 0x1f3
 8001682:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001684:	4b18      	ldr	r3, [pc, #96]	; (80016e8 <MX_TIM8_Init+0x9c>)
 8001686:	2200      	movs	r2, #0
 8001688:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 800168a:	4b17      	ldr	r3, [pc, #92]	; (80016e8 <MX_TIM8_Init+0x9c>)
 800168c:	2200      	movs	r2, #0
 800168e:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001690:	4b15      	ldr	r3, [pc, #84]	; (80016e8 <MX_TIM8_Init+0x9c>)
 8001692:	2200      	movs	r2, #0
 8001694:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 8001696:	4814      	ldr	r0, [pc, #80]	; (80016e8 <MX_TIM8_Init+0x9c>)
 8001698:	f003 fb01 	bl	8004c9e <HAL_TIM_Base_Init>
 800169c:	4603      	mov	r3, r0
 800169e:	2b00      	cmp	r3, #0
 80016a0:	d001      	beq.n	80016a6 <MX_TIM8_Init+0x5a>
  {
    Error_Handler();
 80016a2:	f000 f963 	bl	800196c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80016a6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80016aa:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 80016ac:	f107 0308 	add.w	r3, r7, #8
 80016b0:	4619      	mov	r1, r3
 80016b2:	480d      	ldr	r0, [pc, #52]	; (80016e8 <MX_TIM8_Init+0x9c>)
 80016b4:	f003 ffd0 	bl	8005658 <HAL_TIM_ConfigClockSource>
 80016b8:	4603      	mov	r3, r0
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	d001      	beq.n	80016c2 <MX_TIM8_Init+0x76>
  {
    Error_Handler();
 80016be:	f000 f955 	bl	800196c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80016c2:	2300      	movs	r3, #0
 80016c4:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80016c6:	2300      	movs	r3, #0
 80016c8:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 80016ca:	463b      	mov	r3, r7
 80016cc:	4619      	mov	r1, r3
 80016ce:	4806      	ldr	r0, [pc, #24]	; (80016e8 <MX_TIM8_Init+0x9c>)
 80016d0:	f004 fbce 	bl	8005e70 <HAL_TIMEx_MasterConfigSynchronization>
 80016d4:	4603      	mov	r3, r0
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	d001      	beq.n	80016de <MX_TIM8_Init+0x92>
  {
    Error_Handler();
 80016da:	f000 f947 	bl	800196c <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 80016de:	bf00      	nop
 80016e0:	3718      	adds	r7, #24
 80016e2:	46bd      	mov	sp, r7
 80016e4:	bd80      	pop	{r7, pc}
 80016e6:	bf00      	nop
 80016e8:	20000378 	.word	0x20000378
 80016ec:	40010400 	.word	0x40010400

080016f0 <MX_TIM9_Init>:
  * @brief TIM9 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM9_Init(void)
{
 80016f0:	b580      	push	{r7, lr}
 80016f2:	b084      	sub	sp, #16
 80016f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM9_Init 0 */

  /* USER CODE END TIM9_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80016f6:	463b      	mov	r3, r7
 80016f8:	2200      	movs	r2, #0
 80016fa:	601a      	str	r2, [r3, #0]
 80016fc:	605a      	str	r2, [r3, #4]
 80016fe:	609a      	str	r2, [r3, #8]
 8001700:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM9_Init 1 */

  /* USER CODE END TIM9_Init 1 */
  htim9.Instance = TIM9;
 8001702:	4b16      	ldr	r3, [pc, #88]	; (800175c <MX_TIM9_Init+0x6c>)
 8001704:	4a16      	ldr	r2, [pc, #88]	; (8001760 <MX_TIM9_Init+0x70>)
 8001706:	601a      	str	r2, [r3, #0]
  htim9.Init.Prescaler = 0;
 8001708:	4b14      	ldr	r3, [pc, #80]	; (800175c <MX_TIM9_Init+0x6c>)
 800170a:	2200      	movs	r2, #0
 800170c:	605a      	str	r2, [r3, #4]
  htim9.Init.CounterMode = TIM_COUNTERMODE_UP;
 800170e:	4b13      	ldr	r3, [pc, #76]	; (800175c <MX_TIM9_Init+0x6c>)
 8001710:	2200      	movs	r2, #0
 8001712:	609a      	str	r2, [r3, #8]
  htim9.Init.Period = 65535;
 8001714:	4b11      	ldr	r3, [pc, #68]	; (800175c <MX_TIM9_Init+0x6c>)
 8001716:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800171a:	60da      	str	r2, [r3, #12]
  htim9.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800171c:	4b0f      	ldr	r3, [pc, #60]	; (800175c <MX_TIM9_Init+0x6c>)
 800171e:	2200      	movs	r2, #0
 8001720:	611a      	str	r2, [r3, #16]
  htim9.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001722:	4b0e      	ldr	r3, [pc, #56]	; (800175c <MX_TIM9_Init+0x6c>)
 8001724:	2200      	movs	r2, #0
 8001726:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim9) != HAL_OK)
 8001728:	480c      	ldr	r0, [pc, #48]	; (800175c <MX_TIM9_Init+0x6c>)
 800172a:	f003 fab8 	bl	8004c9e <HAL_TIM_Base_Init>
 800172e:	4603      	mov	r3, r0
 8001730:	2b00      	cmp	r3, #0
 8001732:	d001      	beq.n	8001738 <MX_TIM9_Init+0x48>
  {
    Error_Handler();
 8001734:	f000 f91a 	bl	800196c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001738:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800173c:	603b      	str	r3, [r7, #0]
  if (HAL_TIM_ConfigClockSource(&htim9, &sClockSourceConfig) != HAL_OK)
 800173e:	463b      	mov	r3, r7
 8001740:	4619      	mov	r1, r3
 8001742:	4806      	ldr	r0, [pc, #24]	; (800175c <MX_TIM9_Init+0x6c>)
 8001744:	f003 ff88 	bl	8005658 <HAL_TIM_ConfigClockSource>
 8001748:	4603      	mov	r3, r0
 800174a:	2b00      	cmp	r3, #0
 800174c:	d001      	beq.n	8001752 <MX_TIM9_Init+0x62>
  {
    Error_Handler();
 800174e:	f000 f90d 	bl	800196c <Error_Handler>
  }
  /* USER CODE BEGIN TIM9_Init 2 */

  /* USER CODE END TIM9_Init 2 */

}
 8001752:	bf00      	nop
 8001754:	3710      	adds	r7, #16
 8001756:	46bd      	mov	sp, r7
 8001758:	bd80      	pop	{r7, pc}
 800175a:	bf00      	nop
 800175c:	200003c0 	.word	0x200003c0
 8001760:	40014000 	.word	0x40014000

08001764 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001764:	b580      	push	{r7, lr}
 8001766:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001768:	4b11      	ldr	r3, [pc, #68]	; (80017b0 <MX_USART1_UART_Init+0x4c>)
 800176a:	4a12      	ldr	r2, [pc, #72]	; (80017b4 <MX_USART1_UART_Init+0x50>)
 800176c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800176e:	4b10      	ldr	r3, [pc, #64]	; (80017b0 <MX_USART1_UART_Init+0x4c>)
 8001770:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001774:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001776:	4b0e      	ldr	r3, [pc, #56]	; (80017b0 <MX_USART1_UART_Init+0x4c>)
 8001778:	2200      	movs	r2, #0
 800177a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800177c:	4b0c      	ldr	r3, [pc, #48]	; (80017b0 <MX_USART1_UART_Init+0x4c>)
 800177e:	2200      	movs	r2, #0
 8001780:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001782:	4b0b      	ldr	r3, [pc, #44]	; (80017b0 <MX_USART1_UART_Init+0x4c>)
 8001784:	2200      	movs	r2, #0
 8001786:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001788:	4b09      	ldr	r3, [pc, #36]	; (80017b0 <MX_USART1_UART_Init+0x4c>)
 800178a:	220c      	movs	r2, #12
 800178c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800178e:	4b08      	ldr	r3, [pc, #32]	; (80017b0 <MX_USART1_UART_Init+0x4c>)
 8001790:	2200      	movs	r2, #0
 8001792:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001794:	4b06      	ldr	r3, [pc, #24]	; (80017b0 <MX_USART1_UART_Init+0x4c>)
 8001796:	2200      	movs	r2, #0
 8001798:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800179a:	4805      	ldr	r0, [pc, #20]	; (80017b0 <MX_USART1_UART_Init+0x4c>)
 800179c:	f004 fc4a 	bl	8006034 <HAL_UART_Init>
 80017a0:	4603      	mov	r3, r0
 80017a2:	2b00      	cmp	r3, #0
 80017a4:	d001      	beq.n	80017aa <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80017a6:	f000 f8e1 	bl	800196c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80017aa:	bf00      	nop
 80017ac:	bd80      	pop	{r7, pc}
 80017ae:	bf00      	nop
 80017b0:	20000408 	.word	0x20000408
 80017b4:	40011000 	.word	0x40011000

080017b8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80017b8:	b580      	push	{r7, lr}
 80017ba:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80017bc:	4b11      	ldr	r3, [pc, #68]	; (8001804 <MX_USART2_UART_Init+0x4c>)
 80017be:	4a12      	ldr	r2, [pc, #72]	; (8001808 <MX_USART2_UART_Init+0x50>)
 80017c0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80017c2:	4b10      	ldr	r3, [pc, #64]	; (8001804 <MX_USART2_UART_Init+0x4c>)
 80017c4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80017c8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80017ca:	4b0e      	ldr	r3, [pc, #56]	; (8001804 <MX_USART2_UART_Init+0x4c>)
 80017cc:	2200      	movs	r2, #0
 80017ce:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80017d0:	4b0c      	ldr	r3, [pc, #48]	; (8001804 <MX_USART2_UART_Init+0x4c>)
 80017d2:	2200      	movs	r2, #0
 80017d4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80017d6:	4b0b      	ldr	r3, [pc, #44]	; (8001804 <MX_USART2_UART_Init+0x4c>)
 80017d8:	2200      	movs	r2, #0
 80017da:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80017dc:	4b09      	ldr	r3, [pc, #36]	; (8001804 <MX_USART2_UART_Init+0x4c>)
 80017de:	220c      	movs	r2, #12
 80017e0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80017e2:	4b08      	ldr	r3, [pc, #32]	; (8001804 <MX_USART2_UART_Init+0x4c>)
 80017e4:	2200      	movs	r2, #0
 80017e6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80017e8:	4b06      	ldr	r3, [pc, #24]	; (8001804 <MX_USART2_UART_Init+0x4c>)
 80017ea:	2200      	movs	r2, #0
 80017ec:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80017ee:	4805      	ldr	r0, [pc, #20]	; (8001804 <MX_USART2_UART_Init+0x4c>)
 80017f0:	f004 fc20 	bl	8006034 <HAL_UART_Init>
 80017f4:	4603      	mov	r3, r0
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	d001      	beq.n	80017fe <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80017fa:	f000 f8b7 	bl	800196c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80017fe:	bf00      	nop
 8001800:	bd80      	pop	{r7, pc}
 8001802:	bf00      	nop
 8001804:	20000450 	.word	0x20000450
 8001808:	40004400 	.word	0x40004400

0800180c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800180c:	b580      	push	{r7, lr}
 800180e:	b08a      	sub	sp, #40	; 0x28
 8001810:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001812:	f107 0314 	add.w	r3, r7, #20
 8001816:	2200      	movs	r2, #0
 8001818:	601a      	str	r2, [r3, #0]
 800181a:	605a      	str	r2, [r3, #4]
 800181c:	609a      	str	r2, [r3, #8]
 800181e:	60da      	str	r2, [r3, #12]
 8001820:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001822:	2300      	movs	r3, #0
 8001824:	613b      	str	r3, [r7, #16]
 8001826:	4b3d      	ldr	r3, [pc, #244]	; (800191c <MX_GPIO_Init+0x110>)
 8001828:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800182a:	4a3c      	ldr	r2, [pc, #240]	; (800191c <MX_GPIO_Init+0x110>)
 800182c:	f043 0310 	orr.w	r3, r3, #16
 8001830:	6313      	str	r3, [r2, #48]	; 0x30
 8001832:	4b3a      	ldr	r3, [pc, #232]	; (800191c <MX_GPIO_Init+0x110>)
 8001834:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001836:	f003 0310 	and.w	r3, r3, #16
 800183a:	613b      	str	r3, [r7, #16]
 800183c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800183e:	2300      	movs	r3, #0
 8001840:	60fb      	str	r3, [r7, #12]
 8001842:	4b36      	ldr	r3, [pc, #216]	; (800191c <MX_GPIO_Init+0x110>)
 8001844:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001846:	4a35      	ldr	r2, [pc, #212]	; (800191c <MX_GPIO_Init+0x110>)
 8001848:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800184c:	6313      	str	r3, [r2, #48]	; 0x30
 800184e:	4b33      	ldr	r3, [pc, #204]	; (800191c <MX_GPIO_Init+0x110>)
 8001850:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001852:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001856:	60fb      	str	r3, [r7, #12]
 8001858:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800185a:	2300      	movs	r3, #0
 800185c:	60bb      	str	r3, [r7, #8]
 800185e:	4b2f      	ldr	r3, [pc, #188]	; (800191c <MX_GPIO_Init+0x110>)
 8001860:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001862:	4a2e      	ldr	r2, [pc, #184]	; (800191c <MX_GPIO_Init+0x110>)
 8001864:	f043 0301 	orr.w	r3, r3, #1
 8001868:	6313      	str	r3, [r2, #48]	; 0x30
 800186a:	4b2c      	ldr	r3, [pc, #176]	; (800191c <MX_GPIO_Init+0x110>)
 800186c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800186e:	f003 0301 	and.w	r3, r3, #1
 8001872:	60bb      	str	r3, [r7, #8]
 8001874:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001876:	2300      	movs	r3, #0
 8001878:	607b      	str	r3, [r7, #4]
 800187a:	4b28      	ldr	r3, [pc, #160]	; (800191c <MX_GPIO_Init+0x110>)
 800187c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800187e:	4a27      	ldr	r2, [pc, #156]	; (800191c <MX_GPIO_Init+0x110>)
 8001880:	f043 0302 	orr.w	r3, r3, #2
 8001884:	6313      	str	r3, [r2, #48]	; 0x30
 8001886:	4b25      	ldr	r3, [pc, #148]	; (800191c <MX_GPIO_Init+0x110>)
 8001888:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800188a:	f003 0302 	and.w	r3, r3, #2
 800188e:	607b      	str	r3, [r7, #4]
 8001890:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001892:	2300      	movs	r3, #0
 8001894:	603b      	str	r3, [r7, #0]
 8001896:	4b21      	ldr	r3, [pc, #132]	; (800191c <MX_GPIO_Init+0x110>)
 8001898:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800189a:	4a20      	ldr	r2, [pc, #128]	; (800191c <MX_GPIO_Init+0x110>)
 800189c:	f043 0308 	orr.w	r3, r3, #8
 80018a0:	6313      	str	r3, [r2, #48]	; 0x30
 80018a2:	4b1e      	ldr	r3, [pc, #120]	; (800191c <MX_GPIO_Init+0x110>)
 80018a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018a6:	f003 0308 	and.w	r3, r3, #8
 80018aa:	603b      	str	r3, [r7, #0]
 80018ac:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, RUN_LIGHT_Pin|STOP_LIGHT_Pin|WARNING_LIGHT_Pin, GPIO_PIN_RESET);
 80018ae:	2200      	movs	r2, #0
 80018b0:	211c      	movs	r1, #28
 80018b2:	481b      	ldr	r0, [pc, #108]	; (8001920 <MX_GPIO_Init+0x114>)
 80018b4:	f000 ff9e 	bl	80027f4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, DIR_L_Pin|DIR_R_Pin|DIR_SERVO_Pin, GPIO_PIN_RESET);
 80018b8:	2200      	movs	r2, #0
 80018ba:	21e0      	movs	r1, #224	; 0xe0
 80018bc:	4819      	ldr	r0, [pc, #100]	; (8001924 <MX_GPIO_Init+0x118>)
 80018be:	f000 ff99 	bl	80027f4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : RUN_LIGHT_Pin STOP_LIGHT_Pin WARNING_LIGHT_Pin */
  GPIO_InitStruct.Pin = RUN_LIGHT_Pin|STOP_LIGHT_Pin|WARNING_LIGHT_Pin;
 80018c2:	231c      	movs	r3, #28
 80018c4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80018c6:	2301      	movs	r3, #1
 80018c8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018ca:	2300      	movs	r3, #0
 80018cc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018ce:	2300      	movs	r3, #0
 80018d0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80018d2:	f107 0314 	add.w	r3, r7, #20
 80018d6:	4619      	mov	r1, r3
 80018d8:	4811      	ldr	r0, [pc, #68]	; (8001920 <MX_GPIO_Init+0x114>)
 80018da:	f000 fdef 	bl	80024bc <HAL_GPIO_Init>

  /*Configure GPIO pins : USER_BUTTON_Pin STOP_Button_Pin START_Button_Pin */
  GPIO_InitStruct.Pin = USER_BUTTON_Pin|STOP_Button_Pin|START_Button_Pin;
 80018de:	2307      	movs	r3, #7
 80018e0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80018e2:	2300      	movs	r3, #0
 80018e4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018e6:	2300      	movs	r3, #0
 80018e8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80018ea:	f107 0314 	add.w	r3, r7, #20
 80018ee:	4619      	mov	r1, r3
 80018f0:	480c      	ldr	r0, [pc, #48]	; (8001924 <MX_GPIO_Init+0x118>)
 80018f2:	f000 fde3 	bl	80024bc <HAL_GPIO_Init>

  /*Configure GPIO pins : DIR_L_Pin DIR_R_Pin DIR_SERVO_Pin */
  GPIO_InitStruct.Pin = DIR_L_Pin|DIR_R_Pin|DIR_SERVO_Pin;
 80018f6:	23e0      	movs	r3, #224	; 0xe0
 80018f8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80018fa:	2301      	movs	r3, #1
 80018fc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018fe:	2300      	movs	r3, #0
 8001900:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001902:	2300      	movs	r3, #0
 8001904:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001906:	f107 0314 	add.w	r3, r7, #20
 800190a:	4619      	mov	r1, r3
 800190c:	4805      	ldr	r0, [pc, #20]	; (8001924 <MX_GPIO_Init+0x118>)
 800190e:	f000 fdd5 	bl	80024bc <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001912:	bf00      	nop
 8001914:	3728      	adds	r7, #40	; 0x28
 8001916:	46bd      	mov	sp, r7
 8001918:	bd80      	pop	{r7, pc}
 800191a:	bf00      	nop
 800191c:	40023800 	.word	0x40023800
 8001920:	40021000 	.word	0x40021000
 8001924:	40020c00 	.word	0x40020c00

08001928 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001928:	b580      	push	{r7, lr}
 800192a:	b082      	sub	sp, #8
 800192c:	af00      	add	r7, sp, #0
 800192e:	6078      	str	r0, [r7, #4]
	if (htim -> Instance == TIM8){
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	4a09      	ldr	r2, [pc, #36]	; (800195c <HAL_TIM_PeriodElapsedCallback+0x34>)
 8001936:	4293      	cmp	r3, r2
 8001938:	d10c      	bne.n	8001954 <HAL_TIM_PeriodElapsedCallback+0x2c>
		//pt_Para_MR->Encoder = __HAL_TIM_GET_COUNTER(&htim2);
		//read_encoder(&htim2, pt_Para_MR);
		RPM_Calc(&htim3, pt_Para_MR);
 800193a:	4b09      	ldr	r3, [pc, #36]	; (8001960 <HAL_TIM_PeriodElapsedCallback+0x38>)
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	4619      	mov	r1, r3
 8001940:	4808      	ldr	r0, [pc, #32]	; (8001964 <HAL_TIM_PeriodElapsedCallback+0x3c>)
 8001942:	f7ff f95f 	bl	8000c04 <RPM_Calc>
		PID_control(&htim2, pt_Para_MR, TIM_CHANNEL_1);
 8001946:	4b06      	ldr	r3, [pc, #24]	; (8001960 <HAL_TIM_PeriodElapsedCallback+0x38>)
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	2200      	movs	r2, #0
 800194c:	4619      	mov	r1, r3
 800194e:	4806      	ldr	r0, [pc, #24]	; (8001968 <HAL_TIM_PeriodElapsedCallback+0x40>)
 8001950:	f7ff fa14 	bl	8000d7c <PID_control>
	}
}
 8001954:	bf00      	nop
 8001956:	3708      	adds	r7, #8
 8001958:	46bd      	mov	sp, r7
 800195a:	bd80      	pop	{r7, pc}
 800195c:	40010400 	.word	0x40010400
 8001960:	2000000c 	.word	0x2000000c
 8001964:	200002a0 	.word	0x200002a0
 8001968:	20000258 	.word	0x20000258

0800196c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800196c:	b480      	push	{r7}
 800196e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001970:	b672      	cpsid	i
}
 8001972:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001974:	e7fe      	b.n	8001974 <Error_Handler+0x8>
	...

08001978 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                            /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001978:	b480      	push	{r7}
 800197a:	b083      	sub	sp, #12
 800197c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800197e:	2300      	movs	r3, #0
 8001980:	607b      	str	r3, [r7, #4]
 8001982:	4b10      	ldr	r3, [pc, #64]	; (80019c4 <HAL_MspInit+0x4c>)
 8001984:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001986:	4a0f      	ldr	r2, [pc, #60]	; (80019c4 <HAL_MspInit+0x4c>)
 8001988:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800198c:	6453      	str	r3, [r2, #68]	; 0x44
 800198e:	4b0d      	ldr	r3, [pc, #52]	; (80019c4 <HAL_MspInit+0x4c>)
 8001990:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001992:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001996:	607b      	str	r3, [r7, #4]
 8001998:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800199a:	2300      	movs	r3, #0
 800199c:	603b      	str	r3, [r7, #0]
 800199e:	4b09      	ldr	r3, [pc, #36]	; (80019c4 <HAL_MspInit+0x4c>)
 80019a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019a2:	4a08      	ldr	r2, [pc, #32]	; (80019c4 <HAL_MspInit+0x4c>)
 80019a4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80019a8:	6413      	str	r3, [r2, #64]	; 0x40
 80019aa:	4b06      	ldr	r3, [pc, #24]	; (80019c4 <HAL_MspInit+0x4c>)
 80019ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019b2:	603b      	str	r3, [r7, #0]
 80019b4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80019b6:	bf00      	nop
 80019b8:	370c      	adds	r7, #12
 80019ba:	46bd      	mov	sp, r7
 80019bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c0:	4770      	bx	lr
 80019c2:	bf00      	nop
 80019c4:	40023800 	.word	0x40023800

080019c8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80019c8:	b580      	push	{r7, lr}
 80019ca:	b08c      	sub	sp, #48	; 0x30
 80019cc:	af00      	add	r7, sp, #0
 80019ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019d0:	f107 031c 	add.w	r3, r7, #28
 80019d4:	2200      	movs	r2, #0
 80019d6:	601a      	str	r2, [r3, #0]
 80019d8:	605a      	str	r2, [r3, #4]
 80019da:	609a      	str	r2, [r3, #8]
 80019dc:	60da      	str	r2, [r3, #12]
 80019de:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	4a36      	ldr	r2, [pc, #216]	; (8001ac0 <HAL_I2C_MspInit+0xf8>)
 80019e6:	4293      	cmp	r3, r2
 80019e8:	d134      	bne.n	8001a54 <HAL_I2C_MspInit+0x8c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80019ea:	2300      	movs	r3, #0
 80019ec:	61bb      	str	r3, [r7, #24]
 80019ee:	4b35      	ldr	r3, [pc, #212]	; (8001ac4 <HAL_I2C_MspInit+0xfc>)
 80019f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019f2:	4a34      	ldr	r2, [pc, #208]	; (8001ac4 <HAL_I2C_MspInit+0xfc>)
 80019f4:	f043 0302 	orr.w	r3, r3, #2
 80019f8:	6313      	str	r3, [r2, #48]	; 0x30
 80019fa:	4b32      	ldr	r3, [pc, #200]	; (8001ac4 <HAL_I2C_MspInit+0xfc>)
 80019fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019fe:	f003 0302 	and.w	r3, r3, #2
 8001a02:	61bb      	str	r3, [r7, #24]
 8001a04:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = ESP32_SCL_Pin|ESP32_SDA_Pin;
 8001a06:	23c0      	movs	r3, #192	; 0xc0
 8001a08:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001a0a:	2312      	movs	r3, #18
 8001a0c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a0e:	2300      	movs	r3, #0
 8001a10:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a12:	2303      	movs	r3, #3
 8001a14:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001a16:	2304      	movs	r3, #4
 8001a18:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a1a:	f107 031c 	add.w	r3, r7, #28
 8001a1e:	4619      	mov	r1, r3
 8001a20:	4829      	ldr	r0, [pc, #164]	; (8001ac8 <HAL_I2C_MspInit+0x100>)
 8001a22:	f000 fd4b 	bl	80024bc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001a26:	2300      	movs	r3, #0
 8001a28:	617b      	str	r3, [r7, #20]
 8001a2a:	4b26      	ldr	r3, [pc, #152]	; (8001ac4 <HAL_I2C_MspInit+0xfc>)
 8001a2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a2e:	4a25      	ldr	r2, [pc, #148]	; (8001ac4 <HAL_I2C_MspInit+0xfc>)
 8001a30:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001a34:	6413      	str	r3, [r2, #64]	; 0x40
 8001a36:	4b23      	ldr	r3, [pc, #140]	; (8001ac4 <HAL_I2C_MspInit+0xfc>)
 8001a38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a3a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001a3e:	617b      	str	r3, [r7, #20]
 8001a40:	697b      	ldr	r3, [r7, #20]
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8001a42:	2200      	movs	r2, #0
 8001a44:	2100      	movs	r1, #0
 8001a46:	201f      	movs	r0, #31
 8001a48:	f000 fcd1 	bl	80023ee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8001a4c:	201f      	movs	r0, #31
 8001a4e:	f000 fcea 	bl	8002426 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8001a52:	e031      	b.n	8001ab8 <HAL_I2C_MspInit+0xf0>
  else if(hi2c->Instance==I2C2)
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	4a1c      	ldr	r2, [pc, #112]	; (8001acc <HAL_I2C_MspInit+0x104>)
 8001a5a:	4293      	cmp	r3, r2
 8001a5c:	d12c      	bne.n	8001ab8 <HAL_I2C_MspInit+0xf0>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a5e:	2300      	movs	r3, #0
 8001a60:	613b      	str	r3, [r7, #16]
 8001a62:	4b18      	ldr	r3, [pc, #96]	; (8001ac4 <HAL_I2C_MspInit+0xfc>)
 8001a64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a66:	4a17      	ldr	r2, [pc, #92]	; (8001ac4 <HAL_I2C_MspInit+0xfc>)
 8001a68:	f043 0302 	orr.w	r3, r3, #2
 8001a6c:	6313      	str	r3, [r2, #48]	; 0x30
 8001a6e:	4b15      	ldr	r3, [pc, #84]	; (8001ac4 <HAL_I2C_MspInit+0xfc>)
 8001a70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a72:	f003 0302 	and.w	r3, r3, #2
 8001a76:	613b      	str	r3, [r7, #16]
 8001a78:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = SCL_LCD_Pin|SDA_LCD_Pin;
 8001a7a:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001a7e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001a80:	2312      	movs	r3, #18
 8001a82:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a84:	2300      	movs	r3, #0
 8001a86:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a88:	2303      	movs	r3, #3
 8001a8a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001a8c:	2304      	movs	r3, #4
 8001a8e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a90:	f107 031c 	add.w	r3, r7, #28
 8001a94:	4619      	mov	r1, r3
 8001a96:	480c      	ldr	r0, [pc, #48]	; (8001ac8 <HAL_I2C_MspInit+0x100>)
 8001a98:	f000 fd10 	bl	80024bc <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001a9c:	2300      	movs	r3, #0
 8001a9e:	60fb      	str	r3, [r7, #12]
 8001aa0:	4b08      	ldr	r3, [pc, #32]	; (8001ac4 <HAL_I2C_MspInit+0xfc>)
 8001aa2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001aa4:	4a07      	ldr	r2, [pc, #28]	; (8001ac4 <HAL_I2C_MspInit+0xfc>)
 8001aa6:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001aaa:	6413      	str	r3, [r2, #64]	; 0x40
 8001aac:	4b05      	ldr	r3, [pc, #20]	; (8001ac4 <HAL_I2C_MspInit+0xfc>)
 8001aae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ab0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001ab4:	60fb      	str	r3, [r7, #12]
 8001ab6:	68fb      	ldr	r3, [r7, #12]
}
 8001ab8:	bf00      	nop
 8001aba:	3730      	adds	r7, #48	; 0x30
 8001abc:	46bd      	mov	sp, r7
 8001abe:	bd80      	pop	{r7, pc}
 8001ac0:	40005400 	.word	0x40005400
 8001ac4:	40023800 	.word	0x40023800
 8001ac8:	40020400 	.word	0x40020400
 8001acc:	40005800 	.word	0x40005800

08001ad0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001ad0:	b580      	push	{r7, lr}
 8001ad2:	b08a      	sub	sp, #40	; 0x28
 8001ad4:	af00      	add	r7, sp, #0
 8001ad6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ad8:	f107 0314 	add.w	r3, r7, #20
 8001adc:	2200      	movs	r2, #0
 8001ade:	601a      	str	r2, [r3, #0]
 8001ae0:	605a      	str	r2, [r3, #4]
 8001ae2:	609a      	str	r2, [r3, #8]
 8001ae4:	60da      	str	r2, [r3, #12]
 8001ae6:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	4a19      	ldr	r2, [pc, #100]	; (8001b54 <HAL_SPI_MspInit+0x84>)
 8001aee:	4293      	cmp	r3, r2
 8001af0:	d12b      	bne.n	8001b4a <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001af2:	2300      	movs	r3, #0
 8001af4:	613b      	str	r3, [r7, #16]
 8001af6:	4b18      	ldr	r3, [pc, #96]	; (8001b58 <HAL_SPI_MspInit+0x88>)
 8001af8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001afa:	4a17      	ldr	r2, [pc, #92]	; (8001b58 <HAL_SPI_MspInit+0x88>)
 8001afc:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001b00:	6453      	str	r3, [r2, #68]	; 0x44
 8001b02:	4b15      	ldr	r3, [pc, #84]	; (8001b58 <HAL_SPI_MspInit+0x88>)
 8001b04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b06:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001b0a:	613b      	str	r3, [r7, #16]
 8001b0c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b0e:	2300      	movs	r3, #0
 8001b10:	60fb      	str	r3, [r7, #12]
 8001b12:	4b11      	ldr	r3, [pc, #68]	; (8001b58 <HAL_SPI_MspInit+0x88>)
 8001b14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b16:	4a10      	ldr	r2, [pc, #64]	; (8001b58 <HAL_SPI_MspInit+0x88>)
 8001b18:	f043 0302 	orr.w	r3, r3, #2
 8001b1c:	6313      	str	r3, [r2, #48]	; 0x30
 8001b1e:	4b0e      	ldr	r3, [pc, #56]	; (8001b58 <HAL_SPI_MspInit+0x88>)
 8001b20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b22:	f003 0302 	and.w	r3, r3, #2
 8001b26:	60fb      	str	r3, [r7, #12]
 8001b28:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SCK_MAX7219_Pin|MISO_MAX7129_Pin|MOSI_MAX7129_Pin;
 8001b2a:	2338      	movs	r3, #56	; 0x38
 8001b2c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b2e:	2302      	movs	r3, #2
 8001b30:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b32:	2300      	movs	r3, #0
 8001b34:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b36:	2303      	movs	r3, #3
 8001b38:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001b3a:	2305      	movs	r3, #5
 8001b3c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b3e:	f107 0314 	add.w	r3, r7, #20
 8001b42:	4619      	mov	r1, r3
 8001b44:	4805      	ldr	r0, [pc, #20]	; (8001b5c <HAL_SPI_MspInit+0x8c>)
 8001b46:	f000 fcb9 	bl	80024bc <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001b4a:	bf00      	nop
 8001b4c:	3728      	adds	r7, #40	; 0x28
 8001b4e:	46bd      	mov	sp, r7
 8001b50:	bd80      	pop	{r7, pc}
 8001b52:	bf00      	nop
 8001b54:	40013000 	.word	0x40013000
 8001b58:	40023800 	.word	0x40023800
 8001b5c:	40020400 	.word	0x40020400

08001b60 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8001b60:	b580      	push	{r7, lr}
 8001b62:	b086      	sub	sp, #24
 8001b64:	af00      	add	r7, sp, #0
 8001b66:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	4a2a      	ldr	r2, [pc, #168]	; (8001c18 <HAL_TIM_PWM_MspInit+0xb8>)
 8001b6e:	4293      	cmp	r3, r2
 8001b70:	d116      	bne.n	8001ba0 <HAL_TIM_PWM_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001b72:	2300      	movs	r3, #0
 8001b74:	617b      	str	r3, [r7, #20]
 8001b76:	4b29      	ldr	r3, [pc, #164]	; (8001c1c <HAL_TIM_PWM_MspInit+0xbc>)
 8001b78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b7a:	4a28      	ldr	r2, [pc, #160]	; (8001c1c <HAL_TIM_PWM_MspInit+0xbc>)
 8001b7c:	f043 0301 	orr.w	r3, r3, #1
 8001b80:	6453      	str	r3, [r2, #68]	; 0x44
 8001b82:	4b26      	ldr	r3, [pc, #152]	; (8001c1c <HAL_TIM_PWM_MspInit+0xbc>)
 8001b84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b86:	f003 0301 	and.w	r3, r3, #1
 8001b8a:	617b      	str	r3, [r7, #20]
 8001b8c:	697b      	ldr	r3, [r7, #20]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, 0, 0);
 8001b8e:	2200      	movs	r2, #0
 8001b90:	2100      	movs	r1, #0
 8001b92:	2018      	movs	r0, #24
 8001b94:	f000 fc2b 	bl	80023ee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 8001b98:	2018      	movs	r0, #24
 8001b9a:	f000 fc44 	bl	8002426 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 8001b9e:	e036      	b.n	8001c0e <HAL_TIM_PWM_MspInit+0xae>
  else if(htim_pwm->Instance==TIM2)
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001ba8:	d116      	bne.n	8001bd8 <HAL_TIM_PWM_MspInit+0x78>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001baa:	2300      	movs	r3, #0
 8001bac:	613b      	str	r3, [r7, #16]
 8001bae:	4b1b      	ldr	r3, [pc, #108]	; (8001c1c <HAL_TIM_PWM_MspInit+0xbc>)
 8001bb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bb2:	4a1a      	ldr	r2, [pc, #104]	; (8001c1c <HAL_TIM_PWM_MspInit+0xbc>)
 8001bb4:	f043 0301 	orr.w	r3, r3, #1
 8001bb8:	6413      	str	r3, [r2, #64]	; 0x40
 8001bba:	4b18      	ldr	r3, [pc, #96]	; (8001c1c <HAL_TIM_PWM_MspInit+0xbc>)
 8001bbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bbe:	f003 0301 	and.w	r3, r3, #1
 8001bc2:	613b      	str	r3, [r7, #16]
 8001bc4:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001bc6:	2200      	movs	r2, #0
 8001bc8:	2100      	movs	r1, #0
 8001bca:	201c      	movs	r0, #28
 8001bcc:	f000 fc0f 	bl	80023ee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001bd0:	201c      	movs	r0, #28
 8001bd2:	f000 fc28 	bl	8002426 <HAL_NVIC_EnableIRQ>
}
 8001bd6:	e01a      	b.n	8001c0e <HAL_TIM_PWM_MspInit+0xae>
  else if(htim_pwm->Instance==TIM5)
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	4a10      	ldr	r2, [pc, #64]	; (8001c20 <HAL_TIM_PWM_MspInit+0xc0>)
 8001bde:	4293      	cmp	r3, r2
 8001be0:	d115      	bne.n	8001c0e <HAL_TIM_PWM_MspInit+0xae>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8001be2:	2300      	movs	r3, #0
 8001be4:	60fb      	str	r3, [r7, #12]
 8001be6:	4b0d      	ldr	r3, [pc, #52]	; (8001c1c <HAL_TIM_PWM_MspInit+0xbc>)
 8001be8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bea:	4a0c      	ldr	r2, [pc, #48]	; (8001c1c <HAL_TIM_PWM_MspInit+0xbc>)
 8001bec:	f043 0308 	orr.w	r3, r3, #8
 8001bf0:	6413      	str	r3, [r2, #64]	; 0x40
 8001bf2:	4b0a      	ldr	r3, [pc, #40]	; (8001c1c <HAL_TIM_PWM_MspInit+0xbc>)
 8001bf4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bf6:	f003 0308 	and.w	r3, r3, #8
 8001bfa:	60fb      	str	r3, [r7, #12]
 8001bfc:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 8001bfe:	2200      	movs	r2, #0
 8001c00:	2100      	movs	r1, #0
 8001c02:	2032      	movs	r0, #50	; 0x32
 8001c04:	f000 fbf3 	bl	80023ee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8001c08:	2032      	movs	r0, #50	; 0x32
 8001c0a:	f000 fc0c 	bl	8002426 <HAL_NVIC_EnableIRQ>
}
 8001c0e:	bf00      	nop
 8001c10:	3718      	adds	r7, #24
 8001c12:	46bd      	mov	sp, r7
 8001c14:	bd80      	pop	{r7, pc}
 8001c16:	bf00      	nop
 8001c18:	40010000 	.word	0x40010000
 8001c1c:	40023800 	.word	0x40023800
 8001c20:	40000c00 	.word	0x40000c00

08001c24 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8001c24:	b580      	push	{r7, lr}
 8001c26:	b08c      	sub	sp, #48	; 0x30
 8001c28:	af00      	add	r7, sp, #0
 8001c2a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c2c:	f107 031c 	add.w	r3, r7, #28
 8001c30:	2200      	movs	r2, #0
 8001c32:	601a      	str	r2, [r3, #0]
 8001c34:	605a      	str	r2, [r3, #4]
 8001c36:	609a      	str	r2, [r3, #8]
 8001c38:	60da      	str	r2, [r3, #12]
 8001c3a:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM3)
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	4a3a      	ldr	r2, [pc, #232]	; (8001d2c <HAL_TIM_Encoder_MspInit+0x108>)
 8001c42:	4293      	cmp	r3, r2
 8001c44:	d134      	bne.n	8001cb0 <HAL_TIM_Encoder_MspInit+0x8c>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001c46:	2300      	movs	r3, #0
 8001c48:	61bb      	str	r3, [r7, #24]
 8001c4a:	4b39      	ldr	r3, [pc, #228]	; (8001d30 <HAL_TIM_Encoder_MspInit+0x10c>)
 8001c4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c4e:	4a38      	ldr	r2, [pc, #224]	; (8001d30 <HAL_TIM_Encoder_MspInit+0x10c>)
 8001c50:	f043 0302 	orr.w	r3, r3, #2
 8001c54:	6413      	str	r3, [r2, #64]	; 0x40
 8001c56:	4b36      	ldr	r3, [pc, #216]	; (8001d30 <HAL_TIM_Encoder_MspInit+0x10c>)
 8001c58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c5a:	f003 0302 	and.w	r3, r3, #2
 8001c5e:	61bb      	str	r3, [r7, #24]
 8001c60:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c62:	2300      	movs	r3, #0
 8001c64:	617b      	str	r3, [r7, #20]
 8001c66:	4b32      	ldr	r3, [pc, #200]	; (8001d30 <HAL_TIM_Encoder_MspInit+0x10c>)
 8001c68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c6a:	4a31      	ldr	r2, [pc, #196]	; (8001d30 <HAL_TIM_Encoder_MspInit+0x10c>)
 8001c6c:	f043 0301 	orr.w	r3, r3, #1
 8001c70:	6313      	str	r3, [r2, #48]	; 0x30
 8001c72:	4b2f      	ldr	r3, [pc, #188]	; (8001d30 <HAL_TIM_Encoder_MspInit+0x10c>)
 8001c74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c76:	f003 0301 	and.w	r3, r3, #1
 8001c7a:	617b      	str	r3, [r7, #20]
 8001c7c:	697b      	ldr	r3, [r7, #20]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = ENCODER_R1_Pin|ENCODER_R2_Pin;
 8001c7e:	23c0      	movs	r3, #192	; 0xc0
 8001c80:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c82:	2302      	movs	r3, #2
 8001c84:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c86:	2300      	movs	r3, #0
 8001c88:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c8a:	2300      	movs	r3, #0
 8001c8c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001c8e:	2302      	movs	r3, #2
 8001c90:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c92:	f107 031c 	add.w	r3, r7, #28
 8001c96:	4619      	mov	r1, r3
 8001c98:	4826      	ldr	r0, [pc, #152]	; (8001d34 <HAL_TIM_Encoder_MspInit+0x110>)
 8001c9a:	f000 fc0f 	bl	80024bc <HAL_GPIO_Init>

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8001c9e:	2200      	movs	r2, #0
 8001ca0:	2100      	movs	r1, #0
 8001ca2:	201d      	movs	r0, #29
 8001ca4:	f000 fba3 	bl	80023ee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001ca8:	201d      	movs	r0, #29
 8001caa:	f000 fbbc 	bl	8002426 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8001cae:	e039      	b.n	8001d24 <HAL_TIM_Encoder_MspInit+0x100>
  else if(htim_encoder->Instance==TIM4)
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	4a20      	ldr	r2, [pc, #128]	; (8001d38 <HAL_TIM_Encoder_MspInit+0x114>)
 8001cb6:	4293      	cmp	r3, r2
 8001cb8:	d134      	bne.n	8001d24 <HAL_TIM_Encoder_MspInit+0x100>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001cba:	2300      	movs	r3, #0
 8001cbc:	613b      	str	r3, [r7, #16]
 8001cbe:	4b1c      	ldr	r3, [pc, #112]	; (8001d30 <HAL_TIM_Encoder_MspInit+0x10c>)
 8001cc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cc2:	4a1b      	ldr	r2, [pc, #108]	; (8001d30 <HAL_TIM_Encoder_MspInit+0x10c>)
 8001cc4:	f043 0304 	orr.w	r3, r3, #4
 8001cc8:	6413      	str	r3, [r2, #64]	; 0x40
 8001cca:	4b19      	ldr	r3, [pc, #100]	; (8001d30 <HAL_TIM_Encoder_MspInit+0x10c>)
 8001ccc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cce:	f003 0304 	and.w	r3, r3, #4
 8001cd2:	613b      	str	r3, [r7, #16]
 8001cd4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001cd6:	2300      	movs	r3, #0
 8001cd8:	60fb      	str	r3, [r7, #12]
 8001cda:	4b15      	ldr	r3, [pc, #84]	; (8001d30 <HAL_TIM_Encoder_MspInit+0x10c>)
 8001cdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cde:	4a14      	ldr	r2, [pc, #80]	; (8001d30 <HAL_TIM_Encoder_MspInit+0x10c>)
 8001ce0:	f043 0308 	orr.w	r3, r3, #8
 8001ce4:	6313      	str	r3, [r2, #48]	; 0x30
 8001ce6:	4b12      	ldr	r3, [pc, #72]	; (8001d30 <HAL_TIM_Encoder_MspInit+0x10c>)
 8001ce8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cea:	f003 0308 	and.w	r3, r3, #8
 8001cee:	60fb      	str	r3, [r7, #12]
 8001cf0:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = ENCODER_L1_Pin|ENCODER_L2_Pin;
 8001cf2:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8001cf6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cf8:	2302      	movs	r3, #2
 8001cfa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cfc:	2300      	movs	r3, #0
 8001cfe:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d00:	2300      	movs	r3, #0
 8001d02:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8001d04:	2302      	movs	r3, #2
 8001d06:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001d08:	f107 031c 	add.w	r3, r7, #28
 8001d0c:	4619      	mov	r1, r3
 8001d0e:	480b      	ldr	r0, [pc, #44]	; (8001d3c <HAL_TIM_Encoder_MspInit+0x118>)
 8001d10:	f000 fbd4 	bl	80024bc <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8001d14:	2200      	movs	r2, #0
 8001d16:	2100      	movs	r1, #0
 8001d18:	201e      	movs	r0, #30
 8001d1a:	f000 fb68 	bl	80023ee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8001d1e:	201e      	movs	r0, #30
 8001d20:	f000 fb81 	bl	8002426 <HAL_NVIC_EnableIRQ>
}
 8001d24:	bf00      	nop
 8001d26:	3730      	adds	r7, #48	; 0x30
 8001d28:	46bd      	mov	sp, r7
 8001d2a:	bd80      	pop	{r7, pc}
 8001d2c:	40000400 	.word	0x40000400
 8001d30:	40023800 	.word	0x40023800
 8001d34:	40020000 	.word	0x40020000
 8001d38:	40000800 	.word	0x40000800
 8001d3c:	40020c00 	.word	0x40020c00

08001d40 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001d40:	b580      	push	{r7, lr}
 8001d42:	b084      	sub	sp, #16
 8001d44:	af00      	add	r7, sp, #0
 8001d46:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM8)
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	4a20      	ldr	r2, [pc, #128]	; (8001dd0 <HAL_TIM_Base_MspInit+0x90>)
 8001d4e:	4293      	cmp	r3, r2
 8001d50:	d11e      	bne.n	8001d90 <HAL_TIM_Base_MspInit+0x50>
  {
  /* USER CODE BEGIN TIM8_MspInit 0 */

  /* USER CODE END TIM8_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM8_CLK_ENABLE();
 8001d52:	2300      	movs	r3, #0
 8001d54:	60fb      	str	r3, [r7, #12]
 8001d56:	4b1f      	ldr	r3, [pc, #124]	; (8001dd4 <HAL_TIM_Base_MspInit+0x94>)
 8001d58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d5a:	4a1e      	ldr	r2, [pc, #120]	; (8001dd4 <HAL_TIM_Base_MspInit+0x94>)
 8001d5c:	f043 0302 	orr.w	r3, r3, #2
 8001d60:	6453      	str	r3, [r2, #68]	; 0x44
 8001d62:	4b1c      	ldr	r3, [pc, #112]	; (8001dd4 <HAL_TIM_Base_MspInit+0x94>)
 8001d64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d66:	f003 0302 	and.w	r3, r3, #2
 8001d6a:	60fb      	str	r3, [r7, #12]
 8001d6c:	68fb      	ldr	r3, [r7, #12]
    /* TIM8 interrupt Init */
    HAL_NVIC_SetPriority(TIM8_BRK_TIM12_IRQn, 0, 0);
 8001d6e:	2200      	movs	r2, #0
 8001d70:	2100      	movs	r1, #0
 8001d72:	202b      	movs	r0, #43	; 0x2b
 8001d74:	f000 fb3b 	bl	80023ee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_BRK_TIM12_IRQn);
 8001d78:	202b      	movs	r0, #43	; 0x2b
 8001d7a:	f000 fb54 	bl	8002426 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM8_UP_TIM13_IRQn, 0, 0);
 8001d7e:	2200      	movs	r2, #0
 8001d80:	2100      	movs	r1, #0
 8001d82:	202c      	movs	r0, #44	; 0x2c
 8001d84:	f000 fb33 	bl	80023ee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
 8001d88:	202c      	movs	r0, #44	; 0x2c
 8001d8a:	f000 fb4c 	bl	8002426 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM9_MspInit 1 */

  /* USER CODE END TIM9_MspInit 1 */
  }

}
 8001d8e:	e01a      	b.n	8001dc6 <HAL_TIM_Base_MspInit+0x86>
  else if(htim_base->Instance==TIM9)
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	4a10      	ldr	r2, [pc, #64]	; (8001dd8 <HAL_TIM_Base_MspInit+0x98>)
 8001d96:	4293      	cmp	r3, r2
 8001d98:	d115      	bne.n	8001dc6 <HAL_TIM_Base_MspInit+0x86>
    __HAL_RCC_TIM9_CLK_ENABLE();
 8001d9a:	2300      	movs	r3, #0
 8001d9c:	60bb      	str	r3, [r7, #8]
 8001d9e:	4b0d      	ldr	r3, [pc, #52]	; (8001dd4 <HAL_TIM_Base_MspInit+0x94>)
 8001da0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001da2:	4a0c      	ldr	r2, [pc, #48]	; (8001dd4 <HAL_TIM_Base_MspInit+0x94>)
 8001da4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001da8:	6453      	str	r3, [r2, #68]	; 0x44
 8001daa:	4b0a      	ldr	r3, [pc, #40]	; (8001dd4 <HAL_TIM_Base_MspInit+0x94>)
 8001dac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001dae:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001db2:	60bb      	str	r3, [r7, #8]
 8001db4:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, 0, 0);
 8001db6:	2200      	movs	r2, #0
 8001db8:	2100      	movs	r1, #0
 8001dba:	2018      	movs	r0, #24
 8001dbc:	f000 fb17 	bl	80023ee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 8001dc0:	2018      	movs	r0, #24
 8001dc2:	f000 fb30 	bl	8002426 <HAL_NVIC_EnableIRQ>
}
 8001dc6:	bf00      	nop
 8001dc8:	3710      	adds	r7, #16
 8001dca:	46bd      	mov	sp, r7
 8001dcc:	bd80      	pop	{r7, pc}
 8001dce:	bf00      	nop
 8001dd0:	40010400 	.word	0x40010400
 8001dd4:	40023800 	.word	0x40023800
 8001dd8:	40014000 	.word	0x40014000

08001ddc <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001ddc:	b580      	push	{r7, lr}
 8001dde:	b08a      	sub	sp, #40	; 0x28
 8001de0:	af00      	add	r7, sp, #0
 8001de2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001de4:	f107 0314 	add.w	r3, r7, #20
 8001de8:	2200      	movs	r2, #0
 8001dea:	601a      	str	r2, [r3, #0]
 8001dec:	605a      	str	r2, [r3, #4]
 8001dee:	609a      	str	r2, [r3, #8]
 8001df0:	60da      	str	r2, [r3, #12]
 8001df2:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	4a36      	ldr	r2, [pc, #216]	; (8001ed4 <HAL_TIM_MspPostInit+0xf8>)
 8001dfa:	4293      	cmp	r3, r2
 8001dfc:	d11f      	bne.n	8001e3e <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001dfe:	2300      	movs	r3, #0
 8001e00:	613b      	str	r3, [r7, #16]
 8001e02:	4b35      	ldr	r3, [pc, #212]	; (8001ed8 <HAL_TIM_MspPostInit+0xfc>)
 8001e04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e06:	4a34      	ldr	r2, [pc, #208]	; (8001ed8 <HAL_TIM_MspPostInit+0xfc>)
 8001e08:	f043 0310 	orr.w	r3, r3, #16
 8001e0c:	6313      	str	r3, [r2, #48]	; 0x30
 8001e0e:	4b32      	ldr	r3, [pc, #200]	; (8001ed8 <HAL_TIM_MspPostInit+0xfc>)
 8001e10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e12:	f003 0310 	and.w	r3, r3, #16
 8001e16:	613b      	str	r3, [r7, #16]
 8001e18:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = PWM_L_Pin;
 8001e1a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001e1e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e20:	2302      	movs	r3, #2
 8001e22:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e24:	2300      	movs	r3, #0
 8001e26:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e28:	2300      	movs	r3, #0
 8001e2a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001e2c:	2301      	movs	r3, #1
 8001e2e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(PWM_L_GPIO_Port, &GPIO_InitStruct);
 8001e30:	f107 0314 	add.w	r3, r7, #20
 8001e34:	4619      	mov	r1, r3
 8001e36:	4829      	ldr	r0, [pc, #164]	; (8001edc <HAL_TIM_MspPostInit+0x100>)
 8001e38:	f000 fb40 	bl	80024bc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM5_MspPostInit 1 */

  /* USER CODE END TIM5_MspPostInit 1 */
  }

}
 8001e3c:	e046      	b.n	8001ecc <HAL_TIM_MspPostInit+0xf0>
  else if(htim->Instance==TIM2)
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001e46:	d11e      	bne.n	8001e86 <HAL_TIM_MspPostInit+0xaa>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e48:	2300      	movs	r3, #0
 8001e4a:	60fb      	str	r3, [r7, #12]
 8001e4c:	4b22      	ldr	r3, [pc, #136]	; (8001ed8 <HAL_TIM_MspPostInit+0xfc>)
 8001e4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e50:	4a21      	ldr	r2, [pc, #132]	; (8001ed8 <HAL_TIM_MspPostInit+0xfc>)
 8001e52:	f043 0301 	orr.w	r3, r3, #1
 8001e56:	6313      	str	r3, [r2, #48]	; 0x30
 8001e58:	4b1f      	ldr	r3, [pc, #124]	; (8001ed8 <HAL_TIM_MspPostInit+0xfc>)
 8001e5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e5c:	f003 0301 	and.w	r3, r3, #1
 8001e60:	60fb      	str	r3, [r7, #12]
 8001e62:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = PWM_R_Pin;
 8001e64:	2320      	movs	r3, #32
 8001e66:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e68:	2302      	movs	r3, #2
 8001e6a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e6c:	2300      	movs	r3, #0
 8001e6e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e70:	2300      	movs	r3, #0
 8001e72:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001e74:	2301      	movs	r3, #1
 8001e76:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(PWM_R_GPIO_Port, &GPIO_InitStruct);
 8001e78:	f107 0314 	add.w	r3, r7, #20
 8001e7c:	4619      	mov	r1, r3
 8001e7e:	4818      	ldr	r0, [pc, #96]	; (8001ee0 <HAL_TIM_MspPostInit+0x104>)
 8001e80:	f000 fb1c 	bl	80024bc <HAL_GPIO_Init>
}
 8001e84:	e022      	b.n	8001ecc <HAL_TIM_MspPostInit+0xf0>
  else if(htim->Instance==TIM5)
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	4a16      	ldr	r2, [pc, #88]	; (8001ee4 <HAL_TIM_MspPostInit+0x108>)
 8001e8c:	4293      	cmp	r3, r2
 8001e8e:	d11d      	bne.n	8001ecc <HAL_TIM_MspPostInit+0xf0>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e90:	2300      	movs	r3, #0
 8001e92:	60bb      	str	r3, [r7, #8]
 8001e94:	4b10      	ldr	r3, [pc, #64]	; (8001ed8 <HAL_TIM_MspPostInit+0xfc>)
 8001e96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e98:	4a0f      	ldr	r2, [pc, #60]	; (8001ed8 <HAL_TIM_MspPostInit+0xfc>)
 8001e9a:	f043 0301 	orr.w	r3, r3, #1
 8001e9e:	6313      	str	r3, [r2, #48]	; 0x30
 8001ea0:	4b0d      	ldr	r3, [pc, #52]	; (8001ed8 <HAL_TIM_MspPostInit+0xfc>)
 8001ea2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ea4:	f003 0301 	and.w	r3, r3, #1
 8001ea8:	60bb      	str	r3, [r7, #8]
 8001eaa:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = PULSE_STEPPER_Pin;
 8001eac:	2301      	movs	r3, #1
 8001eae:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001eb0:	2302      	movs	r3, #2
 8001eb2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001eb4:	2300      	movs	r3, #0
 8001eb6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001eb8:	2300      	movs	r3, #0
 8001eba:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8001ebc:	2302      	movs	r3, #2
 8001ebe:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(PULSE_STEPPER_GPIO_Port, &GPIO_InitStruct);
 8001ec0:	f107 0314 	add.w	r3, r7, #20
 8001ec4:	4619      	mov	r1, r3
 8001ec6:	4806      	ldr	r0, [pc, #24]	; (8001ee0 <HAL_TIM_MspPostInit+0x104>)
 8001ec8:	f000 faf8 	bl	80024bc <HAL_GPIO_Init>
}
 8001ecc:	bf00      	nop
 8001ece:	3728      	adds	r7, #40	; 0x28
 8001ed0:	46bd      	mov	sp, r7
 8001ed2:	bd80      	pop	{r7, pc}
 8001ed4:	40010000 	.word	0x40010000
 8001ed8:	40023800 	.word	0x40023800
 8001edc:	40021000 	.word	0x40021000
 8001ee0:	40020000 	.word	0x40020000
 8001ee4:	40000c00 	.word	0x40000c00

08001ee8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001ee8:	b580      	push	{r7, lr}
 8001eea:	b08c      	sub	sp, #48	; 0x30
 8001eec:	af00      	add	r7, sp, #0
 8001eee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ef0:	f107 031c 	add.w	r3, r7, #28
 8001ef4:	2200      	movs	r2, #0
 8001ef6:	601a      	str	r2, [r3, #0]
 8001ef8:	605a      	str	r2, [r3, #4]
 8001efa:	609a      	str	r2, [r3, #8]
 8001efc:	60da      	str	r2, [r3, #12]
 8001efe:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	4a32      	ldr	r2, [pc, #200]	; (8001fd0 <HAL_UART_MspInit+0xe8>)
 8001f06:	4293      	cmp	r3, r2
 8001f08:	d12d      	bne.n	8001f66 <HAL_UART_MspInit+0x7e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001f0a:	2300      	movs	r3, #0
 8001f0c:	61bb      	str	r3, [r7, #24]
 8001f0e:	4b31      	ldr	r3, [pc, #196]	; (8001fd4 <HAL_UART_MspInit+0xec>)
 8001f10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f12:	4a30      	ldr	r2, [pc, #192]	; (8001fd4 <HAL_UART_MspInit+0xec>)
 8001f14:	f043 0310 	orr.w	r3, r3, #16
 8001f18:	6453      	str	r3, [r2, #68]	; 0x44
 8001f1a:	4b2e      	ldr	r3, [pc, #184]	; (8001fd4 <HAL_UART_MspInit+0xec>)
 8001f1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f1e:	f003 0310 	and.w	r3, r3, #16
 8001f22:	61bb      	str	r3, [r7, #24]
 8001f24:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f26:	2300      	movs	r3, #0
 8001f28:	617b      	str	r3, [r7, #20]
 8001f2a:	4b2a      	ldr	r3, [pc, #168]	; (8001fd4 <HAL_UART_MspInit+0xec>)
 8001f2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f2e:	4a29      	ldr	r2, [pc, #164]	; (8001fd4 <HAL_UART_MspInit+0xec>)
 8001f30:	f043 0301 	orr.w	r3, r3, #1
 8001f34:	6313      	str	r3, [r2, #48]	; 0x30
 8001f36:	4b27      	ldr	r3, [pc, #156]	; (8001fd4 <HAL_UART_MspInit+0xec>)
 8001f38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f3a:	f003 0301 	and.w	r3, r3, #1
 8001f3e:	617b      	str	r3, [r7, #20]
 8001f40:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = TX_ESP32_Pin|RX_ESP32_Pin;
 8001f42:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001f46:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f48:	2302      	movs	r3, #2
 8001f4a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f4c:	2300      	movs	r3, #0
 8001f4e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f50:	2303      	movs	r3, #3
 8001f52:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001f54:	2307      	movs	r3, #7
 8001f56:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f58:	f107 031c 	add.w	r3, r7, #28
 8001f5c:	4619      	mov	r1, r3
 8001f5e:	481e      	ldr	r0, [pc, #120]	; (8001fd8 <HAL_UART_MspInit+0xf0>)
 8001f60:	f000 faac 	bl	80024bc <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001f64:	e030      	b.n	8001fc8 <HAL_UART_MspInit+0xe0>
  else if(huart->Instance==USART2)
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	4a1c      	ldr	r2, [pc, #112]	; (8001fdc <HAL_UART_MspInit+0xf4>)
 8001f6c:	4293      	cmp	r3, r2
 8001f6e:	d12b      	bne.n	8001fc8 <HAL_UART_MspInit+0xe0>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001f70:	2300      	movs	r3, #0
 8001f72:	613b      	str	r3, [r7, #16]
 8001f74:	4b17      	ldr	r3, [pc, #92]	; (8001fd4 <HAL_UART_MspInit+0xec>)
 8001f76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f78:	4a16      	ldr	r2, [pc, #88]	; (8001fd4 <HAL_UART_MspInit+0xec>)
 8001f7a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001f7e:	6413      	str	r3, [r2, #64]	; 0x40
 8001f80:	4b14      	ldr	r3, [pc, #80]	; (8001fd4 <HAL_UART_MspInit+0xec>)
 8001f82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f84:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f88:	613b      	str	r3, [r7, #16]
 8001f8a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f8c:	2300      	movs	r3, #0
 8001f8e:	60fb      	str	r3, [r7, #12]
 8001f90:	4b10      	ldr	r3, [pc, #64]	; (8001fd4 <HAL_UART_MspInit+0xec>)
 8001f92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f94:	4a0f      	ldr	r2, [pc, #60]	; (8001fd4 <HAL_UART_MspInit+0xec>)
 8001f96:	f043 0301 	orr.w	r3, r3, #1
 8001f9a:	6313      	str	r3, [r2, #48]	; 0x30
 8001f9c:	4b0d      	ldr	r3, [pc, #52]	; (8001fd4 <HAL_UART_MspInit+0xec>)
 8001f9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fa0:	f003 0301 	and.w	r3, r3, #1
 8001fa4:	60fb      	str	r3, [r7, #12]
 8001fa6:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = TX_HC05_Pin|RX_HC05_Pin;
 8001fa8:	230c      	movs	r3, #12
 8001faa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fac:	2302      	movs	r3, #2
 8001fae:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fb0:	2300      	movs	r3, #0
 8001fb2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001fb4:	2303      	movs	r3, #3
 8001fb6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001fb8:	2307      	movs	r3, #7
 8001fba:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001fbc:	f107 031c 	add.w	r3, r7, #28
 8001fc0:	4619      	mov	r1, r3
 8001fc2:	4805      	ldr	r0, [pc, #20]	; (8001fd8 <HAL_UART_MspInit+0xf0>)
 8001fc4:	f000 fa7a 	bl	80024bc <HAL_GPIO_Init>
}
 8001fc8:	bf00      	nop
 8001fca:	3730      	adds	r7, #48	; 0x30
 8001fcc:	46bd      	mov	sp, r7
 8001fce:	bd80      	pop	{r7, pc}
 8001fd0:	40011000 	.word	0x40011000
 8001fd4:	40023800 	.word	0x40023800
 8001fd8:	40020000 	.word	0x40020000
 8001fdc:	40004400 	.word	0x40004400

08001fe0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001fe0:	b480      	push	{r7}
 8001fe2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001fe4:	e7fe      	b.n	8001fe4 <NMI_Handler+0x4>

08001fe6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001fe6:	b480      	push	{r7}
 8001fe8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001fea:	e7fe      	b.n	8001fea <HardFault_Handler+0x4>

08001fec <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001fec:	b480      	push	{r7}
 8001fee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001ff0:	e7fe      	b.n	8001ff0 <MemManage_Handler+0x4>

08001ff2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001ff2:	b480      	push	{r7}
 8001ff4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001ff6:	e7fe      	b.n	8001ff6 <BusFault_Handler+0x4>

08001ff8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001ff8:	b480      	push	{r7}
 8001ffa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001ffc:	e7fe      	b.n	8001ffc <UsageFault_Handler+0x4>

08001ffe <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001ffe:	b480      	push	{r7}
 8002000:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002002:	bf00      	nop
 8002004:	46bd      	mov	sp, r7
 8002006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800200a:	4770      	bx	lr

0800200c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800200c:	b480      	push	{r7}
 800200e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002010:	bf00      	nop
 8002012:	46bd      	mov	sp, r7
 8002014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002018:	4770      	bx	lr

0800201a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800201a:	b480      	push	{r7}
 800201c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800201e:	bf00      	nop
 8002020:	46bd      	mov	sp, r7
 8002022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002026:	4770      	bx	lr

08002028 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002028:	b580      	push	{r7, lr}
 800202a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800202c:	f000 f8e4 	bl	80021f8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002030:	bf00      	nop
 8002032:	bd80      	pop	{r7, pc}

08002034 <TIM1_BRK_TIM9_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM9 global interrupt.
  */
void TIM1_BRK_TIM9_IRQHandler(void)
{
 8002034:	b580      	push	{r7, lr}
 8002036:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002038:	4803      	ldr	r0, [pc, #12]	; (8002048 <TIM1_BRK_TIM9_IRQHandler+0x14>)
 800203a:	f003 f95b 	bl	80052f4 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim9);
 800203e:	4803      	ldr	r0, [pc, #12]	; (800204c <TIM1_BRK_TIM9_IRQHandler+0x18>)
 8002040:	f003 f958 	bl	80052f4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 1 */
}
 8002044:	bf00      	nop
 8002046:	bd80      	pop	{r7, pc}
 8002048:	20000210 	.word	0x20000210
 800204c:	200003c0 	.word	0x200003c0

08002050 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8002050:	b580      	push	{r7, lr}
 8002052:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002054:	4802      	ldr	r0, [pc, #8]	; (8002060 <TIM2_IRQHandler+0x10>)
 8002056:	f003 f94d 	bl	80052f4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800205a:	bf00      	nop
 800205c:	bd80      	pop	{r7, pc}
 800205e:	bf00      	nop
 8002060:	20000258 	.word	0x20000258

08002064 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8002064:	b580      	push	{r7, lr}
 8002066:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8002068:	4802      	ldr	r0, [pc, #8]	; (8002074 <TIM3_IRQHandler+0x10>)
 800206a:	f003 f943 	bl	80052f4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 800206e:	bf00      	nop
 8002070:	bd80      	pop	{r7, pc}
 8002072:	bf00      	nop
 8002074:	200002a0 	.word	0x200002a0

08002078 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8002078:	b580      	push	{r7, lr}
 800207a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 800207c:	4802      	ldr	r0, [pc, #8]	; (8002088 <TIM4_IRQHandler+0x10>)
 800207e:	f003 f939 	bl	80052f4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8002082:	bf00      	nop
 8002084:	bd80      	pop	{r7, pc}
 8002086:	bf00      	nop
 8002088:	200002e8 	.word	0x200002e8

0800208c <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 800208c:	b580      	push	{r7, lr}
 800208e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8002090:	4802      	ldr	r0, [pc, #8]	; (800209c <I2C1_EV_IRQHandler+0x10>)
 8002092:	f000 fd22 	bl	8002ada <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8002096:	bf00      	nop
 8002098:	bd80      	pop	{r7, pc}
 800209a:	bf00      	nop
 800209c:	20000110 	.word	0x20000110

080020a0 <TIM8_BRK_TIM12_IRQHandler>:

/**
  * @brief This function handles TIM8 break interrupt and TIM12 global interrupt.
  */
void TIM8_BRK_TIM12_IRQHandler(void)
{
 80020a0:	b580      	push	{r7, lr}
 80020a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_BRK_TIM12_IRQn 0 */

  /* USER CODE END TIM8_BRK_TIM12_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 80020a4:	4802      	ldr	r0, [pc, #8]	; (80020b0 <TIM8_BRK_TIM12_IRQHandler+0x10>)
 80020a6:	f003 f925 	bl	80052f4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_BRK_TIM12_IRQn 1 */

  /* USER CODE END TIM8_BRK_TIM12_IRQn 1 */
}
 80020aa:	bf00      	nop
 80020ac:	bd80      	pop	{r7, pc}
 80020ae:	bf00      	nop
 80020b0:	20000378 	.word	0x20000378

080020b4 <TIM8_UP_TIM13_IRQHandler>:

/**
  * @brief This function handles TIM8 update interrupt and TIM13 global interrupt.
  */
void TIM8_UP_TIM13_IRQHandler(void)
{
 80020b4:	b580      	push	{r7, lr}
 80020b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 0 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 80020b8:	4802      	ldr	r0, [pc, #8]	; (80020c4 <TIM8_UP_TIM13_IRQHandler+0x10>)
 80020ba:	f003 f91b 	bl	80052f4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 1 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 1 */
}
 80020be:	bf00      	nop
 80020c0:	bd80      	pop	{r7, pc}
 80020c2:	bf00      	nop
 80020c4:	20000378 	.word	0x20000378

080020c8 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 80020c8:	b580      	push	{r7, lr}
 80020ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 80020cc:	4802      	ldr	r0, [pc, #8]	; (80020d8 <TIM5_IRQHandler+0x10>)
 80020ce:	f003 f911 	bl	80052f4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 80020d2:	bf00      	nop
 80020d4:	bd80      	pop	{r7, pc}
 80020d6:	bf00      	nop
 80020d8:	20000330 	.word	0x20000330

080020dc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80020dc:	b480      	push	{r7}
 80020de:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80020e0:	4b06      	ldr	r3, [pc, #24]	; (80020fc <SystemInit+0x20>)
 80020e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80020e6:	4a05      	ldr	r2, [pc, #20]	; (80020fc <SystemInit+0x20>)
 80020e8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80020ec:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80020f0:	bf00      	nop
 80020f2:	46bd      	mov	sp, r7
 80020f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020f8:	4770      	bx	lr
 80020fa:	bf00      	nop
 80020fc:	e000ed00 	.word	0xe000ed00

08002100 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8002100:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002138 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8002104:	f7ff ffea 	bl	80020dc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002108:	480c      	ldr	r0, [pc, #48]	; (800213c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800210a:	490d      	ldr	r1, [pc, #52]	; (8002140 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800210c:	4a0d      	ldr	r2, [pc, #52]	; (8002144 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800210e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002110:	e002      	b.n	8002118 <LoopCopyDataInit>

08002112 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002112:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002114:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002116:	3304      	adds	r3, #4

08002118 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002118:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800211a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800211c:	d3f9      	bcc.n	8002112 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800211e:	4a0a      	ldr	r2, [pc, #40]	; (8002148 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002120:	4c0a      	ldr	r4, [pc, #40]	; (800214c <LoopFillZerobss+0x22>)
  movs r3, #0
 8002122:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002124:	e001      	b.n	800212a <LoopFillZerobss>

08002126 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002126:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002128:	3204      	adds	r2, #4

0800212a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800212a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800212c:	d3fb      	bcc.n	8002126 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800212e:	f004 fa4d 	bl	80065cc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002132:	f7fe ff47 	bl	8000fc4 <main>
  bx  lr    
 8002136:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8002138:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800213c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002140:	2000001c 	.word	0x2000001c
  ldr r2, =_sidata
 8002144:	080066e4 	.word	0x080066e4
  ldr r2, =_sbss
 8002148:	20000020 	.word	0x20000020
  ldr r4, =_ebss
 800214c:	2000049c 	.word	0x2000049c

08002150 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002150:	e7fe      	b.n	8002150 <ADC_IRQHandler>
	...

08002154 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002154:	b580      	push	{r7, lr}
 8002156:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002158:	4b0e      	ldr	r3, [pc, #56]	; (8002194 <HAL_Init+0x40>)
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	4a0d      	ldr	r2, [pc, #52]	; (8002194 <HAL_Init+0x40>)
 800215e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002162:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002164:	4b0b      	ldr	r3, [pc, #44]	; (8002194 <HAL_Init+0x40>)
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	4a0a      	ldr	r2, [pc, #40]	; (8002194 <HAL_Init+0x40>)
 800216a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800216e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002170:	4b08      	ldr	r3, [pc, #32]	; (8002194 <HAL_Init+0x40>)
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	4a07      	ldr	r2, [pc, #28]	; (8002194 <HAL_Init+0x40>)
 8002176:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800217a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800217c:	2003      	movs	r0, #3
 800217e:	f000 f92b 	bl	80023d8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002182:	200f      	movs	r0, #15
 8002184:	f000 f808 	bl	8002198 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002188:	f7ff fbf6 	bl	8001978 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800218c:	2300      	movs	r3, #0
}
 800218e:	4618      	mov	r0, r3
 8002190:	bd80      	pop	{r7, pc}
 8002192:	bf00      	nop
 8002194:	40023c00 	.word	0x40023c00

08002198 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002198:	b580      	push	{r7, lr}
 800219a:	b082      	sub	sp, #8
 800219c:	af00      	add	r7, sp, #0
 800219e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80021a0:	4b12      	ldr	r3, [pc, #72]	; (80021ec <HAL_InitTick+0x54>)
 80021a2:	681a      	ldr	r2, [r3, #0]
 80021a4:	4b12      	ldr	r3, [pc, #72]	; (80021f0 <HAL_InitTick+0x58>)
 80021a6:	781b      	ldrb	r3, [r3, #0]
 80021a8:	4619      	mov	r1, r3
 80021aa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80021ae:	fbb3 f3f1 	udiv	r3, r3, r1
 80021b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80021b6:	4618      	mov	r0, r3
 80021b8:	f000 f943 	bl	8002442 <HAL_SYSTICK_Config>
 80021bc:	4603      	mov	r3, r0
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d001      	beq.n	80021c6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80021c2:	2301      	movs	r3, #1
 80021c4:	e00e      	b.n	80021e4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	2b0f      	cmp	r3, #15
 80021ca:	d80a      	bhi.n	80021e2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80021cc:	2200      	movs	r2, #0
 80021ce:	6879      	ldr	r1, [r7, #4]
 80021d0:	f04f 30ff 	mov.w	r0, #4294967295
 80021d4:	f000 f90b 	bl	80023ee <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80021d8:	4a06      	ldr	r2, [pc, #24]	; (80021f4 <HAL_InitTick+0x5c>)
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80021de:	2300      	movs	r3, #0
 80021e0:	e000      	b.n	80021e4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80021e2:	2301      	movs	r3, #1
}
 80021e4:	4618      	mov	r0, r3
 80021e6:	3708      	adds	r7, #8
 80021e8:	46bd      	mov	sp, r7
 80021ea:	bd80      	pop	{r7, pc}
 80021ec:	20000010 	.word	0x20000010
 80021f0:	20000018 	.word	0x20000018
 80021f4:	20000014 	.word	0x20000014

080021f8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80021f8:	b480      	push	{r7}
 80021fa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80021fc:	4b06      	ldr	r3, [pc, #24]	; (8002218 <HAL_IncTick+0x20>)
 80021fe:	781b      	ldrb	r3, [r3, #0]
 8002200:	461a      	mov	r2, r3
 8002202:	4b06      	ldr	r3, [pc, #24]	; (800221c <HAL_IncTick+0x24>)
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	4413      	add	r3, r2
 8002208:	4a04      	ldr	r2, [pc, #16]	; (800221c <HAL_IncTick+0x24>)
 800220a:	6013      	str	r3, [r2, #0]
}
 800220c:	bf00      	nop
 800220e:	46bd      	mov	sp, r7
 8002210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002214:	4770      	bx	lr
 8002216:	bf00      	nop
 8002218:	20000018 	.word	0x20000018
 800221c:	20000498 	.word	0x20000498

08002220 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002220:	b480      	push	{r7}
 8002222:	af00      	add	r7, sp, #0
  return uwTick;
 8002224:	4b03      	ldr	r3, [pc, #12]	; (8002234 <HAL_GetTick+0x14>)
 8002226:	681b      	ldr	r3, [r3, #0]
}
 8002228:	4618      	mov	r0, r3
 800222a:	46bd      	mov	sp, r7
 800222c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002230:	4770      	bx	lr
 8002232:	bf00      	nop
 8002234:	20000498 	.word	0x20000498

08002238 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002238:	b480      	push	{r7}
 800223a:	b085      	sub	sp, #20
 800223c:	af00      	add	r7, sp, #0
 800223e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	f003 0307 	and.w	r3, r3, #7
 8002246:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002248:	4b0c      	ldr	r3, [pc, #48]	; (800227c <__NVIC_SetPriorityGrouping+0x44>)
 800224a:	68db      	ldr	r3, [r3, #12]
 800224c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800224e:	68ba      	ldr	r2, [r7, #8]
 8002250:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002254:	4013      	ands	r3, r2
 8002256:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002258:	68fb      	ldr	r3, [r7, #12]
 800225a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800225c:	68bb      	ldr	r3, [r7, #8]
 800225e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002260:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002264:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002268:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800226a:	4a04      	ldr	r2, [pc, #16]	; (800227c <__NVIC_SetPriorityGrouping+0x44>)
 800226c:	68bb      	ldr	r3, [r7, #8]
 800226e:	60d3      	str	r3, [r2, #12]
}
 8002270:	bf00      	nop
 8002272:	3714      	adds	r7, #20
 8002274:	46bd      	mov	sp, r7
 8002276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800227a:	4770      	bx	lr
 800227c:	e000ed00 	.word	0xe000ed00

08002280 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002280:	b480      	push	{r7}
 8002282:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002284:	4b04      	ldr	r3, [pc, #16]	; (8002298 <__NVIC_GetPriorityGrouping+0x18>)
 8002286:	68db      	ldr	r3, [r3, #12]
 8002288:	0a1b      	lsrs	r3, r3, #8
 800228a:	f003 0307 	and.w	r3, r3, #7
}
 800228e:	4618      	mov	r0, r3
 8002290:	46bd      	mov	sp, r7
 8002292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002296:	4770      	bx	lr
 8002298:	e000ed00 	.word	0xe000ed00

0800229c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800229c:	b480      	push	{r7}
 800229e:	b083      	sub	sp, #12
 80022a0:	af00      	add	r7, sp, #0
 80022a2:	4603      	mov	r3, r0
 80022a4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80022a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	db0b      	blt.n	80022c6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80022ae:	79fb      	ldrb	r3, [r7, #7]
 80022b0:	f003 021f 	and.w	r2, r3, #31
 80022b4:	4907      	ldr	r1, [pc, #28]	; (80022d4 <__NVIC_EnableIRQ+0x38>)
 80022b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022ba:	095b      	lsrs	r3, r3, #5
 80022bc:	2001      	movs	r0, #1
 80022be:	fa00 f202 	lsl.w	r2, r0, r2
 80022c2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80022c6:	bf00      	nop
 80022c8:	370c      	adds	r7, #12
 80022ca:	46bd      	mov	sp, r7
 80022cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022d0:	4770      	bx	lr
 80022d2:	bf00      	nop
 80022d4:	e000e100 	.word	0xe000e100

080022d8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80022d8:	b480      	push	{r7}
 80022da:	b083      	sub	sp, #12
 80022dc:	af00      	add	r7, sp, #0
 80022de:	4603      	mov	r3, r0
 80022e0:	6039      	str	r1, [r7, #0]
 80022e2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80022e4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	db0a      	blt.n	8002302 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80022ec:	683b      	ldr	r3, [r7, #0]
 80022ee:	b2da      	uxtb	r2, r3
 80022f0:	490c      	ldr	r1, [pc, #48]	; (8002324 <__NVIC_SetPriority+0x4c>)
 80022f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022f6:	0112      	lsls	r2, r2, #4
 80022f8:	b2d2      	uxtb	r2, r2
 80022fa:	440b      	add	r3, r1
 80022fc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002300:	e00a      	b.n	8002318 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002302:	683b      	ldr	r3, [r7, #0]
 8002304:	b2da      	uxtb	r2, r3
 8002306:	4908      	ldr	r1, [pc, #32]	; (8002328 <__NVIC_SetPriority+0x50>)
 8002308:	79fb      	ldrb	r3, [r7, #7]
 800230a:	f003 030f 	and.w	r3, r3, #15
 800230e:	3b04      	subs	r3, #4
 8002310:	0112      	lsls	r2, r2, #4
 8002312:	b2d2      	uxtb	r2, r2
 8002314:	440b      	add	r3, r1
 8002316:	761a      	strb	r2, [r3, #24]
}
 8002318:	bf00      	nop
 800231a:	370c      	adds	r7, #12
 800231c:	46bd      	mov	sp, r7
 800231e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002322:	4770      	bx	lr
 8002324:	e000e100 	.word	0xe000e100
 8002328:	e000ed00 	.word	0xe000ed00

0800232c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800232c:	b480      	push	{r7}
 800232e:	b089      	sub	sp, #36	; 0x24
 8002330:	af00      	add	r7, sp, #0
 8002332:	60f8      	str	r0, [r7, #12]
 8002334:	60b9      	str	r1, [r7, #8]
 8002336:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002338:	68fb      	ldr	r3, [r7, #12]
 800233a:	f003 0307 	and.w	r3, r3, #7
 800233e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002340:	69fb      	ldr	r3, [r7, #28]
 8002342:	f1c3 0307 	rsb	r3, r3, #7
 8002346:	2b04      	cmp	r3, #4
 8002348:	bf28      	it	cs
 800234a:	2304      	movcs	r3, #4
 800234c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800234e:	69fb      	ldr	r3, [r7, #28]
 8002350:	3304      	adds	r3, #4
 8002352:	2b06      	cmp	r3, #6
 8002354:	d902      	bls.n	800235c <NVIC_EncodePriority+0x30>
 8002356:	69fb      	ldr	r3, [r7, #28]
 8002358:	3b03      	subs	r3, #3
 800235a:	e000      	b.n	800235e <NVIC_EncodePriority+0x32>
 800235c:	2300      	movs	r3, #0
 800235e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002360:	f04f 32ff 	mov.w	r2, #4294967295
 8002364:	69bb      	ldr	r3, [r7, #24]
 8002366:	fa02 f303 	lsl.w	r3, r2, r3
 800236a:	43da      	mvns	r2, r3
 800236c:	68bb      	ldr	r3, [r7, #8]
 800236e:	401a      	ands	r2, r3
 8002370:	697b      	ldr	r3, [r7, #20]
 8002372:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002374:	f04f 31ff 	mov.w	r1, #4294967295
 8002378:	697b      	ldr	r3, [r7, #20]
 800237a:	fa01 f303 	lsl.w	r3, r1, r3
 800237e:	43d9      	mvns	r1, r3
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002384:	4313      	orrs	r3, r2
         );
}
 8002386:	4618      	mov	r0, r3
 8002388:	3724      	adds	r7, #36	; 0x24
 800238a:	46bd      	mov	sp, r7
 800238c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002390:	4770      	bx	lr
	...

08002394 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002394:	b580      	push	{r7, lr}
 8002396:	b082      	sub	sp, #8
 8002398:	af00      	add	r7, sp, #0
 800239a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	3b01      	subs	r3, #1
 80023a0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80023a4:	d301      	bcc.n	80023aa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80023a6:	2301      	movs	r3, #1
 80023a8:	e00f      	b.n	80023ca <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80023aa:	4a0a      	ldr	r2, [pc, #40]	; (80023d4 <SysTick_Config+0x40>)
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	3b01      	subs	r3, #1
 80023b0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80023b2:	210f      	movs	r1, #15
 80023b4:	f04f 30ff 	mov.w	r0, #4294967295
 80023b8:	f7ff ff8e 	bl	80022d8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80023bc:	4b05      	ldr	r3, [pc, #20]	; (80023d4 <SysTick_Config+0x40>)
 80023be:	2200      	movs	r2, #0
 80023c0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80023c2:	4b04      	ldr	r3, [pc, #16]	; (80023d4 <SysTick_Config+0x40>)
 80023c4:	2207      	movs	r2, #7
 80023c6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80023c8:	2300      	movs	r3, #0
}
 80023ca:	4618      	mov	r0, r3
 80023cc:	3708      	adds	r7, #8
 80023ce:	46bd      	mov	sp, r7
 80023d0:	bd80      	pop	{r7, pc}
 80023d2:	bf00      	nop
 80023d4:	e000e010 	.word	0xe000e010

080023d8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80023d8:	b580      	push	{r7, lr}
 80023da:	b082      	sub	sp, #8
 80023dc:	af00      	add	r7, sp, #0
 80023de:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80023e0:	6878      	ldr	r0, [r7, #4]
 80023e2:	f7ff ff29 	bl	8002238 <__NVIC_SetPriorityGrouping>
}
 80023e6:	bf00      	nop
 80023e8:	3708      	adds	r7, #8
 80023ea:	46bd      	mov	sp, r7
 80023ec:	bd80      	pop	{r7, pc}

080023ee <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80023ee:	b580      	push	{r7, lr}
 80023f0:	b086      	sub	sp, #24
 80023f2:	af00      	add	r7, sp, #0
 80023f4:	4603      	mov	r3, r0
 80023f6:	60b9      	str	r1, [r7, #8]
 80023f8:	607a      	str	r2, [r7, #4]
 80023fa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80023fc:	2300      	movs	r3, #0
 80023fe:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002400:	f7ff ff3e 	bl	8002280 <__NVIC_GetPriorityGrouping>
 8002404:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002406:	687a      	ldr	r2, [r7, #4]
 8002408:	68b9      	ldr	r1, [r7, #8]
 800240a:	6978      	ldr	r0, [r7, #20]
 800240c:	f7ff ff8e 	bl	800232c <NVIC_EncodePriority>
 8002410:	4602      	mov	r2, r0
 8002412:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002416:	4611      	mov	r1, r2
 8002418:	4618      	mov	r0, r3
 800241a:	f7ff ff5d 	bl	80022d8 <__NVIC_SetPriority>
}
 800241e:	bf00      	nop
 8002420:	3718      	adds	r7, #24
 8002422:	46bd      	mov	sp, r7
 8002424:	bd80      	pop	{r7, pc}

08002426 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002426:	b580      	push	{r7, lr}
 8002428:	b082      	sub	sp, #8
 800242a:	af00      	add	r7, sp, #0
 800242c:	4603      	mov	r3, r0
 800242e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002430:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002434:	4618      	mov	r0, r3
 8002436:	f7ff ff31 	bl	800229c <__NVIC_EnableIRQ>
}
 800243a:	bf00      	nop
 800243c:	3708      	adds	r7, #8
 800243e:	46bd      	mov	sp, r7
 8002440:	bd80      	pop	{r7, pc}

08002442 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002442:	b580      	push	{r7, lr}
 8002444:	b082      	sub	sp, #8
 8002446:	af00      	add	r7, sp, #0
 8002448:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800244a:	6878      	ldr	r0, [r7, #4]
 800244c:	f7ff ffa2 	bl	8002394 <SysTick_Config>
 8002450:	4603      	mov	r3, r0
}
 8002452:	4618      	mov	r0, r3
 8002454:	3708      	adds	r7, #8
 8002456:	46bd      	mov	sp, r7
 8002458:	bd80      	pop	{r7, pc}

0800245a <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800245a:	b480      	push	{r7}
 800245c:	b083      	sub	sp, #12
 800245e:	af00      	add	r7, sp, #0
 8002460:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002468:	b2db      	uxtb	r3, r3
 800246a:	2b02      	cmp	r3, #2
 800246c:	d004      	beq.n	8002478 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	2280      	movs	r2, #128	; 0x80
 8002472:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002474:	2301      	movs	r3, #1
 8002476:	e00c      	b.n	8002492 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	2205      	movs	r2, #5
 800247c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	681a      	ldr	r2, [r3, #0]
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	f022 0201 	bic.w	r2, r2, #1
 800248e:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002490:	2300      	movs	r3, #0
}
 8002492:	4618      	mov	r0, r3
 8002494:	370c      	adds	r7, #12
 8002496:	46bd      	mov	sp, r7
 8002498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800249c:	4770      	bx	lr

0800249e <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 800249e:	b480      	push	{r7}
 80024a0:	b083      	sub	sp, #12
 80024a2:	af00      	add	r7, sp, #0
 80024a4:	6078      	str	r0, [r7, #4]
  return hdma->State;
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80024ac:	b2db      	uxtb	r3, r3
}
 80024ae:	4618      	mov	r0, r3
 80024b0:	370c      	adds	r7, #12
 80024b2:	46bd      	mov	sp, r7
 80024b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024b8:	4770      	bx	lr
	...

080024bc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80024bc:	b480      	push	{r7}
 80024be:	b089      	sub	sp, #36	; 0x24
 80024c0:	af00      	add	r7, sp, #0
 80024c2:	6078      	str	r0, [r7, #4]
 80024c4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80024c6:	2300      	movs	r3, #0
 80024c8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80024ca:	2300      	movs	r3, #0
 80024cc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80024ce:	2300      	movs	r3, #0
 80024d0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80024d2:	2300      	movs	r3, #0
 80024d4:	61fb      	str	r3, [r7, #28]
 80024d6:	e16b      	b.n	80027b0 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80024d8:	2201      	movs	r2, #1
 80024da:	69fb      	ldr	r3, [r7, #28]
 80024dc:	fa02 f303 	lsl.w	r3, r2, r3
 80024e0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80024e2:	683b      	ldr	r3, [r7, #0]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	697a      	ldr	r2, [r7, #20]
 80024e8:	4013      	ands	r3, r2
 80024ea:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80024ec:	693a      	ldr	r2, [r7, #16]
 80024ee:	697b      	ldr	r3, [r7, #20]
 80024f0:	429a      	cmp	r2, r3
 80024f2:	f040 815a 	bne.w	80027aa <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80024f6:	683b      	ldr	r3, [r7, #0]
 80024f8:	685b      	ldr	r3, [r3, #4]
 80024fa:	f003 0303 	and.w	r3, r3, #3
 80024fe:	2b01      	cmp	r3, #1
 8002500:	d005      	beq.n	800250e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002502:	683b      	ldr	r3, [r7, #0]
 8002504:	685b      	ldr	r3, [r3, #4]
 8002506:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800250a:	2b02      	cmp	r3, #2
 800250c:	d130      	bne.n	8002570 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	689b      	ldr	r3, [r3, #8]
 8002512:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002514:	69fb      	ldr	r3, [r7, #28]
 8002516:	005b      	lsls	r3, r3, #1
 8002518:	2203      	movs	r2, #3
 800251a:	fa02 f303 	lsl.w	r3, r2, r3
 800251e:	43db      	mvns	r3, r3
 8002520:	69ba      	ldr	r2, [r7, #24]
 8002522:	4013      	ands	r3, r2
 8002524:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002526:	683b      	ldr	r3, [r7, #0]
 8002528:	68da      	ldr	r2, [r3, #12]
 800252a:	69fb      	ldr	r3, [r7, #28]
 800252c:	005b      	lsls	r3, r3, #1
 800252e:	fa02 f303 	lsl.w	r3, r2, r3
 8002532:	69ba      	ldr	r2, [r7, #24]
 8002534:	4313      	orrs	r3, r2
 8002536:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	69ba      	ldr	r2, [r7, #24]
 800253c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	685b      	ldr	r3, [r3, #4]
 8002542:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002544:	2201      	movs	r2, #1
 8002546:	69fb      	ldr	r3, [r7, #28]
 8002548:	fa02 f303 	lsl.w	r3, r2, r3
 800254c:	43db      	mvns	r3, r3
 800254e:	69ba      	ldr	r2, [r7, #24]
 8002550:	4013      	ands	r3, r2
 8002552:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002554:	683b      	ldr	r3, [r7, #0]
 8002556:	685b      	ldr	r3, [r3, #4]
 8002558:	091b      	lsrs	r3, r3, #4
 800255a:	f003 0201 	and.w	r2, r3, #1
 800255e:	69fb      	ldr	r3, [r7, #28]
 8002560:	fa02 f303 	lsl.w	r3, r2, r3
 8002564:	69ba      	ldr	r2, [r7, #24]
 8002566:	4313      	orrs	r3, r2
 8002568:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	69ba      	ldr	r2, [r7, #24]
 800256e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002570:	683b      	ldr	r3, [r7, #0]
 8002572:	685b      	ldr	r3, [r3, #4]
 8002574:	f003 0303 	and.w	r3, r3, #3
 8002578:	2b03      	cmp	r3, #3
 800257a:	d017      	beq.n	80025ac <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	68db      	ldr	r3, [r3, #12]
 8002580:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002582:	69fb      	ldr	r3, [r7, #28]
 8002584:	005b      	lsls	r3, r3, #1
 8002586:	2203      	movs	r2, #3
 8002588:	fa02 f303 	lsl.w	r3, r2, r3
 800258c:	43db      	mvns	r3, r3
 800258e:	69ba      	ldr	r2, [r7, #24]
 8002590:	4013      	ands	r3, r2
 8002592:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002594:	683b      	ldr	r3, [r7, #0]
 8002596:	689a      	ldr	r2, [r3, #8]
 8002598:	69fb      	ldr	r3, [r7, #28]
 800259a:	005b      	lsls	r3, r3, #1
 800259c:	fa02 f303 	lsl.w	r3, r2, r3
 80025a0:	69ba      	ldr	r2, [r7, #24]
 80025a2:	4313      	orrs	r3, r2
 80025a4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	69ba      	ldr	r2, [r7, #24]
 80025aa:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80025ac:	683b      	ldr	r3, [r7, #0]
 80025ae:	685b      	ldr	r3, [r3, #4]
 80025b0:	f003 0303 	and.w	r3, r3, #3
 80025b4:	2b02      	cmp	r3, #2
 80025b6:	d123      	bne.n	8002600 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80025b8:	69fb      	ldr	r3, [r7, #28]
 80025ba:	08da      	lsrs	r2, r3, #3
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	3208      	adds	r2, #8
 80025c0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80025c4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80025c6:	69fb      	ldr	r3, [r7, #28]
 80025c8:	f003 0307 	and.w	r3, r3, #7
 80025cc:	009b      	lsls	r3, r3, #2
 80025ce:	220f      	movs	r2, #15
 80025d0:	fa02 f303 	lsl.w	r3, r2, r3
 80025d4:	43db      	mvns	r3, r3
 80025d6:	69ba      	ldr	r2, [r7, #24]
 80025d8:	4013      	ands	r3, r2
 80025da:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80025dc:	683b      	ldr	r3, [r7, #0]
 80025de:	691a      	ldr	r2, [r3, #16]
 80025e0:	69fb      	ldr	r3, [r7, #28]
 80025e2:	f003 0307 	and.w	r3, r3, #7
 80025e6:	009b      	lsls	r3, r3, #2
 80025e8:	fa02 f303 	lsl.w	r3, r2, r3
 80025ec:	69ba      	ldr	r2, [r7, #24]
 80025ee:	4313      	orrs	r3, r2
 80025f0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80025f2:	69fb      	ldr	r3, [r7, #28]
 80025f4:	08da      	lsrs	r2, r3, #3
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	3208      	adds	r2, #8
 80025fa:	69b9      	ldr	r1, [r7, #24]
 80025fc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002606:	69fb      	ldr	r3, [r7, #28]
 8002608:	005b      	lsls	r3, r3, #1
 800260a:	2203      	movs	r2, #3
 800260c:	fa02 f303 	lsl.w	r3, r2, r3
 8002610:	43db      	mvns	r3, r3
 8002612:	69ba      	ldr	r2, [r7, #24]
 8002614:	4013      	ands	r3, r2
 8002616:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002618:	683b      	ldr	r3, [r7, #0]
 800261a:	685b      	ldr	r3, [r3, #4]
 800261c:	f003 0203 	and.w	r2, r3, #3
 8002620:	69fb      	ldr	r3, [r7, #28]
 8002622:	005b      	lsls	r3, r3, #1
 8002624:	fa02 f303 	lsl.w	r3, r2, r3
 8002628:	69ba      	ldr	r2, [r7, #24]
 800262a:	4313      	orrs	r3, r2
 800262c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	69ba      	ldr	r2, [r7, #24]
 8002632:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002634:	683b      	ldr	r3, [r7, #0]
 8002636:	685b      	ldr	r3, [r3, #4]
 8002638:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800263c:	2b00      	cmp	r3, #0
 800263e:	f000 80b4 	beq.w	80027aa <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002642:	2300      	movs	r3, #0
 8002644:	60fb      	str	r3, [r7, #12]
 8002646:	4b60      	ldr	r3, [pc, #384]	; (80027c8 <HAL_GPIO_Init+0x30c>)
 8002648:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800264a:	4a5f      	ldr	r2, [pc, #380]	; (80027c8 <HAL_GPIO_Init+0x30c>)
 800264c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002650:	6453      	str	r3, [r2, #68]	; 0x44
 8002652:	4b5d      	ldr	r3, [pc, #372]	; (80027c8 <HAL_GPIO_Init+0x30c>)
 8002654:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002656:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800265a:	60fb      	str	r3, [r7, #12]
 800265c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800265e:	4a5b      	ldr	r2, [pc, #364]	; (80027cc <HAL_GPIO_Init+0x310>)
 8002660:	69fb      	ldr	r3, [r7, #28]
 8002662:	089b      	lsrs	r3, r3, #2
 8002664:	3302      	adds	r3, #2
 8002666:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800266a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800266c:	69fb      	ldr	r3, [r7, #28]
 800266e:	f003 0303 	and.w	r3, r3, #3
 8002672:	009b      	lsls	r3, r3, #2
 8002674:	220f      	movs	r2, #15
 8002676:	fa02 f303 	lsl.w	r3, r2, r3
 800267a:	43db      	mvns	r3, r3
 800267c:	69ba      	ldr	r2, [r7, #24]
 800267e:	4013      	ands	r3, r2
 8002680:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	4a52      	ldr	r2, [pc, #328]	; (80027d0 <HAL_GPIO_Init+0x314>)
 8002686:	4293      	cmp	r3, r2
 8002688:	d02b      	beq.n	80026e2 <HAL_GPIO_Init+0x226>
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	4a51      	ldr	r2, [pc, #324]	; (80027d4 <HAL_GPIO_Init+0x318>)
 800268e:	4293      	cmp	r3, r2
 8002690:	d025      	beq.n	80026de <HAL_GPIO_Init+0x222>
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	4a50      	ldr	r2, [pc, #320]	; (80027d8 <HAL_GPIO_Init+0x31c>)
 8002696:	4293      	cmp	r3, r2
 8002698:	d01f      	beq.n	80026da <HAL_GPIO_Init+0x21e>
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	4a4f      	ldr	r2, [pc, #316]	; (80027dc <HAL_GPIO_Init+0x320>)
 800269e:	4293      	cmp	r3, r2
 80026a0:	d019      	beq.n	80026d6 <HAL_GPIO_Init+0x21a>
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	4a4e      	ldr	r2, [pc, #312]	; (80027e0 <HAL_GPIO_Init+0x324>)
 80026a6:	4293      	cmp	r3, r2
 80026a8:	d013      	beq.n	80026d2 <HAL_GPIO_Init+0x216>
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	4a4d      	ldr	r2, [pc, #308]	; (80027e4 <HAL_GPIO_Init+0x328>)
 80026ae:	4293      	cmp	r3, r2
 80026b0:	d00d      	beq.n	80026ce <HAL_GPIO_Init+0x212>
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	4a4c      	ldr	r2, [pc, #304]	; (80027e8 <HAL_GPIO_Init+0x32c>)
 80026b6:	4293      	cmp	r3, r2
 80026b8:	d007      	beq.n	80026ca <HAL_GPIO_Init+0x20e>
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	4a4b      	ldr	r2, [pc, #300]	; (80027ec <HAL_GPIO_Init+0x330>)
 80026be:	4293      	cmp	r3, r2
 80026c0:	d101      	bne.n	80026c6 <HAL_GPIO_Init+0x20a>
 80026c2:	2307      	movs	r3, #7
 80026c4:	e00e      	b.n	80026e4 <HAL_GPIO_Init+0x228>
 80026c6:	2308      	movs	r3, #8
 80026c8:	e00c      	b.n	80026e4 <HAL_GPIO_Init+0x228>
 80026ca:	2306      	movs	r3, #6
 80026cc:	e00a      	b.n	80026e4 <HAL_GPIO_Init+0x228>
 80026ce:	2305      	movs	r3, #5
 80026d0:	e008      	b.n	80026e4 <HAL_GPIO_Init+0x228>
 80026d2:	2304      	movs	r3, #4
 80026d4:	e006      	b.n	80026e4 <HAL_GPIO_Init+0x228>
 80026d6:	2303      	movs	r3, #3
 80026d8:	e004      	b.n	80026e4 <HAL_GPIO_Init+0x228>
 80026da:	2302      	movs	r3, #2
 80026dc:	e002      	b.n	80026e4 <HAL_GPIO_Init+0x228>
 80026de:	2301      	movs	r3, #1
 80026e0:	e000      	b.n	80026e4 <HAL_GPIO_Init+0x228>
 80026e2:	2300      	movs	r3, #0
 80026e4:	69fa      	ldr	r2, [r7, #28]
 80026e6:	f002 0203 	and.w	r2, r2, #3
 80026ea:	0092      	lsls	r2, r2, #2
 80026ec:	4093      	lsls	r3, r2
 80026ee:	69ba      	ldr	r2, [r7, #24]
 80026f0:	4313      	orrs	r3, r2
 80026f2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80026f4:	4935      	ldr	r1, [pc, #212]	; (80027cc <HAL_GPIO_Init+0x310>)
 80026f6:	69fb      	ldr	r3, [r7, #28]
 80026f8:	089b      	lsrs	r3, r3, #2
 80026fa:	3302      	adds	r3, #2
 80026fc:	69ba      	ldr	r2, [r7, #24]
 80026fe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002702:	4b3b      	ldr	r3, [pc, #236]	; (80027f0 <HAL_GPIO_Init+0x334>)
 8002704:	689b      	ldr	r3, [r3, #8]
 8002706:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002708:	693b      	ldr	r3, [r7, #16]
 800270a:	43db      	mvns	r3, r3
 800270c:	69ba      	ldr	r2, [r7, #24]
 800270e:	4013      	ands	r3, r2
 8002710:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002712:	683b      	ldr	r3, [r7, #0]
 8002714:	685b      	ldr	r3, [r3, #4]
 8002716:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800271a:	2b00      	cmp	r3, #0
 800271c:	d003      	beq.n	8002726 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800271e:	69ba      	ldr	r2, [r7, #24]
 8002720:	693b      	ldr	r3, [r7, #16]
 8002722:	4313      	orrs	r3, r2
 8002724:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002726:	4a32      	ldr	r2, [pc, #200]	; (80027f0 <HAL_GPIO_Init+0x334>)
 8002728:	69bb      	ldr	r3, [r7, #24]
 800272a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800272c:	4b30      	ldr	r3, [pc, #192]	; (80027f0 <HAL_GPIO_Init+0x334>)
 800272e:	68db      	ldr	r3, [r3, #12]
 8002730:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002732:	693b      	ldr	r3, [r7, #16]
 8002734:	43db      	mvns	r3, r3
 8002736:	69ba      	ldr	r2, [r7, #24]
 8002738:	4013      	ands	r3, r2
 800273a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800273c:	683b      	ldr	r3, [r7, #0]
 800273e:	685b      	ldr	r3, [r3, #4]
 8002740:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002744:	2b00      	cmp	r3, #0
 8002746:	d003      	beq.n	8002750 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002748:	69ba      	ldr	r2, [r7, #24]
 800274a:	693b      	ldr	r3, [r7, #16]
 800274c:	4313      	orrs	r3, r2
 800274e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002750:	4a27      	ldr	r2, [pc, #156]	; (80027f0 <HAL_GPIO_Init+0x334>)
 8002752:	69bb      	ldr	r3, [r7, #24]
 8002754:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002756:	4b26      	ldr	r3, [pc, #152]	; (80027f0 <HAL_GPIO_Init+0x334>)
 8002758:	685b      	ldr	r3, [r3, #4]
 800275a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800275c:	693b      	ldr	r3, [r7, #16]
 800275e:	43db      	mvns	r3, r3
 8002760:	69ba      	ldr	r2, [r7, #24]
 8002762:	4013      	ands	r3, r2
 8002764:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002766:	683b      	ldr	r3, [r7, #0]
 8002768:	685b      	ldr	r3, [r3, #4]
 800276a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800276e:	2b00      	cmp	r3, #0
 8002770:	d003      	beq.n	800277a <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8002772:	69ba      	ldr	r2, [r7, #24]
 8002774:	693b      	ldr	r3, [r7, #16]
 8002776:	4313      	orrs	r3, r2
 8002778:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800277a:	4a1d      	ldr	r2, [pc, #116]	; (80027f0 <HAL_GPIO_Init+0x334>)
 800277c:	69bb      	ldr	r3, [r7, #24]
 800277e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002780:	4b1b      	ldr	r3, [pc, #108]	; (80027f0 <HAL_GPIO_Init+0x334>)
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002786:	693b      	ldr	r3, [r7, #16]
 8002788:	43db      	mvns	r3, r3
 800278a:	69ba      	ldr	r2, [r7, #24]
 800278c:	4013      	ands	r3, r2
 800278e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002790:	683b      	ldr	r3, [r7, #0]
 8002792:	685b      	ldr	r3, [r3, #4]
 8002794:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002798:	2b00      	cmp	r3, #0
 800279a:	d003      	beq.n	80027a4 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 800279c:	69ba      	ldr	r2, [r7, #24]
 800279e:	693b      	ldr	r3, [r7, #16]
 80027a0:	4313      	orrs	r3, r2
 80027a2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80027a4:	4a12      	ldr	r2, [pc, #72]	; (80027f0 <HAL_GPIO_Init+0x334>)
 80027a6:	69bb      	ldr	r3, [r7, #24]
 80027a8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80027aa:	69fb      	ldr	r3, [r7, #28]
 80027ac:	3301      	adds	r3, #1
 80027ae:	61fb      	str	r3, [r7, #28]
 80027b0:	69fb      	ldr	r3, [r7, #28]
 80027b2:	2b0f      	cmp	r3, #15
 80027b4:	f67f ae90 	bls.w	80024d8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80027b8:	bf00      	nop
 80027ba:	bf00      	nop
 80027bc:	3724      	adds	r7, #36	; 0x24
 80027be:	46bd      	mov	sp, r7
 80027c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027c4:	4770      	bx	lr
 80027c6:	bf00      	nop
 80027c8:	40023800 	.word	0x40023800
 80027cc:	40013800 	.word	0x40013800
 80027d0:	40020000 	.word	0x40020000
 80027d4:	40020400 	.word	0x40020400
 80027d8:	40020800 	.word	0x40020800
 80027dc:	40020c00 	.word	0x40020c00
 80027e0:	40021000 	.word	0x40021000
 80027e4:	40021400 	.word	0x40021400
 80027e8:	40021800 	.word	0x40021800
 80027ec:	40021c00 	.word	0x40021c00
 80027f0:	40013c00 	.word	0x40013c00

080027f4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80027f4:	b480      	push	{r7}
 80027f6:	b083      	sub	sp, #12
 80027f8:	af00      	add	r7, sp, #0
 80027fa:	6078      	str	r0, [r7, #4]
 80027fc:	460b      	mov	r3, r1
 80027fe:	807b      	strh	r3, [r7, #2]
 8002800:	4613      	mov	r3, r2
 8002802:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002804:	787b      	ldrb	r3, [r7, #1]
 8002806:	2b00      	cmp	r3, #0
 8002808:	d003      	beq.n	8002812 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800280a:	887a      	ldrh	r2, [r7, #2]
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002810:	e003      	b.n	800281a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002812:	887b      	ldrh	r3, [r7, #2]
 8002814:	041a      	lsls	r2, r3, #16
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	619a      	str	r2, [r3, #24]
}
 800281a:	bf00      	nop
 800281c:	370c      	adds	r7, #12
 800281e:	46bd      	mov	sp, r7
 8002820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002824:	4770      	bx	lr
	...

08002828 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002828:	b580      	push	{r7, lr}
 800282a:	b084      	sub	sp, #16
 800282c:	af00      	add	r7, sp, #0
 800282e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	2b00      	cmp	r3, #0
 8002834:	d101      	bne.n	800283a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002836:	2301      	movs	r3, #1
 8002838:	e12b      	b.n	8002a92 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002840:	b2db      	uxtb	r3, r3
 8002842:	2b00      	cmp	r3, #0
 8002844:	d106      	bne.n	8002854 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	2200      	movs	r2, #0
 800284a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800284e:	6878      	ldr	r0, [r7, #4]
 8002850:	f7ff f8ba 	bl	80019c8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	2224      	movs	r2, #36	; 0x24
 8002858:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	681a      	ldr	r2, [r3, #0]
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	f022 0201 	bic.w	r2, r2, #1
 800286a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	681a      	ldr	r2, [r3, #0]
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800287a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	681a      	ldr	r2, [r3, #0]
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800288a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800288c:	f002 f956 	bl	8004b3c <HAL_RCC_GetPCLK1Freq>
 8002890:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	685b      	ldr	r3, [r3, #4]
 8002896:	4a81      	ldr	r2, [pc, #516]	; (8002a9c <HAL_I2C_Init+0x274>)
 8002898:	4293      	cmp	r3, r2
 800289a:	d807      	bhi.n	80028ac <HAL_I2C_Init+0x84>
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	4a80      	ldr	r2, [pc, #512]	; (8002aa0 <HAL_I2C_Init+0x278>)
 80028a0:	4293      	cmp	r3, r2
 80028a2:	bf94      	ite	ls
 80028a4:	2301      	movls	r3, #1
 80028a6:	2300      	movhi	r3, #0
 80028a8:	b2db      	uxtb	r3, r3
 80028aa:	e006      	b.n	80028ba <HAL_I2C_Init+0x92>
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	4a7d      	ldr	r2, [pc, #500]	; (8002aa4 <HAL_I2C_Init+0x27c>)
 80028b0:	4293      	cmp	r3, r2
 80028b2:	bf94      	ite	ls
 80028b4:	2301      	movls	r3, #1
 80028b6:	2300      	movhi	r3, #0
 80028b8:	b2db      	uxtb	r3, r3
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d001      	beq.n	80028c2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80028be:	2301      	movs	r3, #1
 80028c0:	e0e7      	b.n	8002a92 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80028c2:	68fb      	ldr	r3, [r7, #12]
 80028c4:	4a78      	ldr	r2, [pc, #480]	; (8002aa8 <HAL_I2C_Init+0x280>)
 80028c6:	fba2 2303 	umull	r2, r3, r2, r3
 80028ca:	0c9b      	lsrs	r3, r3, #18
 80028cc:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	685b      	ldr	r3, [r3, #4]
 80028d4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	68ba      	ldr	r2, [r7, #8]
 80028de:	430a      	orrs	r2, r1
 80028e0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	6a1b      	ldr	r3, [r3, #32]
 80028e8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	685b      	ldr	r3, [r3, #4]
 80028f0:	4a6a      	ldr	r2, [pc, #424]	; (8002a9c <HAL_I2C_Init+0x274>)
 80028f2:	4293      	cmp	r3, r2
 80028f4:	d802      	bhi.n	80028fc <HAL_I2C_Init+0xd4>
 80028f6:	68bb      	ldr	r3, [r7, #8]
 80028f8:	3301      	adds	r3, #1
 80028fa:	e009      	b.n	8002910 <HAL_I2C_Init+0xe8>
 80028fc:	68bb      	ldr	r3, [r7, #8]
 80028fe:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002902:	fb02 f303 	mul.w	r3, r2, r3
 8002906:	4a69      	ldr	r2, [pc, #420]	; (8002aac <HAL_I2C_Init+0x284>)
 8002908:	fba2 2303 	umull	r2, r3, r2, r3
 800290c:	099b      	lsrs	r3, r3, #6
 800290e:	3301      	adds	r3, #1
 8002910:	687a      	ldr	r2, [r7, #4]
 8002912:	6812      	ldr	r2, [r2, #0]
 8002914:	430b      	orrs	r3, r1
 8002916:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	69db      	ldr	r3, [r3, #28]
 800291e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002922:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	685b      	ldr	r3, [r3, #4]
 800292a:	495c      	ldr	r1, [pc, #368]	; (8002a9c <HAL_I2C_Init+0x274>)
 800292c:	428b      	cmp	r3, r1
 800292e:	d819      	bhi.n	8002964 <HAL_I2C_Init+0x13c>
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	1e59      	subs	r1, r3, #1
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	685b      	ldr	r3, [r3, #4]
 8002938:	005b      	lsls	r3, r3, #1
 800293a:	fbb1 f3f3 	udiv	r3, r1, r3
 800293e:	1c59      	adds	r1, r3, #1
 8002940:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002944:	400b      	ands	r3, r1
 8002946:	2b00      	cmp	r3, #0
 8002948:	d00a      	beq.n	8002960 <HAL_I2C_Init+0x138>
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	1e59      	subs	r1, r3, #1
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	685b      	ldr	r3, [r3, #4]
 8002952:	005b      	lsls	r3, r3, #1
 8002954:	fbb1 f3f3 	udiv	r3, r1, r3
 8002958:	3301      	adds	r3, #1
 800295a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800295e:	e051      	b.n	8002a04 <HAL_I2C_Init+0x1dc>
 8002960:	2304      	movs	r3, #4
 8002962:	e04f      	b.n	8002a04 <HAL_I2C_Init+0x1dc>
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	689b      	ldr	r3, [r3, #8]
 8002968:	2b00      	cmp	r3, #0
 800296a:	d111      	bne.n	8002990 <HAL_I2C_Init+0x168>
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	1e58      	subs	r0, r3, #1
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	6859      	ldr	r1, [r3, #4]
 8002974:	460b      	mov	r3, r1
 8002976:	005b      	lsls	r3, r3, #1
 8002978:	440b      	add	r3, r1
 800297a:	fbb0 f3f3 	udiv	r3, r0, r3
 800297e:	3301      	adds	r3, #1
 8002980:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002984:	2b00      	cmp	r3, #0
 8002986:	bf0c      	ite	eq
 8002988:	2301      	moveq	r3, #1
 800298a:	2300      	movne	r3, #0
 800298c:	b2db      	uxtb	r3, r3
 800298e:	e012      	b.n	80029b6 <HAL_I2C_Init+0x18e>
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	1e58      	subs	r0, r3, #1
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	6859      	ldr	r1, [r3, #4]
 8002998:	460b      	mov	r3, r1
 800299a:	009b      	lsls	r3, r3, #2
 800299c:	440b      	add	r3, r1
 800299e:	0099      	lsls	r1, r3, #2
 80029a0:	440b      	add	r3, r1
 80029a2:	fbb0 f3f3 	udiv	r3, r0, r3
 80029a6:	3301      	adds	r3, #1
 80029a8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	bf0c      	ite	eq
 80029b0:	2301      	moveq	r3, #1
 80029b2:	2300      	movne	r3, #0
 80029b4:	b2db      	uxtb	r3, r3
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d001      	beq.n	80029be <HAL_I2C_Init+0x196>
 80029ba:	2301      	movs	r3, #1
 80029bc:	e022      	b.n	8002a04 <HAL_I2C_Init+0x1dc>
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	689b      	ldr	r3, [r3, #8]
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d10e      	bne.n	80029e4 <HAL_I2C_Init+0x1bc>
 80029c6:	68fb      	ldr	r3, [r7, #12]
 80029c8:	1e58      	subs	r0, r3, #1
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	6859      	ldr	r1, [r3, #4]
 80029ce:	460b      	mov	r3, r1
 80029d0:	005b      	lsls	r3, r3, #1
 80029d2:	440b      	add	r3, r1
 80029d4:	fbb0 f3f3 	udiv	r3, r0, r3
 80029d8:	3301      	adds	r3, #1
 80029da:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80029de:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80029e2:	e00f      	b.n	8002a04 <HAL_I2C_Init+0x1dc>
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	1e58      	subs	r0, r3, #1
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	6859      	ldr	r1, [r3, #4]
 80029ec:	460b      	mov	r3, r1
 80029ee:	009b      	lsls	r3, r3, #2
 80029f0:	440b      	add	r3, r1
 80029f2:	0099      	lsls	r1, r3, #2
 80029f4:	440b      	add	r3, r1
 80029f6:	fbb0 f3f3 	udiv	r3, r0, r3
 80029fa:	3301      	adds	r3, #1
 80029fc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002a00:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002a04:	6879      	ldr	r1, [r7, #4]
 8002a06:	6809      	ldr	r1, [r1, #0]
 8002a08:	4313      	orrs	r3, r2
 8002a0a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	69da      	ldr	r2, [r3, #28]
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	6a1b      	ldr	r3, [r3, #32]
 8002a1e:	431a      	orrs	r2, r3
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	430a      	orrs	r2, r1
 8002a26:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	689b      	ldr	r3, [r3, #8]
 8002a2e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002a32:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002a36:	687a      	ldr	r2, [r7, #4]
 8002a38:	6911      	ldr	r1, [r2, #16]
 8002a3a:	687a      	ldr	r2, [r7, #4]
 8002a3c:	68d2      	ldr	r2, [r2, #12]
 8002a3e:	4311      	orrs	r1, r2
 8002a40:	687a      	ldr	r2, [r7, #4]
 8002a42:	6812      	ldr	r2, [r2, #0]
 8002a44:	430b      	orrs	r3, r1
 8002a46:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	68db      	ldr	r3, [r3, #12]
 8002a4e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	695a      	ldr	r2, [r3, #20]
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	699b      	ldr	r3, [r3, #24]
 8002a5a:	431a      	orrs	r2, r3
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	430a      	orrs	r2, r1
 8002a62:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	681a      	ldr	r2, [r3, #0]
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	f042 0201 	orr.w	r2, r2, #1
 8002a72:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	2200      	movs	r2, #0
 8002a78:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	2220      	movs	r2, #32
 8002a7e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	2200      	movs	r2, #0
 8002a86:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	2200      	movs	r2, #0
 8002a8c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002a90:	2300      	movs	r3, #0
}
 8002a92:	4618      	mov	r0, r3
 8002a94:	3710      	adds	r7, #16
 8002a96:	46bd      	mov	sp, r7
 8002a98:	bd80      	pop	{r7, pc}
 8002a9a:	bf00      	nop
 8002a9c:	000186a0 	.word	0x000186a0
 8002aa0:	001e847f 	.word	0x001e847f
 8002aa4:	003d08ff 	.word	0x003d08ff
 8002aa8:	431bde83 	.word	0x431bde83
 8002aac:	10624dd3 	.word	0x10624dd3

08002ab0 <I2C_Flush_DR>:
  * @brief  I2C data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_DR(I2C_HandleTypeDef *hi2c)
{
 8002ab0:	b480      	push	{r7}
 8002ab2:	b083      	sub	sp, #12
 8002ab4:	af00      	add	r7, sp, #0
 8002ab6:	6078      	str	r0, [r7, #4]
  /* Write a dummy data in DR to clear TXE flag */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) != RESET)
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	695b      	ldr	r3, [r3, #20]
 8002abe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002ac2:	2b80      	cmp	r3, #128	; 0x80
 8002ac4:	d103      	bne.n	8002ace <I2C_Flush_DR+0x1e>
  {
    hi2c->Instance->DR = 0x00U;
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	2200      	movs	r2, #0
 8002acc:	611a      	str	r2, [r3, #16]
  }
}
 8002ace:	bf00      	nop
 8002ad0:	370c      	adds	r7, #12
 8002ad2:	46bd      	mov	sp, r7
 8002ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ad8:	4770      	bx	lr

08002ada <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8002ada:	b580      	push	{r7, lr}
 8002adc:	b088      	sub	sp, #32
 8002ade:	af00      	add	r7, sp, #0
 8002ae0:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 8002ae2:	2300      	movs	r3, #0
 8002ae4:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	685b      	ldr	r3, [r3, #4]
 8002aec:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002af2:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002afa:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002b02:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8002b04:	7bfb      	ldrb	r3, [r7, #15]
 8002b06:	2b10      	cmp	r3, #16
 8002b08:	d003      	beq.n	8002b12 <HAL_I2C_EV_IRQHandler+0x38>
 8002b0a:	7bfb      	ldrb	r3, [r7, #15]
 8002b0c:	2b40      	cmp	r3, #64	; 0x40
 8002b0e:	f040 80b1 	bne.w	8002c74 <HAL_I2C_EV_IRQHandler+0x19a>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	699b      	ldr	r3, [r3, #24]
 8002b18:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	695b      	ldr	r3, [r3, #20]
 8002b20:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 8002b22:	69fb      	ldr	r3, [r7, #28]
 8002b24:	f003 0301 	and.w	r3, r3, #1
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	d10d      	bne.n	8002b48 <HAL_I2C_EV_IRQHandler+0x6e>
 8002b2c:	693b      	ldr	r3, [r7, #16]
 8002b2e:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8002b32:	d003      	beq.n	8002b3c <HAL_I2C_EV_IRQHandler+0x62>
 8002b34:	693b      	ldr	r3, [r7, #16]
 8002b36:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8002b3a:	d101      	bne.n	8002b40 <HAL_I2C_EV_IRQHandler+0x66>
 8002b3c:	2301      	movs	r3, #1
 8002b3e:	e000      	b.n	8002b42 <HAL_I2C_EV_IRQHandler+0x68>
 8002b40:	2300      	movs	r3, #0
 8002b42:	2b01      	cmp	r3, #1
 8002b44:	f000 8114 	beq.w	8002d70 <HAL_I2C_EV_IRQHandler+0x296>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002b48:	69fb      	ldr	r3, [r7, #28]
 8002b4a:	f003 0301 	and.w	r3, r3, #1
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d00b      	beq.n	8002b6a <HAL_I2C_EV_IRQHandler+0x90>
 8002b52:	697b      	ldr	r3, [r7, #20]
 8002b54:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	d006      	beq.n	8002b6a <HAL_I2C_EV_IRQHandler+0x90>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 8002b5c:	6878      	ldr	r0, [r7, #4]
 8002b5e:	f001 fb61 	bl	8004224 <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 8002b62:	6878      	ldr	r0, [r7, #4]
 8002b64:	f000 fcdb 	bl	800351e <I2C_Master_SB>
 8002b68:	e083      	b.n	8002c72 <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002b6a:	69fb      	ldr	r3, [r7, #28]
 8002b6c:	f003 0308 	and.w	r3, r3, #8
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	d008      	beq.n	8002b86 <HAL_I2C_EV_IRQHandler+0xac>
 8002b74:	697b      	ldr	r3, [r7, #20]
 8002b76:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d003      	beq.n	8002b86 <HAL_I2C_EV_IRQHandler+0xac>
    {
      I2C_Master_ADD10(hi2c);
 8002b7e:	6878      	ldr	r0, [r7, #4]
 8002b80:	f000 fd53 	bl	800362a <I2C_Master_ADD10>
 8002b84:	e075      	b.n	8002c72 <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002b86:	69fb      	ldr	r3, [r7, #28]
 8002b88:	f003 0302 	and.w	r3, r3, #2
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	d008      	beq.n	8002ba2 <HAL_I2C_EV_IRQHandler+0xc8>
 8002b90:	697b      	ldr	r3, [r7, #20]
 8002b92:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d003      	beq.n	8002ba2 <HAL_I2C_EV_IRQHandler+0xc8>
    {
      I2C_Master_ADDR(hi2c);
 8002b9a:	6878      	ldr	r0, [r7, #4]
 8002b9c:	f000 fd6f 	bl	800367e <I2C_Master_ADDR>
 8002ba0:	e067      	b.n	8002c72 <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 8002ba2:	69bb      	ldr	r3, [r7, #24]
 8002ba4:	f003 0304 	and.w	r3, r3, #4
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	d036      	beq.n	8002c1a <HAL_I2C_EV_IRQHandler+0x140>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	685b      	ldr	r3, [r3, #4]
 8002bb2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002bb6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002bba:	f000 80db 	beq.w	8002d74 <HAL_I2C_EV_IRQHandler+0x29a>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002bbe:	69fb      	ldr	r3, [r7, #28]
 8002bc0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	d00d      	beq.n	8002be4 <HAL_I2C_EV_IRQHandler+0x10a>
 8002bc8:	697b      	ldr	r3, [r7, #20]
 8002bca:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d008      	beq.n	8002be4 <HAL_I2C_EV_IRQHandler+0x10a>
 8002bd2:	69fb      	ldr	r3, [r7, #28]
 8002bd4:	f003 0304 	and.w	r3, r3, #4
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	d103      	bne.n	8002be4 <HAL_I2C_EV_IRQHandler+0x10a>
        {
          I2C_MasterTransmit_TXE(hi2c);
 8002bdc:	6878      	ldr	r0, [r7, #4]
 8002bde:	f000 f937 	bl	8002e50 <I2C_MasterTransmit_TXE>
 8002be2:	e046      	b.n	8002c72 <HAL_I2C_EV_IRQHandler+0x198>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002be4:	69fb      	ldr	r3, [r7, #28]
 8002be6:	f003 0304 	and.w	r3, r3, #4
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	f000 80c2 	beq.w	8002d74 <HAL_I2C_EV_IRQHandler+0x29a>
 8002bf0:	697b      	ldr	r3, [r7, #20]
 8002bf2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	f000 80bc 	beq.w	8002d74 <HAL_I2C_EV_IRQHandler+0x29a>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8002bfc:	7bbb      	ldrb	r3, [r7, #14]
 8002bfe:	2b21      	cmp	r3, #33	; 0x21
 8002c00:	d103      	bne.n	8002c0a <HAL_I2C_EV_IRQHandler+0x130>
          {
            I2C_MasterTransmit_BTF(hi2c);
 8002c02:	6878      	ldr	r0, [r7, #4]
 8002c04:	f000 f9c0 	bl	8002f88 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002c08:	e0b4      	b.n	8002d74 <HAL_I2C_EV_IRQHandler+0x29a>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 8002c0a:	7bfb      	ldrb	r3, [r7, #15]
 8002c0c:	2b40      	cmp	r3, #64	; 0x40
 8002c0e:	f040 80b1 	bne.w	8002d74 <HAL_I2C_EV_IRQHandler+0x29a>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 8002c12:	6878      	ldr	r0, [r7, #4]
 8002c14:	f000 fa2e 	bl	8003074 <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002c18:	e0ac      	b.n	8002d74 <HAL_I2C_EV_IRQHandler+0x29a>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	685b      	ldr	r3, [r3, #4]
 8002c20:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002c24:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002c28:	f000 80a4 	beq.w	8002d74 <HAL_I2C_EV_IRQHandler+0x29a>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002c2c:	69fb      	ldr	r3, [r7, #28]
 8002c2e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d00d      	beq.n	8002c52 <HAL_I2C_EV_IRQHandler+0x178>
 8002c36:	697b      	ldr	r3, [r7, #20]
 8002c38:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	d008      	beq.n	8002c52 <HAL_I2C_EV_IRQHandler+0x178>
 8002c40:	69fb      	ldr	r3, [r7, #28]
 8002c42:	f003 0304 	and.w	r3, r3, #4
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d103      	bne.n	8002c52 <HAL_I2C_EV_IRQHandler+0x178>
        {
          I2C_MasterReceive_RXNE(hi2c);
 8002c4a:	6878      	ldr	r0, [r7, #4]
 8002c4c:	f000 faaa 	bl	80031a4 <I2C_MasterReceive_RXNE>
 8002c50:	e00f      	b.n	8002c72 <HAL_I2C_EV_IRQHandler+0x198>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002c52:	69fb      	ldr	r3, [r7, #28]
 8002c54:	f003 0304 	and.w	r3, r3, #4
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	f000 808b 	beq.w	8002d74 <HAL_I2C_EV_IRQHandler+0x29a>
 8002c5e:	697b      	ldr	r3, [r7, #20]
 8002c60:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	f000 8085 	beq.w	8002d74 <HAL_I2C_EV_IRQHandler+0x29a>
        {
          I2C_MasterReceive_BTF(hi2c);
 8002c6a:	6878      	ldr	r0, [r7, #4]
 8002c6c:	f000 fb62 	bl	8003334 <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002c70:	e080      	b.n	8002d74 <HAL_I2C_EV_IRQHandler+0x29a>
 8002c72:	e07f      	b.n	8002d74 <HAL_I2C_EV_IRQHandler+0x29a>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	d004      	beq.n	8002c86 <HAL_I2C_EV_IRQHandler+0x1ac>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	695b      	ldr	r3, [r3, #20]
 8002c82:	61fb      	str	r3, [r7, #28]
 8002c84:	e007      	b.n	8002c96 <HAL_I2C_EV_IRQHandler+0x1bc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	699b      	ldr	r3, [r3, #24]
 8002c8c:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	695b      	ldr	r3, [r3, #20]
 8002c94:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002c96:	69fb      	ldr	r3, [r7, #28]
 8002c98:	f003 0302 	and.w	r3, r3, #2
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	d011      	beq.n	8002cc4 <HAL_I2C_EV_IRQHandler+0x1ea>
 8002ca0:	697b      	ldr	r3, [r7, #20]
 8002ca2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d00c      	beq.n	8002cc4 <HAL_I2C_EV_IRQHandler+0x1ea>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d003      	beq.n	8002cba <HAL_I2C_EV_IRQHandler+0x1e0>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	699b      	ldr	r3, [r3, #24]
 8002cb8:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 8002cba:	69b9      	ldr	r1, [r7, #24]
 8002cbc:	6878      	ldr	r0, [r7, #4]
 8002cbe:	f000 ff2d 	bl	8003b1c <I2C_Slave_ADDR>
 8002cc2:	e05a      	b.n	8002d7a <HAL_I2C_EV_IRQHandler+0x2a0>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002cc4:	69fb      	ldr	r3, [r7, #28]
 8002cc6:	f003 0310 	and.w	r3, r3, #16
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d008      	beq.n	8002ce0 <HAL_I2C_EV_IRQHandler+0x206>
 8002cce:	697b      	ldr	r3, [r7, #20]
 8002cd0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	d003      	beq.n	8002ce0 <HAL_I2C_EV_IRQHandler+0x206>
    {
      I2C_Slave_STOPF(hi2c);
 8002cd8:	6878      	ldr	r0, [r7, #4]
 8002cda:	f000 ff67 	bl	8003bac <I2C_Slave_STOPF>
 8002cde:	e04c      	b.n	8002d7a <HAL_I2C_EV_IRQHandler+0x2a0>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8002ce0:	7bbb      	ldrb	r3, [r7, #14]
 8002ce2:	2b21      	cmp	r3, #33	; 0x21
 8002ce4:	d002      	beq.n	8002cec <HAL_I2C_EV_IRQHandler+0x212>
 8002ce6:	7bbb      	ldrb	r3, [r7, #14]
 8002ce8:	2b29      	cmp	r3, #41	; 0x29
 8002cea:	d120      	bne.n	8002d2e <HAL_I2C_EV_IRQHandler+0x254>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002cec:	69fb      	ldr	r3, [r7, #28]
 8002cee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d00d      	beq.n	8002d12 <HAL_I2C_EV_IRQHandler+0x238>
 8002cf6:	697b      	ldr	r3, [r7, #20]
 8002cf8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	d008      	beq.n	8002d12 <HAL_I2C_EV_IRQHandler+0x238>
 8002d00:	69fb      	ldr	r3, [r7, #28]
 8002d02:	f003 0304 	and.w	r3, r3, #4
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d103      	bne.n	8002d12 <HAL_I2C_EV_IRQHandler+0x238>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 8002d0a:	6878      	ldr	r0, [r7, #4]
 8002d0c:	f000 fe48 	bl	80039a0 <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002d10:	e032      	b.n	8002d78 <HAL_I2C_EV_IRQHandler+0x29e>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002d12:	69fb      	ldr	r3, [r7, #28]
 8002d14:	f003 0304 	and.w	r3, r3, #4
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	d02d      	beq.n	8002d78 <HAL_I2C_EV_IRQHandler+0x29e>
 8002d1c:	697b      	ldr	r3, [r7, #20]
 8002d1e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d028      	beq.n	8002d78 <HAL_I2C_EV_IRQHandler+0x29e>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 8002d26:	6878      	ldr	r0, [r7, #4]
 8002d28:	f000 fe77 	bl	8003a1a <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002d2c:	e024      	b.n	8002d78 <HAL_I2C_EV_IRQHandler+0x29e>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002d2e:	69fb      	ldr	r3, [r7, #28]
 8002d30:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	d00d      	beq.n	8002d54 <HAL_I2C_EV_IRQHandler+0x27a>
 8002d38:	697b      	ldr	r3, [r7, #20]
 8002d3a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d008      	beq.n	8002d54 <HAL_I2C_EV_IRQHandler+0x27a>
 8002d42:	69fb      	ldr	r3, [r7, #28]
 8002d44:	f003 0304 	and.w	r3, r3, #4
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	d103      	bne.n	8002d54 <HAL_I2C_EV_IRQHandler+0x27a>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 8002d4c:	6878      	ldr	r0, [r7, #4]
 8002d4e:	f000 fe85 	bl	8003a5c <I2C_SlaveReceive_RXNE>
 8002d52:	e012      	b.n	8002d7a <HAL_I2C_EV_IRQHandler+0x2a0>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002d54:	69fb      	ldr	r3, [r7, #28]
 8002d56:	f003 0304 	and.w	r3, r3, #4
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d00d      	beq.n	8002d7a <HAL_I2C_EV_IRQHandler+0x2a0>
 8002d5e:	697b      	ldr	r3, [r7, #20]
 8002d60:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	d008      	beq.n	8002d7a <HAL_I2C_EV_IRQHandler+0x2a0>
      {
        I2C_SlaveReceive_BTF(hi2c);
 8002d68:	6878      	ldr	r0, [r7, #4]
 8002d6a:	f000 feb5 	bl	8003ad8 <I2C_SlaveReceive_BTF>
 8002d6e:	e004      	b.n	8002d7a <HAL_I2C_EV_IRQHandler+0x2a0>
      return;
 8002d70:	bf00      	nop
 8002d72:	e002      	b.n	8002d7a <HAL_I2C_EV_IRQHandler+0x2a0>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002d74:	bf00      	nop
 8002d76:	e000      	b.n	8002d7a <HAL_I2C_EV_IRQHandler+0x2a0>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002d78:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 8002d7a:	3720      	adds	r7, #32
 8002d7c:	46bd      	mov	sp, r7
 8002d7e:	bd80      	pop	{r7, pc}

08002d80 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002d80:	b480      	push	{r7}
 8002d82:	b083      	sub	sp, #12
 8002d84:	af00      	add	r7, sp, #0
 8002d86:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8002d88:	bf00      	nop
 8002d8a:	370c      	adds	r7, #12
 8002d8c:	46bd      	mov	sp, r7
 8002d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d92:	4770      	bx	lr

08002d94 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002d94:	b480      	push	{r7}
 8002d96:	b083      	sub	sp, #12
 8002d98:	af00      	add	r7, sp, #0
 8002d9a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8002d9c:	bf00      	nop
 8002d9e:	370c      	adds	r7, #12
 8002da0:	46bd      	mov	sp, r7
 8002da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002da6:	4770      	bx	lr

08002da8 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002da8:	b480      	push	{r7}
 8002daa:	b083      	sub	sp, #12
 8002dac:	af00      	add	r7, sp, #0
 8002dae:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8002db0:	bf00      	nop
 8002db2:	370c      	adds	r7, #12
 8002db4:	46bd      	mov	sp, r7
 8002db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dba:	4770      	bx	lr

08002dbc <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002dbc:	b480      	push	{r7}
 8002dbe:	b083      	sub	sp, #12
 8002dc0:	af00      	add	r7, sp, #0
 8002dc2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8002dc4:	bf00      	nop
 8002dc6:	370c      	adds	r7, #12
 8002dc8:	46bd      	mov	sp, r7
 8002dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dce:	4770      	bx	lr

08002dd0 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8002dd0:	b480      	push	{r7}
 8002dd2:	b083      	sub	sp, #12
 8002dd4:	af00      	add	r7, sp, #0
 8002dd6:	6078      	str	r0, [r7, #4]
 8002dd8:	460b      	mov	r3, r1
 8002dda:	70fb      	strb	r3, [r7, #3]
 8002ddc:	4613      	mov	r3, r2
 8002dde:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8002de0:	bf00      	nop
 8002de2:	370c      	adds	r7, #12
 8002de4:	46bd      	mov	sp, r7
 8002de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dea:	4770      	bx	lr

08002dec <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002dec:	b480      	push	{r7}
 8002dee:	b083      	sub	sp, #12
 8002df0:	af00      	add	r7, sp, #0
 8002df2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 8002df4:	bf00      	nop
 8002df6:	370c      	adds	r7, #12
 8002df8:	46bd      	mov	sp, r7
 8002dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dfe:	4770      	bx	lr

08002e00 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002e00:	b480      	push	{r7}
 8002e02:	b083      	sub	sp, #12
 8002e04:	af00      	add	r7, sp, #0
 8002e06:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8002e08:	bf00      	nop
 8002e0a:	370c      	adds	r7, #12
 8002e0c:	46bd      	mov	sp, r7
 8002e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e12:	4770      	bx	lr

08002e14 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002e14:	b480      	push	{r7}
 8002e16:	b083      	sub	sp, #12
 8002e18:	af00      	add	r7, sp, #0
 8002e1a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8002e1c:	bf00      	nop
 8002e1e:	370c      	adds	r7, #12
 8002e20:	46bd      	mov	sp, r7
 8002e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e26:	4770      	bx	lr

08002e28 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8002e28:	b480      	push	{r7}
 8002e2a:	b083      	sub	sp, #12
 8002e2c:	af00      	add	r7, sp, #0
 8002e2e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8002e30:	bf00      	nop
 8002e32:	370c      	adds	r7, #12
 8002e34:	46bd      	mov	sp, r7
 8002e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e3a:	4770      	bx	lr

08002e3c <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002e3c:	b480      	push	{r7}
 8002e3e:	b083      	sub	sp, #12
 8002e40:	af00      	add	r7, sp, #0
 8002e42:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8002e44:	bf00      	nop
 8002e46:	370c      	adds	r7, #12
 8002e48:	46bd      	mov	sp, r7
 8002e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e4e:	4770      	bx	lr

08002e50 <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8002e50:	b580      	push	{r7, lr}
 8002e52:	b084      	sub	sp, #16
 8002e54:	af00      	add	r7, sp, #0
 8002e56:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002e5e:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002e66:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e6c:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d150      	bne.n	8002f18 <I2C_MasterTransmit_TXE+0xc8>
 8002e76:	7bfb      	ldrb	r3, [r7, #15]
 8002e78:	2b21      	cmp	r3, #33	; 0x21
 8002e7a:	d14d      	bne.n	8002f18 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8002e7c:	68bb      	ldr	r3, [r7, #8]
 8002e7e:	2b08      	cmp	r3, #8
 8002e80:	d01d      	beq.n	8002ebe <I2C_MasterTransmit_TXE+0x6e>
 8002e82:	68bb      	ldr	r3, [r7, #8]
 8002e84:	2b20      	cmp	r3, #32
 8002e86:	d01a      	beq.n	8002ebe <I2C_MasterTransmit_TXE+0x6e>
 8002e88:	68bb      	ldr	r3, [r7, #8]
 8002e8a:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002e8e:	d016      	beq.n	8002ebe <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	685a      	ldr	r2, [r3, #4]
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002e9e:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	2211      	movs	r2, #17
 8002ea4:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	2200      	movs	r2, #0
 8002eaa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	2220      	movs	r2, #32
 8002eb2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8002eb6:	6878      	ldr	r0, [r7, #4]
 8002eb8:	f7ff ff62 	bl	8002d80 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8002ebc:	e060      	b.n	8002f80 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	685a      	ldr	r2, [r3, #4]
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002ecc:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	681a      	ldr	r2, [r3, #0]
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002edc:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	2200      	movs	r2, #0
 8002ee2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	2220      	movs	r2, #32
 8002ee8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002ef2:	b2db      	uxtb	r3, r3
 8002ef4:	2b40      	cmp	r3, #64	; 0x40
 8002ef6:	d107      	bne.n	8002f08 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	2200      	movs	r2, #0
 8002efc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 8002f00:	6878      	ldr	r0, [r7, #4]
 8002f02:	f7ff ff7d 	bl	8002e00 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8002f06:	e03b      	b.n	8002f80 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	2200      	movs	r2, #0
 8002f0c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8002f10:	6878      	ldr	r0, [r7, #4]
 8002f12:	f7ff ff35 	bl	8002d80 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8002f16:	e033      	b.n	8002f80 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8002f18:	7bfb      	ldrb	r3, [r7, #15]
 8002f1a:	2b21      	cmp	r3, #33	; 0x21
 8002f1c:	d005      	beq.n	8002f2a <I2C_MasterTransmit_TXE+0xda>
 8002f1e:	7bbb      	ldrb	r3, [r7, #14]
 8002f20:	2b40      	cmp	r3, #64	; 0x40
 8002f22:	d12d      	bne.n	8002f80 <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8002f24:	7bfb      	ldrb	r3, [r7, #15]
 8002f26:	2b22      	cmp	r3, #34	; 0x22
 8002f28:	d12a      	bne.n	8002f80 <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f2e:	b29b      	uxth	r3, r3
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	d108      	bne.n	8002f46 <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	685a      	ldr	r2, [r3, #4]
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002f42:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8002f44:	e01c      	b.n	8002f80 <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002f4c:	b2db      	uxtb	r3, r3
 8002f4e:	2b40      	cmp	r3, #64	; 0x40
 8002f50:	d103      	bne.n	8002f5a <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 8002f52:	6878      	ldr	r0, [r7, #4]
 8002f54:	f000 f88e 	bl	8003074 <I2C_MemoryTransmit_TXE_BTF>
}
 8002f58:	e012      	b.n	8002f80 <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f5e:	781a      	ldrb	r2, [r3, #0]
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f6a:	1c5a      	adds	r2, r3, #1
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f74:	b29b      	uxth	r3, r3
 8002f76:	3b01      	subs	r3, #1
 8002f78:	b29a      	uxth	r2, r3
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8002f7e:	e7ff      	b.n	8002f80 <I2C_MasterTransmit_TXE+0x130>
 8002f80:	bf00      	nop
 8002f82:	3710      	adds	r7, #16
 8002f84:	46bd      	mov	sp, r7
 8002f86:	bd80      	pop	{r7, pc}

08002f88 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8002f88:	b580      	push	{r7, lr}
 8002f8a:	b084      	sub	sp, #16
 8002f8c:	af00      	add	r7, sp, #0
 8002f8e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f94:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002f9c:	b2db      	uxtb	r3, r3
 8002f9e:	2b21      	cmp	r3, #33	; 0x21
 8002fa0:	d164      	bne.n	800306c <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002fa6:	b29b      	uxth	r3, r3
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	d012      	beq.n	8002fd2 <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fb0:	781a      	ldrb	r2, [r3, #0]
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fbc:	1c5a      	adds	r2, r3, #1
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002fc6:	b29b      	uxth	r3, r3
 8002fc8:	3b01      	subs	r3, #1
 8002fca:	b29a      	uxth	r2, r3
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 8002fd0:	e04c      	b.n	800306c <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	2b08      	cmp	r3, #8
 8002fd6:	d01d      	beq.n	8003014 <I2C_MasterTransmit_BTF+0x8c>
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	2b20      	cmp	r3, #32
 8002fdc:	d01a      	beq.n	8003014 <I2C_MasterTransmit_BTF+0x8c>
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002fe4:	d016      	beq.n	8003014 <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	685a      	ldr	r2, [r3, #4]
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002ff4:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	2211      	movs	r2, #17
 8002ffa:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	2200      	movs	r2, #0
 8003000:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	2220      	movs	r2, #32
 8003008:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 800300c:	6878      	ldr	r0, [r7, #4]
 800300e:	f7ff feb7 	bl	8002d80 <HAL_I2C_MasterTxCpltCallback>
}
 8003012:	e02b      	b.n	800306c <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	685a      	ldr	r2, [r3, #4]
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003022:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	681a      	ldr	r2, [r3, #0]
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003032:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	2200      	movs	r2, #0
 8003038:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	2220      	movs	r2, #32
 800303e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003048:	b2db      	uxtb	r3, r3
 800304a:	2b40      	cmp	r3, #64	; 0x40
 800304c:	d107      	bne.n	800305e <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	2200      	movs	r2, #0
 8003052:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 8003056:	6878      	ldr	r0, [r7, #4]
 8003058:	f7ff fed2 	bl	8002e00 <HAL_I2C_MemTxCpltCallback>
}
 800305c:	e006      	b.n	800306c <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	2200      	movs	r2, #0
 8003062:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 8003066:	6878      	ldr	r0, [r7, #4]
 8003068:	f7ff fe8a 	bl	8002d80 <HAL_I2C_MasterTxCpltCallback>
}
 800306c:	bf00      	nop
 800306e:	3710      	adds	r7, #16
 8003070:	46bd      	mov	sp, r7
 8003072:	bd80      	pop	{r7, pc}

08003074 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 8003074:	b580      	push	{r7, lr}
 8003076:	b084      	sub	sp, #16
 8003078:	af00      	add	r7, sp, #0
 800307a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003082:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003088:	2b00      	cmp	r3, #0
 800308a:	d11d      	bne.n	80030c8 <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003090:	2b01      	cmp	r3, #1
 8003092:	d10b      	bne.n	80030ac <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003098:	b2da      	uxtb	r2, r3
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80030a4:	1c9a      	adds	r2, r3, #2
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear TXE and BTF flags */
    I2C_Flush_DR(hi2c);
  }
}
 80030aa:	e077      	b.n	800319c <I2C_MemoryTransmit_TXE_BTF+0x128>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80030b0:	b29b      	uxth	r3, r3
 80030b2:	121b      	asrs	r3, r3, #8
 80030b4:	b2da      	uxtb	r2, r3
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80030c0:	1c5a      	adds	r2, r3, #1
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	651a      	str	r2, [r3, #80]	; 0x50
}
 80030c6:	e069      	b.n	800319c <I2C_MemoryTransmit_TXE_BTF+0x128>
  else if (hi2c->EventCount == 1U)
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80030cc:	2b01      	cmp	r3, #1
 80030ce:	d10b      	bne.n	80030e8 <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80030d4:	b2da      	uxtb	r2, r3
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80030e0:	1c5a      	adds	r2, r3, #1
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	651a      	str	r2, [r3, #80]	; 0x50
}
 80030e6:	e059      	b.n	800319c <I2C_MemoryTransmit_TXE_BTF+0x128>
  else if (hi2c->EventCount == 2U)
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80030ec:	2b02      	cmp	r3, #2
 80030ee:	d152      	bne.n	8003196 <I2C_MemoryTransmit_TXE_BTF+0x122>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 80030f0:	7bfb      	ldrb	r3, [r7, #15]
 80030f2:	2b22      	cmp	r3, #34	; 0x22
 80030f4:	d10d      	bne.n	8003112 <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	681a      	ldr	r2, [r3, #0]
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003104:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800310a:	1c5a      	adds	r2, r3, #1
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	651a      	str	r2, [r3, #80]	; 0x50
}
 8003110:	e044      	b.n	800319c <I2C_MemoryTransmit_TXE_BTF+0x128>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003116:	b29b      	uxth	r3, r3
 8003118:	2b00      	cmp	r3, #0
 800311a:	d015      	beq.n	8003148 <I2C_MemoryTransmit_TXE_BTF+0xd4>
 800311c:	7bfb      	ldrb	r3, [r7, #15]
 800311e:	2b21      	cmp	r3, #33	; 0x21
 8003120:	d112      	bne.n	8003148 <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003126:	781a      	ldrb	r2, [r3, #0]
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003132:	1c5a      	adds	r2, r3, #1
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800313c:	b29b      	uxth	r3, r3
 800313e:	3b01      	subs	r3, #1
 8003140:	b29a      	uxth	r2, r3
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8003146:	e029      	b.n	800319c <I2C_MemoryTransmit_TXE_BTF+0x128>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800314c:	b29b      	uxth	r3, r3
 800314e:	2b00      	cmp	r3, #0
 8003150:	d124      	bne.n	800319c <I2C_MemoryTransmit_TXE_BTF+0x128>
 8003152:	7bfb      	ldrb	r3, [r7, #15]
 8003154:	2b21      	cmp	r3, #33	; 0x21
 8003156:	d121      	bne.n	800319c <I2C_MemoryTransmit_TXE_BTF+0x128>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	685a      	ldr	r2, [r3, #4]
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003166:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	681a      	ldr	r2, [r3, #0]
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003176:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	2200      	movs	r2, #0
 800317c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	2220      	movs	r2, #32
 8003182:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	2200      	movs	r2, #0
 800318a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 800318e:	6878      	ldr	r0, [r7, #4]
 8003190:	f7ff fe36 	bl	8002e00 <HAL_I2C_MemTxCpltCallback>
}
 8003194:	e002      	b.n	800319c <I2C_MemoryTransmit_TXE_BTF+0x128>
    I2C_Flush_DR(hi2c);
 8003196:	6878      	ldr	r0, [r7, #4]
 8003198:	f7ff fc8a 	bl	8002ab0 <I2C_Flush_DR>
}
 800319c:	bf00      	nop
 800319e:	3710      	adds	r7, #16
 80031a0:	46bd      	mov	sp, r7
 80031a2:	bd80      	pop	{r7, pc}

080031a4 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 80031a4:	b580      	push	{r7, lr}
 80031a6:	b084      	sub	sp, #16
 80031a8:	af00      	add	r7, sp, #0
 80031aa:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80031b2:	b2db      	uxtb	r3, r3
 80031b4:	2b22      	cmp	r3, #34	; 0x22
 80031b6:	f040 80b9 	bne.w	800332c <I2C_MasterReceive_RXNE+0x188>
  {
    uint32_t tmp;
    uint32_t CurrentXferOptions;

    CurrentXferOptions = hi2c->XferOptions;
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031be:	60fb      	str	r3, [r7, #12]
    tmp = hi2c->XferCount;
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80031c4:	b29b      	uxth	r3, r3
 80031c6:	60bb      	str	r3, [r7, #8]
    if (tmp > 3U)
 80031c8:	68bb      	ldr	r3, [r7, #8]
 80031ca:	2b03      	cmp	r3, #3
 80031cc:	d921      	bls.n	8003212 <I2C_MasterReceive_RXNE+0x6e>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	691a      	ldr	r2, [r3, #16]
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031d8:	b2d2      	uxtb	r2, r2
 80031da:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031e0:	1c5a      	adds	r2, r3, #1
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80031ea:	b29b      	uxth	r3, r3
 80031ec:	3b01      	subs	r3, #1
 80031ee:	b29a      	uxth	r2, r3
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80031f8:	b29b      	uxth	r3, r3
 80031fa:	2b03      	cmp	r3, #3
 80031fc:	f040 8096 	bne.w	800332c <I2C_MasterReceive_RXNE+0x188>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	685a      	ldr	r2, [r3, #4]
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800320e:	605a      	str	r2, [r3, #4]
      /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
         on BTF subroutine if there is a reception delay between N-1 and N byte */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
    }
  }
}
 8003210:	e08c      	b.n	800332c <I2C_MasterReceive_RXNE+0x188>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003216:	2b02      	cmp	r3, #2
 8003218:	d07f      	beq.n	800331a <I2C_MasterReceive_RXNE+0x176>
 800321a:	68bb      	ldr	r3, [r7, #8]
 800321c:	2b01      	cmp	r3, #1
 800321e:	d002      	beq.n	8003226 <I2C_MasterReceive_RXNE+0x82>
 8003220:	68bb      	ldr	r3, [r7, #8]
 8003222:	2b00      	cmp	r3, #0
 8003224:	d179      	bne.n	800331a <I2C_MasterReceive_RXNE+0x176>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8003226:	6878      	ldr	r0, [r7, #4]
 8003228:	f000 ffca 	bl	80041c0 <I2C_WaitOnSTOPRequestThroughIT>
 800322c:	4603      	mov	r3, r0
 800322e:	2b00      	cmp	r3, #0
 8003230:	d14c      	bne.n	80032cc <I2C_MasterReceive_RXNE+0x128>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	681a      	ldr	r2, [r3, #0]
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003240:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	685a      	ldr	r2, [r3, #4]
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003250:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	691a      	ldr	r2, [r3, #16]
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800325c:	b2d2      	uxtb	r2, r2
 800325e:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003264:	1c5a      	adds	r2, r3, #1
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800326e:	b29b      	uxth	r3, r3
 8003270:	3b01      	subs	r3, #1
 8003272:	b29a      	uxth	r2, r3
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	2220      	movs	r2, #32
 800327c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003286:	b2db      	uxtb	r3, r3
 8003288:	2b40      	cmp	r3, #64	; 0x40
 800328a:	d10a      	bne.n	80032a2 <I2C_MasterReceive_RXNE+0xfe>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	2200      	movs	r2, #0
 8003290:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	2200      	movs	r2, #0
 8003298:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 800329a:	6878      	ldr	r0, [r7, #4]
 800329c:	f7ff fdba 	bl	8002e14 <HAL_I2C_MemRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 80032a0:	e044      	b.n	800332c <I2C_MasterReceive_RXNE+0x188>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	2200      	movs	r2, #0
 80032a6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 80032aa:	68fb      	ldr	r3, [r7, #12]
 80032ac:	2b08      	cmp	r3, #8
 80032ae:	d002      	beq.n	80032b6 <I2C_MasterReceive_RXNE+0x112>
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	2b20      	cmp	r3, #32
 80032b4:	d103      	bne.n	80032be <I2C_MasterReceive_RXNE+0x11a>
            hi2c->PreviousState = I2C_STATE_NONE;
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	2200      	movs	r2, #0
 80032ba:	631a      	str	r2, [r3, #48]	; 0x30
 80032bc:	e002      	b.n	80032c4 <I2C_MasterReceive_RXNE+0x120>
            hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	2212      	movs	r2, #18
 80032c2:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 80032c4:	6878      	ldr	r0, [r7, #4]
 80032c6:	f7ff fd65 	bl	8002d94 <HAL_I2C_MasterRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 80032ca:	e02f      	b.n	800332c <I2C_MasterReceive_RXNE+0x188>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	685a      	ldr	r2, [r3, #4]
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80032da:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	691a      	ldr	r2, [r3, #16]
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032e6:	b2d2      	uxtb	r2, r2
 80032e8:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032ee:	1c5a      	adds	r2, r3, #1
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80032f8:	b29b      	uxth	r3, r3
 80032fa:	3b01      	subs	r3, #1
 80032fc:	b29a      	uxth	r2, r3
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	2220      	movs	r2, #32
 8003306:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	2200      	movs	r2, #0
 800330e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 8003312:	6878      	ldr	r0, [r7, #4]
 8003314:	f7ff fd88 	bl	8002e28 <HAL_I2C_ErrorCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8003318:	e008      	b.n	800332c <I2C_MasterReceive_RXNE+0x188>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	685a      	ldr	r2, [r3, #4]
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003328:	605a      	str	r2, [r3, #4]
}
 800332a:	e7ff      	b.n	800332c <I2C_MasterReceive_RXNE+0x188>
 800332c:	bf00      	nop
 800332e:	3710      	adds	r7, #16
 8003330:	46bd      	mov	sp, r7
 8003332:	bd80      	pop	{r7, pc}

08003334 <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8003334:	b580      	push	{r7, lr}
 8003336:	b084      	sub	sp, #16
 8003338:	af00      	add	r7, sp, #0
 800333a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003340:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003346:	b29b      	uxth	r3, r3
 8003348:	2b04      	cmp	r3, #4
 800334a:	d11b      	bne.n	8003384 <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	685a      	ldr	r2, [r3, #4]
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800335a:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	691a      	ldr	r2, [r3, #16]
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003366:	b2d2      	uxtb	r2, r2
 8003368:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800336e:	1c5a      	adds	r2, r3, #1
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003378:	b29b      	uxth	r3, r3
 800337a:	3b01      	subs	r3, #1
 800337c:	b29a      	uxth	r2, r3
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 8003382:	e0c8      	b.n	8003516 <I2C_MasterReceive_BTF+0x1e2>
  else if (hi2c->XferCount == 3U)
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003388:	b29b      	uxth	r3, r3
 800338a:	2b03      	cmp	r3, #3
 800338c:	d129      	bne.n	80033e2 <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	685a      	ldr	r2, [r3, #4]
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800339c:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	2b04      	cmp	r3, #4
 80033a2:	d00a      	beq.n	80033ba <I2C_MasterReceive_BTF+0x86>
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	2b02      	cmp	r3, #2
 80033a8:	d007      	beq.n	80033ba <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	681a      	ldr	r2, [r3, #0]
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80033b8:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	691a      	ldr	r2, [r3, #16]
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033c4:	b2d2      	uxtb	r2, r2
 80033c6:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033cc:	1c5a      	adds	r2, r3, #1
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80033d6:	b29b      	uxth	r3, r3
 80033d8:	3b01      	subs	r3, #1
 80033da:	b29a      	uxth	r2, r3
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80033e0:	e099      	b.n	8003516 <I2C_MasterReceive_BTF+0x1e2>
  else if (hi2c->XferCount == 2U)
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80033e6:	b29b      	uxth	r3, r3
 80033e8:	2b02      	cmp	r3, #2
 80033ea:	f040 8081 	bne.w	80034f0 <I2C_MasterReceive_BTF+0x1bc>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	2b01      	cmp	r3, #1
 80033f2:	d002      	beq.n	80033fa <I2C_MasterReceive_BTF+0xc6>
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	2b10      	cmp	r3, #16
 80033f8:	d108      	bne.n	800340c <I2C_MasterReceive_BTF+0xd8>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	681a      	ldr	r2, [r3, #0]
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003408:	601a      	str	r2, [r3, #0]
 800340a:	e019      	b.n	8003440 <I2C_MasterReceive_BTF+0x10c>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	2b04      	cmp	r3, #4
 8003410:	d002      	beq.n	8003418 <I2C_MasterReceive_BTF+0xe4>
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	2b02      	cmp	r3, #2
 8003416:	d108      	bne.n	800342a <I2C_MasterReceive_BTF+0xf6>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	681a      	ldr	r2, [r3, #0]
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003426:	601a      	str	r2, [r3, #0]
 8003428:	e00a      	b.n	8003440 <I2C_MasterReceive_BTF+0x10c>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	2b10      	cmp	r3, #16
 800342e:	d007      	beq.n	8003440 <I2C_MasterReceive_BTF+0x10c>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	681a      	ldr	r2, [r3, #0]
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800343e:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	691a      	ldr	r2, [r3, #16]
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800344a:	b2d2      	uxtb	r2, r2
 800344c:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003452:	1c5a      	adds	r2, r3, #1
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800345c:	b29b      	uxth	r3, r3
 800345e:	3b01      	subs	r3, #1
 8003460:	b29a      	uxth	r2, r3
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	691a      	ldr	r2, [r3, #16]
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003470:	b2d2      	uxtb	r2, r2
 8003472:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003478:	1c5a      	adds	r2, r3, #1
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003482:	b29b      	uxth	r3, r3
 8003484:	3b01      	subs	r3, #1
 8003486:	b29a      	uxth	r2, r3
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	685a      	ldr	r2, [r3, #4]
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 800349a:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	2220      	movs	r2, #32
 80034a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80034aa:	b2db      	uxtb	r3, r3
 80034ac:	2b40      	cmp	r3, #64	; 0x40
 80034ae:	d10a      	bne.n	80034c6 <I2C_MasterReceive_BTF+0x192>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	2200      	movs	r2, #0
 80034b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	2200      	movs	r2, #0
 80034bc:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 80034be:	6878      	ldr	r0, [r7, #4]
 80034c0:	f7ff fca8 	bl	8002e14 <HAL_I2C_MemRxCpltCallback>
}
 80034c4:	e027      	b.n	8003516 <I2C_MasterReceive_BTF+0x1e2>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	2200      	movs	r2, #0
 80034ca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	2b08      	cmp	r3, #8
 80034d2:	d002      	beq.n	80034da <I2C_MasterReceive_BTF+0x1a6>
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	2b20      	cmp	r3, #32
 80034d8:	d103      	bne.n	80034e2 <I2C_MasterReceive_BTF+0x1ae>
        hi2c->PreviousState = I2C_STATE_NONE;
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	2200      	movs	r2, #0
 80034de:	631a      	str	r2, [r3, #48]	; 0x30
 80034e0:	e002      	b.n	80034e8 <I2C_MasterReceive_BTF+0x1b4>
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	2212      	movs	r2, #18
 80034e6:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 80034e8:	6878      	ldr	r0, [r7, #4]
 80034ea:	f7ff fc53 	bl	8002d94 <HAL_I2C_MasterRxCpltCallback>
}
 80034ee:	e012      	b.n	8003516 <I2C_MasterReceive_BTF+0x1e2>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	691a      	ldr	r2, [r3, #16]
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034fa:	b2d2      	uxtb	r2, r2
 80034fc:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003502:	1c5a      	adds	r2, r3, #1
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800350c:	b29b      	uxth	r3, r3
 800350e:	3b01      	subs	r3, #1
 8003510:	b29a      	uxth	r2, r3
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8003516:	bf00      	nop
 8003518:	3710      	adds	r7, #16
 800351a:	46bd      	mov	sp, r7
 800351c:	bd80      	pop	{r7, pc}

0800351e <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 800351e:	b480      	push	{r7}
 8003520:	b083      	sub	sp, #12
 8003522:	af00      	add	r7, sp, #0
 8003524:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800352c:	b2db      	uxtb	r3, r3
 800352e:	2b40      	cmp	r3, #64	; 0x40
 8003530:	d117      	bne.n	8003562 <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003536:	2b00      	cmp	r3, #0
 8003538:	d109      	bne.n	800354e <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800353e:	b2db      	uxtb	r3, r3
 8003540:	461a      	mov	r2, r3
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800354a:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 800354c:	e067      	b.n	800361e <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003552:	b2db      	uxtb	r3, r3
 8003554:	f043 0301 	orr.w	r3, r3, #1
 8003558:	b2da      	uxtb	r2, r3
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	611a      	str	r2, [r3, #16]
}
 8003560:	e05d      	b.n	800361e <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	691b      	ldr	r3, [r3, #16]
 8003566:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800356a:	d133      	bne.n	80035d4 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003572:	b2db      	uxtb	r3, r3
 8003574:	2b21      	cmp	r3, #33	; 0x21
 8003576:	d109      	bne.n	800358c <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800357c:	b2db      	uxtb	r3, r3
 800357e:	461a      	mov	r2, r3
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003588:	611a      	str	r2, [r3, #16]
 800358a:	e008      	b.n	800359e <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003590:	b2db      	uxtb	r3, r3
 8003592:	f043 0301 	orr.w	r3, r3, #1
 8003596:	b2da      	uxtb	r2, r3
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d004      	beq.n	80035b0 <I2C_Master_SB+0x92>
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80035aa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	d108      	bne.n	80035c2 <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035b4:	2b00      	cmp	r3, #0
 80035b6:	d032      	beq.n	800361e <I2C_Master_SB+0x100>
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d02d      	beq.n	800361e <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	685a      	ldr	r2, [r3, #4]
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80035d0:	605a      	str	r2, [r3, #4]
}
 80035d2:	e024      	b.n	800361e <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80035d8:	2b00      	cmp	r3, #0
 80035da:	d10e      	bne.n	80035fa <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035e0:	b29b      	uxth	r3, r3
 80035e2:	11db      	asrs	r3, r3, #7
 80035e4:	b2db      	uxtb	r3, r3
 80035e6:	f003 0306 	and.w	r3, r3, #6
 80035ea:	b2db      	uxtb	r3, r3
 80035ec:	f063 030f 	orn	r3, r3, #15
 80035f0:	b2da      	uxtb	r2, r3
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	611a      	str	r2, [r3, #16]
}
 80035f8:	e011      	b.n	800361e <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80035fe:	2b01      	cmp	r3, #1
 8003600:	d10d      	bne.n	800361e <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003606:	b29b      	uxth	r3, r3
 8003608:	11db      	asrs	r3, r3, #7
 800360a:	b2db      	uxtb	r3, r3
 800360c:	f003 0306 	and.w	r3, r3, #6
 8003610:	b2db      	uxtb	r3, r3
 8003612:	f063 030e 	orn	r3, r3, #14
 8003616:	b2da      	uxtb	r2, r3
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	611a      	str	r2, [r3, #16]
}
 800361e:	bf00      	nop
 8003620:	370c      	adds	r7, #12
 8003622:	46bd      	mov	sp, r7
 8003624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003628:	4770      	bx	lr

0800362a <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 800362a:	b480      	push	{r7}
 800362c:	b083      	sub	sp, #12
 800362e:	af00      	add	r7, sp, #0
 8003630:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003636:	b2da      	uxtb	r2, r3
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003642:	2b00      	cmp	r3, #0
 8003644:	d004      	beq.n	8003650 <I2C_Master_ADD10+0x26>
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800364a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800364c:	2b00      	cmp	r3, #0
 800364e:	d108      	bne.n	8003662 <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003654:	2b00      	cmp	r3, #0
 8003656:	d00c      	beq.n	8003672 <I2C_Master_ADD10+0x48>
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800365c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800365e:	2b00      	cmp	r3, #0
 8003660:	d007      	beq.n	8003672 <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	685a      	ldr	r2, [r3, #4]
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003670:	605a      	str	r2, [r3, #4]
  }
}
 8003672:	bf00      	nop
 8003674:	370c      	adds	r7, #12
 8003676:	46bd      	mov	sp, r7
 8003678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800367c:	4770      	bx	lr

0800367e <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 800367e:	b480      	push	{r7}
 8003680:	b091      	sub	sp, #68	; 0x44
 8003682:	af00      	add	r7, sp, #0
 8003684:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800368c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003694:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800369a:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80036a2:	b2db      	uxtb	r3, r3
 80036a4:	2b22      	cmp	r3, #34	; 0x22
 80036a6:	f040 8169 	bne.w	800397c <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	d10f      	bne.n	80036d2 <I2C_Master_ADDR+0x54>
 80036b2:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80036b6:	2b40      	cmp	r3, #64	; 0x40
 80036b8:	d10b      	bne.n	80036d2 <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80036ba:	2300      	movs	r3, #0
 80036bc:	633b      	str	r3, [r7, #48]	; 0x30
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	695b      	ldr	r3, [r3, #20]
 80036c4:	633b      	str	r3, [r7, #48]	; 0x30
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	699b      	ldr	r3, [r3, #24]
 80036cc:	633b      	str	r3, [r7, #48]	; 0x30
 80036ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80036d0:	e160      	b.n	8003994 <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d11d      	bne.n	8003716 <I2C_Master_ADDR+0x98>
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	691b      	ldr	r3, [r3, #16]
 80036de:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80036e2:	d118      	bne.n	8003716 <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80036e4:	2300      	movs	r3, #0
 80036e6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	695b      	ldr	r3, [r3, #20]
 80036ee:	62fb      	str	r3, [r7, #44]	; 0x2c
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	699b      	ldr	r3, [r3, #24]
 80036f6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80036f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	681a      	ldr	r2, [r3, #0]
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003708:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800370e:	1c5a      	adds	r2, r3, #1
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	651a      	str	r2, [r3, #80]	; 0x50
 8003714:	e13e      	b.n	8003994 <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800371a:	b29b      	uxth	r3, r3
 800371c:	2b00      	cmp	r3, #0
 800371e:	d113      	bne.n	8003748 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003720:	2300      	movs	r3, #0
 8003722:	62bb      	str	r3, [r7, #40]	; 0x28
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	695b      	ldr	r3, [r3, #20]
 800372a:	62bb      	str	r3, [r7, #40]	; 0x28
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	699b      	ldr	r3, [r3, #24]
 8003732:	62bb      	str	r3, [r7, #40]	; 0x28
 8003734:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	681a      	ldr	r2, [r3, #0]
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003744:	601a      	str	r2, [r3, #0]
 8003746:	e115      	b.n	8003974 <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800374c:	b29b      	uxth	r3, r3
 800374e:	2b01      	cmp	r3, #1
 8003750:	f040 808a 	bne.w	8003868 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 8003754:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003756:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800375a:	d137      	bne.n	80037cc <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	681a      	ldr	r2, [r3, #0]
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800376a:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	685b      	ldr	r3, [r3, #4]
 8003772:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003776:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800377a:	d113      	bne.n	80037a4 <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	681a      	ldr	r2, [r3, #0]
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800378a:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800378c:	2300      	movs	r3, #0
 800378e:	627b      	str	r3, [r7, #36]	; 0x24
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	695b      	ldr	r3, [r3, #20]
 8003796:	627b      	str	r3, [r7, #36]	; 0x24
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	699b      	ldr	r3, [r3, #24]
 800379e:	627b      	str	r3, [r7, #36]	; 0x24
 80037a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037a2:	e0e7      	b.n	8003974 <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80037a4:	2300      	movs	r3, #0
 80037a6:	623b      	str	r3, [r7, #32]
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	695b      	ldr	r3, [r3, #20]
 80037ae:	623b      	str	r3, [r7, #32]
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	699b      	ldr	r3, [r3, #24]
 80037b6:	623b      	str	r3, [r7, #32]
 80037b8:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	681a      	ldr	r2, [r3, #0]
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80037c8:	601a      	str	r2, [r3, #0]
 80037ca:	e0d3      	b.n	8003974 <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 80037cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80037ce:	2b08      	cmp	r3, #8
 80037d0:	d02e      	beq.n	8003830 <I2C_Master_ADDR+0x1b2>
 80037d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80037d4:	2b20      	cmp	r3, #32
 80037d6:	d02b      	beq.n	8003830 <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 80037d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80037da:	2b12      	cmp	r3, #18
 80037dc:	d102      	bne.n	80037e4 <I2C_Master_ADDR+0x166>
 80037de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80037e0:	2b01      	cmp	r3, #1
 80037e2:	d125      	bne.n	8003830 <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 80037e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80037e6:	2b04      	cmp	r3, #4
 80037e8:	d00e      	beq.n	8003808 <I2C_Master_ADDR+0x18a>
 80037ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80037ec:	2b02      	cmp	r3, #2
 80037ee:	d00b      	beq.n	8003808 <I2C_Master_ADDR+0x18a>
 80037f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80037f2:	2b10      	cmp	r3, #16
 80037f4:	d008      	beq.n	8003808 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	681a      	ldr	r2, [r3, #0]
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003804:	601a      	str	r2, [r3, #0]
 8003806:	e007      	b.n	8003818 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	681a      	ldr	r2, [r3, #0]
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003816:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003818:	2300      	movs	r3, #0
 800381a:	61fb      	str	r3, [r7, #28]
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	695b      	ldr	r3, [r3, #20]
 8003822:	61fb      	str	r3, [r7, #28]
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	699b      	ldr	r3, [r3, #24]
 800382a:	61fb      	str	r3, [r7, #28]
 800382c:	69fb      	ldr	r3, [r7, #28]
 800382e:	e0a1      	b.n	8003974 <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	681a      	ldr	r2, [r3, #0]
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800383e:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003840:	2300      	movs	r3, #0
 8003842:	61bb      	str	r3, [r7, #24]
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	695b      	ldr	r3, [r3, #20]
 800384a:	61bb      	str	r3, [r7, #24]
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	699b      	ldr	r3, [r3, #24]
 8003852:	61bb      	str	r3, [r7, #24]
 8003854:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	681a      	ldr	r2, [r3, #0]
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003864:	601a      	str	r2, [r3, #0]
 8003866:	e085      	b.n	8003974 <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800386c:	b29b      	uxth	r3, r3
 800386e:	2b02      	cmp	r3, #2
 8003870:	d14d      	bne.n	800390e <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8003872:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003874:	2b04      	cmp	r3, #4
 8003876:	d016      	beq.n	80038a6 <I2C_Master_ADDR+0x228>
 8003878:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800387a:	2b02      	cmp	r3, #2
 800387c:	d013      	beq.n	80038a6 <I2C_Master_ADDR+0x228>
 800387e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003880:	2b10      	cmp	r3, #16
 8003882:	d010      	beq.n	80038a6 <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	681a      	ldr	r2, [r3, #0]
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003892:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	681a      	ldr	r2, [r3, #0]
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80038a2:	601a      	str	r2, [r3, #0]
 80038a4:	e007      	b.n	80038b6 <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	681a      	ldr	r2, [r3, #0]
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80038b4:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	685b      	ldr	r3, [r3, #4]
 80038bc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80038c0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80038c4:	d117      	bne.n	80038f6 <I2C_Master_ADDR+0x278>
 80038c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80038c8:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80038cc:	d00b      	beq.n	80038e6 <I2C_Master_ADDR+0x268>
 80038ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80038d0:	2b01      	cmp	r3, #1
 80038d2:	d008      	beq.n	80038e6 <I2C_Master_ADDR+0x268>
 80038d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80038d6:	2b08      	cmp	r3, #8
 80038d8:	d005      	beq.n	80038e6 <I2C_Master_ADDR+0x268>
 80038da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80038dc:	2b10      	cmp	r3, #16
 80038de:	d002      	beq.n	80038e6 <I2C_Master_ADDR+0x268>
 80038e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80038e2:	2b20      	cmp	r3, #32
 80038e4:	d107      	bne.n	80038f6 <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	685a      	ldr	r2, [r3, #4]
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80038f4:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80038f6:	2300      	movs	r3, #0
 80038f8:	617b      	str	r3, [r7, #20]
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	695b      	ldr	r3, [r3, #20]
 8003900:	617b      	str	r3, [r7, #20]
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	699b      	ldr	r3, [r3, #24]
 8003908:	617b      	str	r3, [r7, #20]
 800390a:	697b      	ldr	r3, [r7, #20]
 800390c:	e032      	b.n	8003974 <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	681a      	ldr	r2, [r3, #0]
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800391c:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	685b      	ldr	r3, [r3, #4]
 8003924:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003928:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800392c:	d117      	bne.n	800395e <I2C_Master_ADDR+0x2e0>
 800392e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003930:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003934:	d00b      	beq.n	800394e <I2C_Master_ADDR+0x2d0>
 8003936:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003938:	2b01      	cmp	r3, #1
 800393a:	d008      	beq.n	800394e <I2C_Master_ADDR+0x2d0>
 800393c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800393e:	2b08      	cmp	r3, #8
 8003940:	d005      	beq.n	800394e <I2C_Master_ADDR+0x2d0>
 8003942:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003944:	2b10      	cmp	r3, #16
 8003946:	d002      	beq.n	800394e <I2C_Master_ADDR+0x2d0>
 8003948:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800394a:	2b20      	cmp	r3, #32
 800394c:	d107      	bne.n	800395e <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	685a      	ldr	r2, [r3, #4]
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800395c:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800395e:	2300      	movs	r3, #0
 8003960:	613b      	str	r3, [r7, #16]
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	695b      	ldr	r3, [r3, #20]
 8003968:	613b      	str	r3, [r7, #16]
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	699b      	ldr	r3, [r3, #24]
 8003970:	613b      	str	r3, [r7, #16]
 8003972:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	2200      	movs	r2, #0
 8003978:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 800397a:	e00b      	b.n	8003994 <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800397c:	2300      	movs	r3, #0
 800397e:	60fb      	str	r3, [r7, #12]
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	695b      	ldr	r3, [r3, #20]
 8003986:	60fb      	str	r3, [r7, #12]
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	699b      	ldr	r3, [r3, #24]
 800398e:	60fb      	str	r3, [r7, #12]
 8003990:	68fb      	ldr	r3, [r7, #12]
}
 8003992:	e7ff      	b.n	8003994 <I2C_Master_ADDR+0x316>
 8003994:	bf00      	nop
 8003996:	3744      	adds	r7, #68	; 0x44
 8003998:	46bd      	mov	sp, r7
 800399a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800399e:	4770      	bx	lr

080039a0 <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 80039a0:	b580      	push	{r7, lr}
 80039a2:	b084      	sub	sp, #16
 80039a4:	af00      	add	r7, sp, #0
 80039a6:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80039ae:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80039b4:	b29b      	uxth	r3, r3
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d02b      	beq.n	8003a12 <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039be:	781a      	ldrb	r2, [r3, #0]
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039ca:	1c5a      	adds	r2, r3, #1
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80039d4:	b29b      	uxth	r3, r3
 80039d6:	3b01      	subs	r3, #1
 80039d8:	b29a      	uxth	r2, r3
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80039e2:	b29b      	uxth	r3, r3
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	d114      	bne.n	8003a12 <I2C_SlaveTransmit_TXE+0x72>
 80039e8:	7bfb      	ldrb	r3, [r7, #15]
 80039ea:	2b29      	cmp	r3, #41	; 0x29
 80039ec:	d111      	bne.n	8003a12 <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	685a      	ldr	r2, [r3, #4]
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80039fc:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	2221      	movs	r2, #33	; 0x21
 8003a02:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	2228      	movs	r2, #40	; 0x28
 8003a08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8003a0c:	6878      	ldr	r0, [r7, #4]
 8003a0e:	f7ff f9cb 	bl	8002da8 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8003a12:	bf00      	nop
 8003a14:	3710      	adds	r7, #16
 8003a16:	46bd      	mov	sp, r7
 8003a18:	bd80      	pop	{r7, pc}

08003a1a <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8003a1a:	b480      	push	{r7}
 8003a1c:	b083      	sub	sp, #12
 8003a1e:	af00      	add	r7, sp, #0
 8003a20:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a26:	b29b      	uxth	r3, r3
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	d011      	beq.n	8003a50 <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a30:	781a      	ldrb	r2, [r3, #0]
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a3c:	1c5a      	adds	r2, r3, #1
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a46:	b29b      	uxth	r3, r3
 8003a48:	3b01      	subs	r3, #1
 8003a4a:	b29a      	uxth	r2, r3
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8003a50:	bf00      	nop
 8003a52:	370c      	adds	r7, #12
 8003a54:	46bd      	mov	sp, r7
 8003a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a5a:	4770      	bx	lr

08003a5c <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8003a5c:	b580      	push	{r7, lr}
 8003a5e:	b084      	sub	sp, #16
 8003a60:	af00      	add	r7, sp, #0
 8003a62:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003a6a:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a70:	b29b      	uxth	r3, r3
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	d02c      	beq.n	8003ad0 <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	691a      	ldr	r2, [r3, #16]
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a80:	b2d2      	uxtb	r2, r2
 8003a82:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a88:	1c5a      	adds	r2, r3, #1
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a92:	b29b      	uxth	r3, r3
 8003a94:	3b01      	subs	r3, #1
 8003a96:	b29a      	uxth	r2, r3
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003aa0:	b29b      	uxth	r3, r3
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d114      	bne.n	8003ad0 <I2C_SlaveReceive_RXNE+0x74>
 8003aa6:	7bfb      	ldrb	r3, [r7, #15]
 8003aa8:	2b2a      	cmp	r3, #42	; 0x2a
 8003aaa:	d111      	bne.n	8003ad0 <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	685a      	ldr	r2, [r3, #4]
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003aba:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	2222      	movs	r2, #34	; 0x22
 8003ac0:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	2228      	movs	r2, #40	; 0x28
 8003ac6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8003aca:	6878      	ldr	r0, [r7, #4]
 8003acc:	f7ff f976 	bl	8002dbc <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8003ad0:	bf00      	nop
 8003ad2:	3710      	adds	r7, #16
 8003ad4:	46bd      	mov	sp, r7
 8003ad6:	bd80      	pop	{r7, pc}

08003ad8 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8003ad8:	b480      	push	{r7}
 8003ada:	b083      	sub	sp, #12
 8003adc:	af00      	add	r7, sp, #0
 8003ade:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ae4:	b29b      	uxth	r3, r3
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d012      	beq.n	8003b10 <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	691a      	ldr	r2, [r3, #16]
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003af4:	b2d2      	uxtb	r2, r2
 8003af6:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003afc:	1c5a      	adds	r2, r3, #1
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b06:	b29b      	uxth	r3, r3
 8003b08:	3b01      	subs	r3, #1
 8003b0a:	b29a      	uxth	r2, r3
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8003b10:	bf00      	nop
 8003b12:	370c      	adds	r7, #12
 8003b14:	46bd      	mov	sp, r7
 8003b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b1a:	4770      	bx	lr

08003b1c <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 8003b1c:	b580      	push	{r7, lr}
 8003b1e:	b084      	sub	sp, #16
 8003b20:	af00      	add	r7, sp, #0
 8003b22:	6078      	str	r0, [r7, #4]
 8003b24:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 8003b26:	2300      	movs	r3, #0
 8003b28:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003b30:	b2db      	uxtb	r3, r3
 8003b32:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8003b36:	2b28      	cmp	r3, #40	; 0x28
 8003b38:	d125      	bne.n	8003b86 <I2C_Slave_ADDR+0x6a>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	685a      	ldr	r2, [r3, #4]
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003b48:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 8003b4a:	683b      	ldr	r3, [r7, #0]
 8003b4c:	f003 0304 	and.w	r3, r3, #4
 8003b50:	2b00      	cmp	r3, #0
 8003b52:	d101      	bne.n	8003b58 <I2C_Slave_ADDR+0x3c>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 8003b54:	2301      	movs	r3, #1
 8003b56:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 8003b58:	683b      	ldr	r3, [r7, #0]
 8003b5a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	d103      	bne.n	8003b6a <I2C_Slave_ADDR+0x4e>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	68db      	ldr	r3, [r3, #12]
 8003b66:	81bb      	strh	r3, [r7, #12]
 8003b68:	e002      	b.n	8003b70 <I2C_Slave_ADDR+0x54>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	699b      	ldr	r3, [r3, #24]
 8003b6e:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	2200      	movs	r2, #0
 8003b74:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8003b78:	89ba      	ldrh	r2, [r7, #12]
 8003b7a:	7bfb      	ldrb	r3, [r7, #15]
 8003b7c:	4619      	mov	r1, r3
 8003b7e:	6878      	ldr	r0, [r7, #4]
 8003b80:	f7ff f926 	bl	8002dd0 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8003b84:	e00e      	b.n	8003ba4 <I2C_Slave_ADDR+0x88>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003b86:	2300      	movs	r3, #0
 8003b88:	60bb      	str	r3, [r7, #8]
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	695b      	ldr	r3, [r3, #20]
 8003b90:	60bb      	str	r3, [r7, #8]
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	699b      	ldr	r3, [r3, #24]
 8003b98:	60bb      	str	r3, [r7, #8]
 8003b9a:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	2200      	movs	r2, #0
 8003ba0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 8003ba4:	bf00      	nop
 8003ba6:	3710      	adds	r7, #16
 8003ba8:	46bd      	mov	sp, r7
 8003baa:	bd80      	pop	{r7, pc}

08003bac <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 8003bac:	b580      	push	{r7, lr}
 8003bae:	b084      	sub	sp, #16
 8003bb0:	af00      	add	r7, sp, #0
 8003bb2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003bba:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	685a      	ldr	r2, [r3, #4]
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003bca:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8003bcc:	2300      	movs	r3, #0
 8003bce:	60bb      	str	r3, [r7, #8]
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	695b      	ldr	r3, [r3, #20]
 8003bd6:	60bb      	str	r3, [r7, #8]
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	681a      	ldr	r2, [r3, #0]
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	f042 0201 	orr.w	r2, r2, #1
 8003be6:	601a      	str	r2, [r3, #0]
 8003be8:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	681a      	ldr	r2, [r3, #0]
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003bf8:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	685b      	ldr	r3, [r3, #4]
 8003c00:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003c04:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003c08:	d172      	bne.n	8003cf0 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8003c0a:	7bfb      	ldrb	r3, [r7, #15]
 8003c0c:	2b22      	cmp	r3, #34	; 0x22
 8003c0e:	d002      	beq.n	8003c16 <I2C_Slave_STOPF+0x6a>
 8003c10:	7bfb      	ldrb	r3, [r7, #15]
 8003c12:	2b2a      	cmp	r3, #42	; 0x2a
 8003c14:	d135      	bne.n	8003c82 <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx));
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	685b      	ldr	r3, [r3, #4]
 8003c1e:	b29a      	uxth	r2, r3
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c28:	b29b      	uxth	r3, r3
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	d005      	beq.n	8003c3a <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c32:	f043 0204 	orr.w	r2, r3, #4
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	685a      	ldr	r2, [r3, #4]
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003c48:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c4e:	4618      	mov	r0, r3
 8003c50:	f7fe fc25 	bl	800249e <HAL_DMA_GetState>
 8003c54:	4603      	mov	r3, r0
 8003c56:	2b01      	cmp	r3, #1
 8003c58:	d049      	beq.n	8003cee <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c5e:	4a69      	ldr	r2, [pc, #420]	; (8003e04 <I2C_Slave_STOPF+0x258>)
 8003c60:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c66:	4618      	mov	r0, r3
 8003c68:	f7fe fbf7 	bl	800245a <HAL_DMA_Abort_IT>
 8003c6c:	4603      	mov	r3, r0
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	d03d      	beq.n	8003cee <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c76:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003c78:	687a      	ldr	r2, [r7, #4]
 8003c7a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003c7c:	4610      	mov	r0, r2
 8003c7e:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8003c80:	e035      	b.n	8003cee <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx));
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	685b      	ldr	r3, [r3, #4]
 8003c8a:	b29a      	uxth	r2, r3
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c94:	b29b      	uxth	r3, r3
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	d005      	beq.n	8003ca6 <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c9e:	f043 0204 	orr.w	r2, r3, #4
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	685a      	ldr	r2, [r3, #4]
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003cb4:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003cba:	4618      	mov	r0, r3
 8003cbc:	f7fe fbef 	bl	800249e <HAL_DMA_GetState>
 8003cc0:	4603      	mov	r3, r0
 8003cc2:	2b01      	cmp	r3, #1
 8003cc4:	d014      	beq.n	8003cf0 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003cca:	4a4e      	ldr	r2, [pc, #312]	; (8003e04 <I2C_Slave_STOPF+0x258>)
 8003ccc:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003cd2:	4618      	mov	r0, r3
 8003cd4:	f7fe fbc1 	bl	800245a <HAL_DMA_Abort_IT>
 8003cd8:	4603      	mov	r3, r0
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	d008      	beq.n	8003cf0 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003ce2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003ce4:	687a      	ldr	r2, [r7, #4]
 8003ce6:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003ce8:	4610      	mov	r0, r2
 8003cea:	4798      	blx	r3
 8003cec:	e000      	b.n	8003cf0 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8003cee:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003cf4:	b29b      	uxth	r3, r3
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	d03e      	beq.n	8003d78 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	695b      	ldr	r3, [r3, #20]
 8003d00:	f003 0304 	and.w	r3, r3, #4
 8003d04:	2b04      	cmp	r3, #4
 8003d06:	d112      	bne.n	8003d2e <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	691a      	ldr	r2, [r3, #16]
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d12:	b2d2      	uxtb	r2, r2
 8003d14:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d1a:	1c5a      	adds	r2, r3, #1
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d24:	b29b      	uxth	r3, r3
 8003d26:	3b01      	subs	r3, #1
 8003d28:	b29a      	uxth	r2, r3
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	695b      	ldr	r3, [r3, #20]
 8003d34:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d38:	2b40      	cmp	r3, #64	; 0x40
 8003d3a:	d112      	bne.n	8003d62 <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	691a      	ldr	r2, [r3, #16]
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d46:	b2d2      	uxtb	r2, r2
 8003d48:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d4e:	1c5a      	adds	r2, r3, #1
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d58:	b29b      	uxth	r3, r3
 8003d5a:	3b01      	subs	r3, #1
 8003d5c:	b29a      	uxth	r2, r3
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d66:	b29b      	uxth	r3, r3
 8003d68:	2b00      	cmp	r3, #0
 8003d6a:	d005      	beq.n	8003d78 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d70:	f043 0204 	orr.w	r2, r3, #4
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d7c:	2b00      	cmp	r3, #0
 8003d7e:	d003      	beq.n	8003d88 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 8003d80:	6878      	ldr	r0, [r7, #4]
 8003d82:	f000 f843 	bl	8003e0c <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 8003d86:	e039      	b.n	8003dfc <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8003d88:	7bfb      	ldrb	r3, [r7, #15]
 8003d8a:	2b2a      	cmp	r3, #42	; 0x2a
 8003d8c:	d109      	bne.n	8003da2 <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	2200      	movs	r2, #0
 8003d92:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	2228      	movs	r2, #40	; 0x28
 8003d98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8003d9c:	6878      	ldr	r0, [r7, #4]
 8003d9e:	f7ff f80d 	bl	8002dbc <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003da8:	b2db      	uxtb	r3, r3
 8003daa:	2b28      	cmp	r3, #40	; 0x28
 8003dac:	d111      	bne.n	8003dd2 <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	4a15      	ldr	r2, [pc, #84]	; (8003e08 <I2C_Slave_STOPF+0x25c>)
 8003db2:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	2200      	movs	r2, #0
 8003db8:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	2220      	movs	r2, #32
 8003dbe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	2200      	movs	r2, #0
 8003dc6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 8003dca:	6878      	ldr	r0, [r7, #4]
 8003dcc:	f7ff f80e 	bl	8002dec <HAL_I2C_ListenCpltCallback>
}
 8003dd0:	e014      	b.n	8003dfc <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003dd6:	2b22      	cmp	r3, #34	; 0x22
 8003dd8:	d002      	beq.n	8003de0 <I2C_Slave_STOPF+0x234>
 8003dda:	7bfb      	ldrb	r3, [r7, #15]
 8003ddc:	2b22      	cmp	r3, #34	; 0x22
 8003dde:	d10d      	bne.n	8003dfc <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	2200      	movs	r2, #0
 8003de4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	2220      	movs	r2, #32
 8003dea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	2200      	movs	r2, #0
 8003df2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 8003df6:	6878      	ldr	r0, [r7, #4]
 8003df8:	f7fe ffe0 	bl	8002dbc <HAL_I2C_SlaveRxCpltCallback>
}
 8003dfc:	bf00      	nop
 8003dfe:	3710      	adds	r7, #16
 8003e00:	46bd      	mov	sp, r7
 8003e02:	bd80      	pop	{r7, pc}
 8003e04:	08004071 	.word	0x08004071
 8003e08:	ffff0000 	.word	0xffff0000

08003e0c <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 8003e0c:	b580      	push	{r7, lr}
 8003e0e:	b084      	sub	sp, #16
 8003e10:	af00      	add	r7, sp, #0
 8003e12:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003e1a:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003e22:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8003e24:	7bbb      	ldrb	r3, [r7, #14]
 8003e26:	2b10      	cmp	r3, #16
 8003e28:	d002      	beq.n	8003e30 <I2C_ITError+0x24>
 8003e2a:	7bbb      	ldrb	r3, [r7, #14]
 8003e2c:	2b40      	cmp	r3, #64	; 0x40
 8003e2e:	d10a      	bne.n	8003e46 <I2C_ITError+0x3a>
 8003e30:	7bfb      	ldrb	r3, [r7, #15]
 8003e32:	2b22      	cmp	r3, #34	; 0x22
 8003e34:	d107      	bne.n	8003e46 <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	681a      	ldr	r2, [r3, #0]
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003e44:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8003e46:	7bfb      	ldrb	r3, [r7, #15]
 8003e48:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8003e4c:	2b28      	cmp	r3, #40	; 0x28
 8003e4e:	d107      	bne.n	8003e60 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	2200      	movs	r2, #0
 8003e54:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	2228      	movs	r2, #40	; 0x28
 8003e5a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8003e5e:	e015      	b.n	8003e8c <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	685b      	ldr	r3, [r3, #4]
 8003e66:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003e6a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003e6e:	d00a      	beq.n	8003e86 <I2C_ITError+0x7a>
 8003e70:	7bfb      	ldrb	r3, [r7, #15]
 8003e72:	2b60      	cmp	r3, #96	; 0x60
 8003e74:	d007      	beq.n	8003e86 <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	2220      	movs	r2, #32
 8003e7a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	2200      	movs	r2, #0
 8003e82:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	2200      	movs	r2, #0
 8003e8a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	685b      	ldr	r3, [r3, #4]
 8003e92:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003e96:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003e9a:	d162      	bne.n	8003f62 <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	685a      	ldr	r2, [r3, #4]
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003eaa:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003eb0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003eb4:	b2db      	uxtb	r3, r3
 8003eb6:	2b01      	cmp	r3, #1
 8003eb8:	d020      	beq.n	8003efc <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003ebe:	4a6a      	ldr	r2, [pc, #424]	; (8004068 <I2C_ITError+0x25c>)
 8003ec0:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003ec6:	4618      	mov	r0, r3
 8003ec8:	f7fe fac7 	bl	800245a <HAL_DMA_Abort_IT>
 8003ecc:	4603      	mov	r3, r0
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	f000 8089 	beq.w	8003fe6 <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	681a      	ldr	r2, [r3, #0]
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	f022 0201 	bic.w	r2, r2, #1
 8003ee2:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	2220      	movs	r2, #32
 8003ee8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003ef0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003ef2:	687a      	ldr	r2, [r7, #4]
 8003ef4:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003ef6:	4610      	mov	r0, r2
 8003ef8:	4798      	blx	r3
 8003efa:	e074      	b.n	8003fe6 <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f00:	4a59      	ldr	r2, [pc, #356]	; (8004068 <I2C_ITError+0x25c>)
 8003f02:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f08:	4618      	mov	r0, r3
 8003f0a:	f7fe faa6 	bl	800245a <HAL_DMA_Abort_IT>
 8003f0e:	4603      	mov	r3, r0
 8003f10:	2b00      	cmp	r3, #0
 8003f12:	d068      	beq.n	8003fe6 <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	695b      	ldr	r3, [r3, #20]
 8003f1a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f1e:	2b40      	cmp	r3, #64	; 0x40
 8003f20:	d10b      	bne.n	8003f3a <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	691a      	ldr	r2, [r3, #16]
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f2c:	b2d2      	uxtb	r2, r2
 8003f2e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f34:	1c5a      	adds	r2, r3, #1
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	681a      	ldr	r2, [r3, #0]
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	f022 0201 	bic.w	r2, r2, #1
 8003f48:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	2220      	movs	r2, #32
 8003f4e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f56:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003f58:	687a      	ldr	r2, [r7, #4]
 8003f5a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003f5c:	4610      	mov	r0, r2
 8003f5e:	4798      	blx	r3
 8003f60:	e041      	b.n	8003fe6 <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003f68:	b2db      	uxtb	r3, r3
 8003f6a:	2b60      	cmp	r3, #96	; 0x60
 8003f6c:	d125      	bne.n	8003fba <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	2220      	movs	r2, #32
 8003f72:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	2200      	movs	r2, #0
 8003f7a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	695b      	ldr	r3, [r3, #20]
 8003f82:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f86:	2b40      	cmp	r3, #64	; 0x40
 8003f88:	d10b      	bne.n	8003fa2 <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	691a      	ldr	r2, [r3, #16]
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f94:	b2d2      	uxtb	r2, r2
 8003f96:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f9c:	1c5a      	adds	r2, r3, #1
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	681a      	ldr	r2, [r3, #0]
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	f022 0201 	bic.w	r2, r2, #1
 8003fb0:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8003fb2:	6878      	ldr	r0, [r7, #4]
 8003fb4:	f7fe ff42 	bl	8002e3c <HAL_I2C_AbortCpltCallback>
 8003fb8:	e015      	b.n	8003fe6 <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	695b      	ldr	r3, [r3, #20]
 8003fc0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003fc4:	2b40      	cmp	r3, #64	; 0x40
 8003fc6:	d10b      	bne.n	8003fe0 <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	691a      	ldr	r2, [r3, #16]
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fd2:	b2d2      	uxtb	r2, r2
 8003fd4:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fda:	1c5a      	adds	r2, r3, #1
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8003fe0:	6878      	ldr	r0, [r7, #4]
 8003fe2:	f7fe ff21 	bl	8002e28 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fea:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8003fec:	68bb      	ldr	r3, [r7, #8]
 8003fee:	f003 0301 	and.w	r3, r3, #1
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	d10e      	bne.n	8004014 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8003ff6:	68bb      	ldr	r3, [r7, #8]
 8003ff8:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8003ffc:	2b00      	cmp	r3, #0
 8003ffe:	d109      	bne.n	8004014 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8004000:	68bb      	ldr	r3, [r7, #8]
 8004002:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8004006:	2b00      	cmp	r3, #0
 8004008:	d104      	bne.n	8004014 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 800400a:	68bb      	ldr	r3, [r7, #8]
 800400c:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8004010:	2b00      	cmp	r3, #0
 8004012:	d007      	beq.n	8004024 <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	685a      	ldr	r2, [r3, #4]
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004022:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800402a:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004030:	f003 0304 	and.w	r3, r3, #4
 8004034:	2b04      	cmp	r3, #4
 8004036:	d113      	bne.n	8004060 <I2C_ITError+0x254>
 8004038:	7bfb      	ldrb	r3, [r7, #15]
 800403a:	2b28      	cmp	r3, #40	; 0x28
 800403c:	d110      	bne.n	8004060 <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	4a0a      	ldr	r2, [pc, #40]	; (800406c <I2C_ITError+0x260>)
 8004042:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	2200      	movs	r2, #0
 8004048:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	2220      	movs	r2, #32
 800404e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	2200      	movs	r2, #0
 8004056:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 800405a:	6878      	ldr	r0, [r7, #4]
 800405c:	f7fe fec6 	bl	8002dec <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8004060:	bf00      	nop
 8004062:	3710      	adds	r7, #16
 8004064:	46bd      	mov	sp, r7
 8004066:	bd80      	pop	{r7, pc}
 8004068:	08004071 	.word	0x08004071
 800406c:	ffff0000 	.word	0xffff0000

08004070 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8004070:	b580      	push	{r7, lr}
 8004072:	b086      	sub	sp, #24
 8004074:	af00      	add	r7, sp, #0
 8004076:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004078:	2300      	movs	r3, #0
 800407a:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004080:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004082:	697b      	ldr	r3, [r7, #20]
 8004084:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004088:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 800408a:	4b4b      	ldr	r3, [pc, #300]	; (80041b8 <I2C_DMAAbort+0x148>)
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	08db      	lsrs	r3, r3, #3
 8004090:	4a4a      	ldr	r2, [pc, #296]	; (80041bc <I2C_DMAAbort+0x14c>)
 8004092:	fba2 2303 	umull	r2, r3, r2, r3
 8004096:	0a1a      	lsrs	r2, r3, #8
 8004098:	4613      	mov	r3, r2
 800409a:	009b      	lsls	r3, r3, #2
 800409c:	4413      	add	r3, r2
 800409e:	00da      	lsls	r2, r3, #3
 80040a0:	1ad3      	subs	r3, r2, r3
 80040a2:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	d106      	bne.n	80040b8 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80040aa:	697b      	ldr	r3, [r7, #20]
 80040ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040ae:	f043 0220 	orr.w	r2, r3, #32
 80040b2:	697b      	ldr	r3, [r7, #20]
 80040b4:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 80040b6:	e00a      	b.n	80040ce <I2C_DMAAbort+0x5e>
    }
    count--;
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	3b01      	subs	r3, #1
 80040bc:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 80040be:	697b      	ldr	r3, [r7, #20]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80040c8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80040cc:	d0ea      	beq.n	80040a4 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 80040ce:	697b      	ldr	r3, [r7, #20]
 80040d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	d003      	beq.n	80040de <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 80040d6:	697b      	ldr	r3, [r7, #20]
 80040d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80040da:	2200      	movs	r2, #0
 80040dc:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 80040de:	697b      	ldr	r3, [r7, #20]
 80040e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	d003      	beq.n	80040ee <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 80040e6:	697b      	ldr	r3, [r7, #20]
 80040e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040ea:	2200      	movs	r2, #0
 80040ec:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80040ee:	697b      	ldr	r3, [r7, #20]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	681a      	ldr	r2, [r3, #0]
 80040f4:	697b      	ldr	r3, [r7, #20]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80040fc:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 80040fe:	697b      	ldr	r3, [r7, #20]
 8004100:	2200      	movs	r2, #0
 8004102:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 8004104:	697b      	ldr	r3, [r7, #20]
 8004106:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004108:	2b00      	cmp	r3, #0
 800410a:	d003      	beq.n	8004114 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 800410c:	697b      	ldr	r3, [r7, #20]
 800410e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004110:	2200      	movs	r2, #0
 8004112:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 8004114:	697b      	ldr	r3, [r7, #20]
 8004116:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004118:	2b00      	cmp	r3, #0
 800411a:	d003      	beq.n	8004124 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 800411c:	697b      	ldr	r3, [r7, #20]
 800411e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004120:	2200      	movs	r2, #0
 8004122:	651a      	str	r2, [r3, #80]	; 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 8004124:	697b      	ldr	r3, [r7, #20]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	681a      	ldr	r2, [r3, #0]
 800412a:	697b      	ldr	r3, [r7, #20]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	f022 0201 	bic.w	r2, r2, #1
 8004132:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8004134:	697b      	ldr	r3, [r7, #20]
 8004136:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800413a:	b2db      	uxtb	r3, r3
 800413c:	2b60      	cmp	r3, #96	; 0x60
 800413e:	d10e      	bne.n	800415e <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8004140:	697b      	ldr	r3, [r7, #20]
 8004142:	2220      	movs	r2, #32
 8004144:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8004148:	697b      	ldr	r3, [r7, #20]
 800414a:	2200      	movs	r2, #0
 800414c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8004150:	697b      	ldr	r3, [r7, #20]
 8004152:	2200      	movs	r2, #0
 8004154:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8004156:	6978      	ldr	r0, [r7, #20]
 8004158:	f7fe fe70 	bl	8002e3c <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800415c:	e027      	b.n	80041ae <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800415e:	7cfb      	ldrb	r3, [r7, #19]
 8004160:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8004164:	2b28      	cmp	r3, #40	; 0x28
 8004166:	d117      	bne.n	8004198 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 8004168:	697b      	ldr	r3, [r7, #20]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	681a      	ldr	r2, [r3, #0]
 800416e:	697b      	ldr	r3, [r7, #20]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	f042 0201 	orr.w	r2, r2, #1
 8004176:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004178:	697b      	ldr	r3, [r7, #20]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	681a      	ldr	r2, [r3, #0]
 800417e:	697b      	ldr	r3, [r7, #20]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004186:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8004188:	697b      	ldr	r3, [r7, #20]
 800418a:	2200      	movs	r2, #0
 800418c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800418e:	697b      	ldr	r3, [r7, #20]
 8004190:	2228      	movs	r2, #40	; 0x28
 8004192:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8004196:	e007      	b.n	80041a8 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 8004198:	697b      	ldr	r3, [r7, #20]
 800419a:	2220      	movs	r2, #32
 800419c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80041a0:	697b      	ldr	r3, [r7, #20]
 80041a2:	2200      	movs	r2, #0
 80041a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 80041a8:	6978      	ldr	r0, [r7, #20]
 80041aa:	f7fe fe3d 	bl	8002e28 <HAL_I2C_ErrorCallback>
}
 80041ae:	bf00      	nop
 80041b0:	3718      	adds	r7, #24
 80041b2:	46bd      	mov	sp, r7
 80041b4:	bd80      	pop	{r7, pc}
 80041b6:	bf00      	nop
 80041b8:	20000010 	.word	0x20000010
 80041bc:	14f8b589 	.word	0x14f8b589

080041c0 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 80041c0:	b480      	push	{r7}
 80041c2:	b085      	sub	sp, #20
 80041c4:	af00      	add	r7, sp, #0
 80041c6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80041c8:	2300      	movs	r3, #0
 80041ca:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 80041cc:	4b13      	ldr	r3, [pc, #76]	; (800421c <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	08db      	lsrs	r3, r3, #3
 80041d2:	4a13      	ldr	r2, [pc, #76]	; (8004220 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 80041d4:	fba2 2303 	umull	r2, r3, r2, r3
 80041d8:	0a1a      	lsrs	r2, r3, #8
 80041da:	4613      	mov	r3, r2
 80041dc:	009b      	lsls	r3, r3, #2
 80041de:	4413      	add	r3, r2
 80041e0:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	3b01      	subs	r3, #1
 80041e6:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	d107      	bne.n	80041fe <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041f2:	f043 0220 	orr.w	r2, r3, #32
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	641a      	str	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 80041fa:	2301      	movs	r3, #1
 80041fc:	e008      	b.n	8004210 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004208:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800420c:	d0e9      	beq.n	80041e2 <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 800420e:	2300      	movs	r3, #0
}
 8004210:	4618      	mov	r0, r3
 8004212:	3714      	adds	r7, #20
 8004214:	46bd      	mov	sp, r7
 8004216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800421a:	4770      	bx	lr
 800421c:	20000010 	.word	0x20000010
 8004220:	14f8b589 	.word	0x14f8b589

08004224 <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 8004224:	b480      	push	{r7}
 8004226:	b083      	sub	sp, #12
 8004228:	af00      	add	r7, sp, #0
 800422a:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004230:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8004234:	d103      	bne.n	800423e <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	2201      	movs	r2, #1
 800423a:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 800423c:	e007      	b.n	800424e <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004242:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8004246:	d102      	bne.n	800424e <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	2208      	movs	r2, #8
 800424c:	62da      	str	r2, [r3, #44]	; 0x2c
}
 800424e:	bf00      	nop
 8004250:	370c      	adds	r7, #12
 8004252:	46bd      	mov	sp, r7
 8004254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004258:	4770      	bx	lr
	...

0800425c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800425c:	b580      	push	{r7, lr}
 800425e:	b086      	sub	sp, #24
 8004260:	af00      	add	r7, sp, #0
 8004262:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	2b00      	cmp	r3, #0
 8004268:	d101      	bne.n	800426e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800426a:	2301      	movs	r3, #1
 800426c:	e267      	b.n	800473e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	f003 0301 	and.w	r3, r3, #1
 8004276:	2b00      	cmp	r3, #0
 8004278:	d075      	beq.n	8004366 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800427a:	4b88      	ldr	r3, [pc, #544]	; (800449c <HAL_RCC_OscConfig+0x240>)
 800427c:	689b      	ldr	r3, [r3, #8]
 800427e:	f003 030c 	and.w	r3, r3, #12
 8004282:	2b04      	cmp	r3, #4
 8004284:	d00c      	beq.n	80042a0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004286:	4b85      	ldr	r3, [pc, #532]	; (800449c <HAL_RCC_OscConfig+0x240>)
 8004288:	689b      	ldr	r3, [r3, #8]
 800428a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800428e:	2b08      	cmp	r3, #8
 8004290:	d112      	bne.n	80042b8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004292:	4b82      	ldr	r3, [pc, #520]	; (800449c <HAL_RCC_OscConfig+0x240>)
 8004294:	685b      	ldr	r3, [r3, #4]
 8004296:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800429a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800429e:	d10b      	bne.n	80042b8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80042a0:	4b7e      	ldr	r3, [pc, #504]	; (800449c <HAL_RCC_OscConfig+0x240>)
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80042a8:	2b00      	cmp	r3, #0
 80042aa:	d05b      	beq.n	8004364 <HAL_RCC_OscConfig+0x108>
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	685b      	ldr	r3, [r3, #4]
 80042b0:	2b00      	cmp	r3, #0
 80042b2:	d157      	bne.n	8004364 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80042b4:	2301      	movs	r3, #1
 80042b6:	e242      	b.n	800473e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	685b      	ldr	r3, [r3, #4]
 80042bc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80042c0:	d106      	bne.n	80042d0 <HAL_RCC_OscConfig+0x74>
 80042c2:	4b76      	ldr	r3, [pc, #472]	; (800449c <HAL_RCC_OscConfig+0x240>)
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	4a75      	ldr	r2, [pc, #468]	; (800449c <HAL_RCC_OscConfig+0x240>)
 80042c8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80042cc:	6013      	str	r3, [r2, #0]
 80042ce:	e01d      	b.n	800430c <HAL_RCC_OscConfig+0xb0>
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	685b      	ldr	r3, [r3, #4]
 80042d4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80042d8:	d10c      	bne.n	80042f4 <HAL_RCC_OscConfig+0x98>
 80042da:	4b70      	ldr	r3, [pc, #448]	; (800449c <HAL_RCC_OscConfig+0x240>)
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	4a6f      	ldr	r2, [pc, #444]	; (800449c <HAL_RCC_OscConfig+0x240>)
 80042e0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80042e4:	6013      	str	r3, [r2, #0]
 80042e6:	4b6d      	ldr	r3, [pc, #436]	; (800449c <HAL_RCC_OscConfig+0x240>)
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	4a6c      	ldr	r2, [pc, #432]	; (800449c <HAL_RCC_OscConfig+0x240>)
 80042ec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80042f0:	6013      	str	r3, [r2, #0]
 80042f2:	e00b      	b.n	800430c <HAL_RCC_OscConfig+0xb0>
 80042f4:	4b69      	ldr	r3, [pc, #420]	; (800449c <HAL_RCC_OscConfig+0x240>)
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	4a68      	ldr	r2, [pc, #416]	; (800449c <HAL_RCC_OscConfig+0x240>)
 80042fa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80042fe:	6013      	str	r3, [r2, #0]
 8004300:	4b66      	ldr	r3, [pc, #408]	; (800449c <HAL_RCC_OscConfig+0x240>)
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	4a65      	ldr	r2, [pc, #404]	; (800449c <HAL_RCC_OscConfig+0x240>)
 8004306:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800430a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	685b      	ldr	r3, [r3, #4]
 8004310:	2b00      	cmp	r3, #0
 8004312:	d013      	beq.n	800433c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004314:	f7fd ff84 	bl	8002220 <HAL_GetTick>
 8004318:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800431a:	e008      	b.n	800432e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800431c:	f7fd ff80 	bl	8002220 <HAL_GetTick>
 8004320:	4602      	mov	r2, r0
 8004322:	693b      	ldr	r3, [r7, #16]
 8004324:	1ad3      	subs	r3, r2, r3
 8004326:	2b64      	cmp	r3, #100	; 0x64
 8004328:	d901      	bls.n	800432e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800432a:	2303      	movs	r3, #3
 800432c:	e207      	b.n	800473e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800432e:	4b5b      	ldr	r3, [pc, #364]	; (800449c <HAL_RCC_OscConfig+0x240>)
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004336:	2b00      	cmp	r3, #0
 8004338:	d0f0      	beq.n	800431c <HAL_RCC_OscConfig+0xc0>
 800433a:	e014      	b.n	8004366 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800433c:	f7fd ff70 	bl	8002220 <HAL_GetTick>
 8004340:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004342:	e008      	b.n	8004356 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004344:	f7fd ff6c 	bl	8002220 <HAL_GetTick>
 8004348:	4602      	mov	r2, r0
 800434a:	693b      	ldr	r3, [r7, #16]
 800434c:	1ad3      	subs	r3, r2, r3
 800434e:	2b64      	cmp	r3, #100	; 0x64
 8004350:	d901      	bls.n	8004356 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004352:	2303      	movs	r3, #3
 8004354:	e1f3      	b.n	800473e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004356:	4b51      	ldr	r3, [pc, #324]	; (800449c <HAL_RCC_OscConfig+0x240>)
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800435e:	2b00      	cmp	r3, #0
 8004360:	d1f0      	bne.n	8004344 <HAL_RCC_OscConfig+0xe8>
 8004362:	e000      	b.n	8004366 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004364:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	f003 0302 	and.w	r3, r3, #2
 800436e:	2b00      	cmp	r3, #0
 8004370:	d063      	beq.n	800443a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004372:	4b4a      	ldr	r3, [pc, #296]	; (800449c <HAL_RCC_OscConfig+0x240>)
 8004374:	689b      	ldr	r3, [r3, #8]
 8004376:	f003 030c 	and.w	r3, r3, #12
 800437a:	2b00      	cmp	r3, #0
 800437c:	d00b      	beq.n	8004396 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800437e:	4b47      	ldr	r3, [pc, #284]	; (800449c <HAL_RCC_OscConfig+0x240>)
 8004380:	689b      	ldr	r3, [r3, #8]
 8004382:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004386:	2b08      	cmp	r3, #8
 8004388:	d11c      	bne.n	80043c4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800438a:	4b44      	ldr	r3, [pc, #272]	; (800449c <HAL_RCC_OscConfig+0x240>)
 800438c:	685b      	ldr	r3, [r3, #4]
 800438e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004392:	2b00      	cmp	r3, #0
 8004394:	d116      	bne.n	80043c4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004396:	4b41      	ldr	r3, [pc, #260]	; (800449c <HAL_RCC_OscConfig+0x240>)
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	f003 0302 	and.w	r3, r3, #2
 800439e:	2b00      	cmp	r3, #0
 80043a0:	d005      	beq.n	80043ae <HAL_RCC_OscConfig+0x152>
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	68db      	ldr	r3, [r3, #12]
 80043a6:	2b01      	cmp	r3, #1
 80043a8:	d001      	beq.n	80043ae <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80043aa:	2301      	movs	r3, #1
 80043ac:	e1c7      	b.n	800473e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80043ae:	4b3b      	ldr	r3, [pc, #236]	; (800449c <HAL_RCC_OscConfig+0x240>)
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	691b      	ldr	r3, [r3, #16]
 80043ba:	00db      	lsls	r3, r3, #3
 80043bc:	4937      	ldr	r1, [pc, #220]	; (800449c <HAL_RCC_OscConfig+0x240>)
 80043be:	4313      	orrs	r3, r2
 80043c0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80043c2:	e03a      	b.n	800443a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	68db      	ldr	r3, [r3, #12]
 80043c8:	2b00      	cmp	r3, #0
 80043ca:	d020      	beq.n	800440e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80043cc:	4b34      	ldr	r3, [pc, #208]	; (80044a0 <HAL_RCC_OscConfig+0x244>)
 80043ce:	2201      	movs	r2, #1
 80043d0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80043d2:	f7fd ff25 	bl	8002220 <HAL_GetTick>
 80043d6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80043d8:	e008      	b.n	80043ec <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80043da:	f7fd ff21 	bl	8002220 <HAL_GetTick>
 80043de:	4602      	mov	r2, r0
 80043e0:	693b      	ldr	r3, [r7, #16]
 80043e2:	1ad3      	subs	r3, r2, r3
 80043e4:	2b02      	cmp	r3, #2
 80043e6:	d901      	bls.n	80043ec <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80043e8:	2303      	movs	r3, #3
 80043ea:	e1a8      	b.n	800473e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80043ec:	4b2b      	ldr	r3, [pc, #172]	; (800449c <HAL_RCC_OscConfig+0x240>)
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	f003 0302 	and.w	r3, r3, #2
 80043f4:	2b00      	cmp	r3, #0
 80043f6:	d0f0      	beq.n	80043da <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80043f8:	4b28      	ldr	r3, [pc, #160]	; (800449c <HAL_RCC_OscConfig+0x240>)
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	691b      	ldr	r3, [r3, #16]
 8004404:	00db      	lsls	r3, r3, #3
 8004406:	4925      	ldr	r1, [pc, #148]	; (800449c <HAL_RCC_OscConfig+0x240>)
 8004408:	4313      	orrs	r3, r2
 800440a:	600b      	str	r3, [r1, #0]
 800440c:	e015      	b.n	800443a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800440e:	4b24      	ldr	r3, [pc, #144]	; (80044a0 <HAL_RCC_OscConfig+0x244>)
 8004410:	2200      	movs	r2, #0
 8004412:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004414:	f7fd ff04 	bl	8002220 <HAL_GetTick>
 8004418:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800441a:	e008      	b.n	800442e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800441c:	f7fd ff00 	bl	8002220 <HAL_GetTick>
 8004420:	4602      	mov	r2, r0
 8004422:	693b      	ldr	r3, [r7, #16]
 8004424:	1ad3      	subs	r3, r2, r3
 8004426:	2b02      	cmp	r3, #2
 8004428:	d901      	bls.n	800442e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800442a:	2303      	movs	r3, #3
 800442c:	e187      	b.n	800473e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800442e:	4b1b      	ldr	r3, [pc, #108]	; (800449c <HAL_RCC_OscConfig+0x240>)
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	f003 0302 	and.w	r3, r3, #2
 8004436:	2b00      	cmp	r3, #0
 8004438:	d1f0      	bne.n	800441c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	f003 0308 	and.w	r3, r3, #8
 8004442:	2b00      	cmp	r3, #0
 8004444:	d036      	beq.n	80044b4 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	695b      	ldr	r3, [r3, #20]
 800444a:	2b00      	cmp	r3, #0
 800444c:	d016      	beq.n	800447c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800444e:	4b15      	ldr	r3, [pc, #84]	; (80044a4 <HAL_RCC_OscConfig+0x248>)
 8004450:	2201      	movs	r2, #1
 8004452:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004454:	f7fd fee4 	bl	8002220 <HAL_GetTick>
 8004458:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800445a:	e008      	b.n	800446e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800445c:	f7fd fee0 	bl	8002220 <HAL_GetTick>
 8004460:	4602      	mov	r2, r0
 8004462:	693b      	ldr	r3, [r7, #16]
 8004464:	1ad3      	subs	r3, r2, r3
 8004466:	2b02      	cmp	r3, #2
 8004468:	d901      	bls.n	800446e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800446a:	2303      	movs	r3, #3
 800446c:	e167      	b.n	800473e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800446e:	4b0b      	ldr	r3, [pc, #44]	; (800449c <HAL_RCC_OscConfig+0x240>)
 8004470:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004472:	f003 0302 	and.w	r3, r3, #2
 8004476:	2b00      	cmp	r3, #0
 8004478:	d0f0      	beq.n	800445c <HAL_RCC_OscConfig+0x200>
 800447a:	e01b      	b.n	80044b4 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800447c:	4b09      	ldr	r3, [pc, #36]	; (80044a4 <HAL_RCC_OscConfig+0x248>)
 800447e:	2200      	movs	r2, #0
 8004480:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004482:	f7fd fecd 	bl	8002220 <HAL_GetTick>
 8004486:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004488:	e00e      	b.n	80044a8 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800448a:	f7fd fec9 	bl	8002220 <HAL_GetTick>
 800448e:	4602      	mov	r2, r0
 8004490:	693b      	ldr	r3, [r7, #16]
 8004492:	1ad3      	subs	r3, r2, r3
 8004494:	2b02      	cmp	r3, #2
 8004496:	d907      	bls.n	80044a8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004498:	2303      	movs	r3, #3
 800449a:	e150      	b.n	800473e <HAL_RCC_OscConfig+0x4e2>
 800449c:	40023800 	.word	0x40023800
 80044a0:	42470000 	.word	0x42470000
 80044a4:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80044a8:	4b88      	ldr	r3, [pc, #544]	; (80046cc <HAL_RCC_OscConfig+0x470>)
 80044aa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80044ac:	f003 0302 	and.w	r3, r3, #2
 80044b0:	2b00      	cmp	r3, #0
 80044b2:	d1ea      	bne.n	800448a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	f003 0304 	and.w	r3, r3, #4
 80044bc:	2b00      	cmp	r3, #0
 80044be:	f000 8097 	beq.w	80045f0 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80044c2:	2300      	movs	r3, #0
 80044c4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80044c6:	4b81      	ldr	r3, [pc, #516]	; (80046cc <HAL_RCC_OscConfig+0x470>)
 80044c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	d10f      	bne.n	80044f2 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80044d2:	2300      	movs	r3, #0
 80044d4:	60bb      	str	r3, [r7, #8]
 80044d6:	4b7d      	ldr	r3, [pc, #500]	; (80046cc <HAL_RCC_OscConfig+0x470>)
 80044d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044da:	4a7c      	ldr	r2, [pc, #496]	; (80046cc <HAL_RCC_OscConfig+0x470>)
 80044dc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80044e0:	6413      	str	r3, [r2, #64]	; 0x40
 80044e2:	4b7a      	ldr	r3, [pc, #488]	; (80046cc <HAL_RCC_OscConfig+0x470>)
 80044e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80044ea:	60bb      	str	r3, [r7, #8]
 80044ec:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80044ee:	2301      	movs	r3, #1
 80044f0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80044f2:	4b77      	ldr	r3, [pc, #476]	; (80046d0 <HAL_RCC_OscConfig+0x474>)
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	d118      	bne.n	8004530 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80044fe:	4b74      	ldr	r3, [pc, #464]	; (80046d0 <HAL_RCC_OscConfig+0x474>)
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	4a73      	ldr	r2, [pc, #460]	; (80046d0 <HAL_RCC_OscConfig+0x474>)
 8004504:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004508:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800450a:	f7fd fe89 	bl	8002220 <HAL_GetTick>
 800450e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004510:	e008      	b.n	8004524 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004512:	f7fd fe85 	bl	8002220 <HAL_GetTick>
 8004516:	4602      	mov	r2, r0
 8004518:	693b      	ldr	r3, [r7, #16]
 800451a:	1ad3      	subs	r3, r2, r3
 800451c:	2b02      	cmp	r3, #2
 800451e:	d901      	bls.n	8004524 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8004520:	2303      	movs	r3, #3
 8004522:	e10c      	b.n	800473e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004524:	4b6a      	ldr	r3, [pc, #424]	; (80046d0 <HAL_RCC_OscConfig+0x474>)
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800452c:	2b00      	cmp	r3, #0
 800452e:	d0f0      	beq.n	8004512 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	689b      	ldr	r3, [r3, #8]
 8004534:	2b01      	cmp	r3, #1
 8004536:	d106      	bne.n	8004546 <HAL_RCC_OscConfig+0x2ea>
 8004538:	4b64      	ldr	r3, [pc, #400]	; (80046cc <HAL_RCC_OscConfig+0x470>)
 800453a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800453c:	4a63      	ldr	r2, [pc, #396]	; (80046cc <HAL_RCC_OscConfig+0x470>)
 800453e:	f043 0301 	orr.w	r3, r3, #1
 8004542:	6713      	str	r3, [r2, #112]	; 0x70
 8004544:	e01c      	b.n	8004580 <HAL_RCC_OscConfig+0x324>
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	689b      	ldr	r3, [r3, #8]
 800454a:	2b05      	cmp	r3, #5
 800454c:	d10c      	bne.n	8004568 <HAL_RCC_OscConfig+0x30c>
 800454e:	4b5f      	ldr	r3, [pc, #380]	; (80046cc <HAL_RCC_OscConfig+0x470>)
 8004550:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004552:	4a5e      	ldr	r2, [pc, #376]	; (80046cc <HAL_RCC_OscConfig+0x470>)
 8004554:	f043 0304 	orr.w	r3, r3, #4
 8004558:	6713      	str	r3, [r2, #112]	; 0x70
 800455a:	4b5c      	ldr	r3, [pc, #368]	; (80046cc <HAL_RCC_OscConfig+0x470>)
 800455c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800455e:	4a5b      	ldr	r2, [pc, #364]	; (80046cc <HAL_RCC_OscConfig+0x470>)
 8004560:	f043 0301 	orr.w	r3, r3, #1
 8004564:	6713      	str	r3, [r2, #112]	; 0x70
 8004566:	e00b      	b.n	8004580 <HAL_RCC_OscConfig+0x324>
 8004568:	4b58      	ldr	r3, [pc, #352]	; (80046cc <HAL_RCC_OscConfig+0x470>)
 800456a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800456c:	4a57      	ldr	r2, [pc, #348]	; (80046cc <HAL_RCC_OscConfig+0x470>)
 800456e:	f023 0301 	bic.w	r3, r3, #1
 8004572:	6713      	str	r3, [r2, #112]	; 0x70
 8004574:	4b55      	ldr	r3, [pc, #340]	; (80046cc <HAL_RCC_OscConfig+0x470>)
 8004576:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004578:	4a54      	ldr	r2, [pc, #336]	; (80046cc <HAL_RCC_OscConfig+0x470>)
 800457a:	f023 0304 	bic.w	r3, r3, #4
 800457e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	689b      	ldr	r3, [r3, #8]
 8004584:	2b00      	cmp	r3, #0
 8004586:	d015      	beq.n	80045b4 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004588:	f7fd fe4a 	bl	8002220 <HAL_GetTick>
 800458c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800458e:	e00a      	b.n	80045a6 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004590:	f7fd fe46 	bl	8002220 <HAL_GetTick>
 8004594:	4602      	mov	r2, r0
 8004596:	693b      	ldr	r3, [r7, #16]
 8004598:	1ad3      	subs	r3, r2, r3
 800459a:	f241 3288 	movw	r2, #5000	; 0x1388
 800459e:	4293      	cmp	r3, r2
 80045a0:	d901      	bls.n	80045a6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80045a2:	2303      	movs	r3, #3
 80045a4:	e0cb      	b.n	800473e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80045a6:	4b49      	ldr	r3, [pc, #292]	; (80046cc <HAL_RCC_OscConfig+0x470>)
 80045a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80045aa:	f003 0302 	and.w	r3, r3, #2
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	d0ee      	beq.n	8004590 <HAL_RCC_OscConfig+0x334>
 80045b2:	e014      	b.n	80045de <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80045b4:	f7fd fe34 	bl	8002220 <HAL_GetTick>
 80045b8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80045ba:	e00a      	b.n	80045d2 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80045bc:	f7fd fe30 	bl	8002220 <HAL_GetTick>
 80045c0:	4602      	mov	r2, r0
 80045c2:	693b      	ldr	r3, [r7, #16]
 80045c4:	1ad3      	subs	r3, r2, r3
 80045c6:	f241 3288 	movw	r2, #5000	; 0x1388
 80045ca:	4293      	cmp	r3, r2
 80045cc:	d901      	bls.n	80045d2 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80045ce:	2303      	movs	r3, #3
 80045d0:	e0b5      	b.n	800473e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80045d2:	4b3e      	ldr	r3, [pc, #248]	; (80046cc <HAL_RCC_OscConfig+0x470>)
 80045d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80045d6:	f003 0302 	and.w	r3, r3, #2
 80045da:	2b00      	cmp	r3, #0
 80045dc:	d1ee      	bne.n	80045bc <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80045de:	7dfb      	ldrb	r3, [r7, #23]
 80045e0:	2b01      	cmp	r3, #1
 80045e2:	d105      	bne.n	80045f0 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80045e4:	4b39      	ldr	r3, [pc, #228]	; (80046cc <HAL_RCC_OscConfig+0x470>)
 80045e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045e8:	4a38      	ldr	r2, [pc, #224]	; (80046cc <HAL_RCC_OscConfig+0x470>)
 80045ea:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80045ee:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	699b      	ldr	r3, [r3, #24]
 80045f4:	2b00      	cmp	r3, #0
 80045f6:	f000 80a1 	beq.w	800473c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80045fa:	4b34      	ldr	r3, [pc, #208]	; (80046cc <HAL_RCC_OscConfig+0x470>)
 80045fc:	689b      	ldr	r3, [r3, #8]
 80045fe:	f003 030c 	and.w	r3, r3, #12
 8004602:	2b08      	cmp	r3, #8
 8004604:	d05c      	beq.n	80046c0 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	699b      	ldr	r3, [r3, #24]
 800460a:	2b02      	cmp	r3, #2
 800460c:	d141      	bne.n	8004692 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800460e:	4b31      	ldr	r3, [pc, #196]	; (80046d4 <HAL_RCC_OscConfig+0x478>)
 8004610:	2200      	movs	r2, #0
 8004612:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004614:	f7fd fe04 	bl	8002220 <HAL_GetTick>
 8004618:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800461a:	e008      	b.n	800462e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800461c:	f7fd fe00 	bl	8002220 <HAL_GetTick>
 8004620:	4602      	mov	r2, r0
 8004622:	693b      	ldr	r3, [r7, #16]
 8004624:	1ad3      	subs	r3, r2, r3
 8004626:	2b02      	cmp	r3, #2
 8004628:	d901      	bls.n	800462e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800462a:	2303      	movs	r3, #3
 800462c:	e087      	b.n	800473e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800462e:	4b27      	ldr	r3, [pc, #156]	; (80046cc <HAL_RCC_OscConfig+0x470>)
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004636:	2b00      	cmp	r3, #0
 8004638:	d1f0      	bne.n	800461c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	69da      	ldr	r2, [r3, #28]
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	6a1b      	ldr	r3, [r3, #32]
 8004642:	431a      	orrs	r2, r3
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004648:	019b      	lsls	r3, r3, #6
 800464a:	431a      	orrs	r2, r3
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004650:	085b      	lsrs	r3, r3, #1
 8004652:	3b01      	subs	r3, #1
 8004654:	041b      	lsls	r3, r3, #16
 8004656:	431a      	orrs	r2, r3
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800465c:	061b      	lsls	r3, r3, #24
 800465e:	491b      	ldr	r1, [pc, #108]	; (80046cc <HAL_RCC_OscConfig+0x470>)
 8004660:	4313      	orrs	r3, r2
 8004662:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004664:	4b1b      	ldr	r3, [pc, #108]	; (80046d4 <HAL_RCC_OscConfig+0x478>)
 8004666:	2201      	movs	r2, #1
 8004668:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800466a:	f7fd fdd9 	bl	8002220 <HAL_GetTick>
 800466e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004670:	e008      	b.n	8004684 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004672:	f7fd fdd5 	bl	8002220 <HAL_GetTick>
 8004676:	4602      	mov	r2, r0
 8004678:	693b      	ldr	r3, [r7, #16]
 800467a:	1ad3      	subs	r3, r2, r3
 800467c:	2b02      	cmp	r3, #2
 800467e:	d901      	bls.n	8004684 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004680:	2303      	movs	r3, #3
 8004682:	e05c      	b.n	800473e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004684:	4b11      	ldr	r3, [pc, #68]	; (80046cc <HAL_RCC_OscConfig+0x470>)
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800468c:	2b00      	cmp	r3, #0
 800468e:	d0f0      	beq.n	8004672 <HAL_RCC_OscConfig+0x416>
 8004690:	e054      	b.n	800473c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004692:	4b10      	ldr	r3, [pc, #64]	; (80046d4 <HAL_RCC_OscConfig+0x478>)
 8004694:	2200      	movs	r2, #0
 8004696:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004698:	f7fd fdc2 	bl	8002220 <HAL_GetTick>
 800469c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800469e:	e008      	b.n	80046b2 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80046a0:	f7fd fdbe 	bl	8002220 <HAL_GetTick>
 80046a4:	4602      	mov	r2, r0
 80046a6:	693b      	ldr	r3, [r7, #16]
 80046a8:	1ad3      	subs	r3, r2, r3
 80046aa:	2b02      	cmp	r3, #2
 80046ac:	d901      	bls.n	80046b2 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80046ae:	2303      	movs	r3, #3
 80046b0:	e045      	b.n	800473e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80046b2:	4b06      	ldr	r3, [pc, #24]	; (80046cc <HAL_RCC_OscConfig+0x470>)
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80046ba:	2b00      	cmp	r3, #0
 80046bc:	d1f0      	bne.n	80046a0 <HAL_RCC_OscConfig+0x444>
 80046be:	e03d      	b.n	800473c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	699b      	ldr	r3, [r3, #24]
 80046c4:	2b01      	cmp	r3, #1
 80046c6:	d107      	bne.n	80046d8 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80046c8:	2301      	movs	r3, #1
 80046ca:	e038      	b.n	800473e <HAL_RCC_OscConfig+0x4e2>
 80046cc:	40023800 	.word	0x40023800
 80046d0:	40007000 	.word	0x40007000
 80046d4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80046d8:	4b1b      	ldr	r3, [pc, #108]	; (8004748 <HAL_RCC_OscConfig+0x4ec>)
 80046da:	685b      	ldr	r3, [r3, #4]
 80046dc:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	699b      	ldr	r3, [r3, #24]
 80046e2:	2b01      	cmp	r3, #1
 80046e4:	d028      	beq.n	8004738 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80046f0:	429a      	cmp	r2, r3
 80046f2:	d121      	bne.n	8004738 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80046f4:	68fb      	ldr	r3, [r7, #12]
 80046f6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80046fe:	429a      	cmp	r2, r3
 8004700:	d11a      	bne.n	8004738 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004702:	68fa      	ldr	r2, [r7, #12]
 8004704:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004708:	4013      	ands	r3, r2
 800470a:	687a      	ldr	r2, [r7, #4]
 800470c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800470e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004710:	4293      	cmp	r3, r2
 8004712:	d111      	bne.n	8004738 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004714:	68fb      	ldr	r3, [r7, #12]
 8004716:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800471e:	085b      	lsrs	r3, r3, #1
 8004720:	3b01      	subs	r3, #1
 8004722:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004724:	429a      	cmp	r2, r3
 8004726:	d107      	bne.n	8004738 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004728:	68fb      	ldr	r3, [r7, #12]
 800472a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004732:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004734:	429a      	cmp	r2, r3
 8004736:	d001      	beq.n	800473c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8004738:	2301      	movs	r3, #1
 800473a:	e000      	b.n	800473e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800473c:	2300      	movs	r3, #0
}
 800473e:	4618      	mov	r0, r3
 8004740:	3718      	adds	r7, #24
 8004742:	46bd      	mov	sp, r7
 8004744:	bd80      	pop	{r7, pc}
 8004746:	bf00      	nop
 8004748:	40023800 	.word	0x40023800

0800474c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800474c:	b580      	push	{r7, lr}
 800474e:	b084      	sub	sp, #16
 8004750:	af00      	add	r7, sp, #0
 8004752:	6078      	str	r0, [r7, #4]
 8004754:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	2b00      	cmp	r3, #0
 800475a:	d101      	bne.n	8004760 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800475c:	2301      	movs	r3, #1
 800475e:	e0cc      	b.n	80048fa <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004760:	4b68      	ldr	r3, [pc, #416]	; (8004904 <HAL_RCC_ClockConfig+0x1b8>)
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	f003 0307 	and.w	r3, r3, #7
 8004768:	683a      	ldr	r2, [r7, #0]
 800476a:	429a      	cmp	r2, r3
 800476c:	d90c      	bls.n	8004788 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800476e:	4b65      	ldr	r3, [pc, #404]	; (8004904 <HAL_RCC_ClockConfig+0x1b8>)
 8004770:	683a      	ldr	r2, [r7, #0]
 8004772:	b2d2      	uxtb	r2, r2
 8004774:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004776:	4b63      	ldr	r3, [pc, #396]	; (8004904 <HAL_RCC_ClockConfig+0x1b8>)
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	f003 0307 	and.w	r3, r3, #7
 800477e:	683a      	ldr	r2, [r7, #0]
 8004780:	429a      	cmp	r2, r3
 8004782:	d001      	beq.n	8004788 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004784:	2301      	movs	r3, #1
 8004786:	e0b8      	b.n	80048fa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	f003 0302 	and.w	r3, r3, #2
 8004790:	2b00      	cmp	r3, #0
 8004792:	d020      	beq.n	80047d6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	f003 0304 	and.w	r3, r3, #4
 800479c:	2b00      	cmp	r3, #0
 800479e:	d005      	beq.n	80047ac <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80047a0:	4b59      	ldr	r3, [pc, #356]	; (8004908 <HAL_RCC_ClockConfig+0x1bc>)
 80047a2:	689b      	ldr	r3, [r3, #8]
 80047a4:	4a58      	ldr	r2, [pc, #352]	; (8004908 <HAL_RCC_ClockConfig+0x1bc>)
 80047a6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80047aa:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	f003 0308 	and.w	r3, r3, #8
 80047b4:	2b00      	cmp	r3, #0
 80047b6:	d005      	beq.n	80047c4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80047b8:	4b53      	ldr	r3, [pc, #332]	; (8004908 <HAL_RCC_ClockConfig+0x1bc>)
 80047ba:	689b      	ldr	r3, [r3, #8]
 80047bc:	4a52      	ldr	r2, [pc, #328]	; (8004908 <HAL_RCC_ClockConfig+0x1bc>)
 80047be:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80047c2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80047c4:	4b50      	ldr	r3, [pc, #320]	; (8004908 <HAL_RCC_ClockConfig+0x1bc>)
 80047c6:	689b      	ldr	r3, [r3, #8]
 80047c8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	689b      	ldr	r3, [r3, #8]
 80047d0:	494d      	ldr	r1, [pc, #308]	; (8004908 <HAL_RCC_ClockConfig+0x1bc>)
 80047d2:	4313      	orrs	r3, r2
 80047d4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	f003 0301 	and.w	r3, r3, #1
 80047de:	2b00      	cmp	r3, #0
 80047e0:	d044      	beq.n	800486c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	685b      	ldr	r3, [r3, #4]
 80047e6:	2b01      	cmp	r3, #1
 80047e8:	d107      	bne.n	80047fa <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80047ea:	4b47      	ldr	r3, [pc, #284]	; (8004908 <HAL_RCC_ClockConfig+0x1bc>)
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80047f2:	2b00      	cmp	r3, #0
 80047f4:	d119      	bne.n	800482a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80047f6:	2301      	movs	r3, #1
 80047f8:	e07f      	b.n	80048fa <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	685b      	ldr	r3, [r3, #4]
 80047fe:	2b02      	cmp	r3, #2
 8004800:	d003      	beq.n	800480a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004806:	2b03      	cmp	r3, #3
 8004808:	d107      	bne.n	800481a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800480a:	4b3f      	ldr	r3, [pc, #252]	; (8004908 <HAL_RCC_ClockConfig+0x1bc>)
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004812:	2b00      	cmp	r3, #0
 8004814:	d109      	bne.n	800482a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004816:	2301      	movs	r3, #1
 8004818:	e06f      	b.n	80048fa <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800481a:	4b3b      	ldr	r3, [pc, #236]	; (8004908 <HAL_RCC_ClockConfig+0x1bc>)
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	f003 0302 	and.w	r3, r3, #2
 8004822:	2b00      	cmp	r3, #0
 8004824:	d101      	bne.n	800482a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004826:	2301      	movs	r3, #1
 8004828:	e067      	b.n	80048fa <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800482a:	4b37      	ldr	r3, [pc, #220]	; (8004908 <HAL_RCC_ClockConfig+0x1bc>)
 800482c:	689b      	ldr	r3, [r3, #8]
 800482e:	f023 0203 	bic.w	r2, r3, #3
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	685b      	ldr	r3, [r3, #4]
 8004836:	4934      	ldr	r1, [pc, #208]	; (8004908 <HAL_RCC_ClockConfig+0x1bc>)
 8004838:	4313      	orrs	r3, r2
 800483a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800483c:	f7fd fcf0 	bl	8002220 <HAL_GetTick>
 8004840:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004842:	e00a      	b.n	800485a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004844:	f7fd fcec 	bl	8002220 <HAL_GetTick>
 8004848:	4602      	mov	r2, r0
 800484a:	68fb      	ldr	r3, [r7, #12]
 800484c:	1ad3      	subs	r3, r2, r3
 800484e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004852:	4293      	cmp	r3, r2
 8004854:	d901      	bls.n	800485a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004856:	2303      	movs	r3, #3
 8004858:	e04f      	b.n	80048fa <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800485a:	4b2b      	ldr	r3, [pc, #172]	; (8004908 <HAL_RCC_ClockConfig+0x1bc>)
 800485c:	689b      	ldr	r3, [r3, #8]
 800485e:	f003 020c 	and.w	r2, r3, #12
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	685b      	ldr	r3, [r3, #4]
 8004866:	009b      	lsls	r3, r3, #2
 8004868:	429a      	cmp	r2, r3
 800486a:	d1eb      	bne.n	8004844 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800486c:	4b25      	ldr	r3, [pc, #148]	; (8004904 <HAL_RCC_ClockConfig+0x1b8>)
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	f003 0307 	and.w	r3, r3, #7
 8004874:	683a      	ldr	r2, [r7, #0]
 8004876:	429a      	cmp	r2, r3
 8004878:	d20c      	bcs.n	8004894 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800487a:	4b22      	ldr	r3, [pc, #136]	; (8004904 <HAL_RCC_ClockConfig+0x1b8>)
 800487c:	683a      	ldr	r2, [r7, #0]
 800487e:	b2d2      	uxtb	r2, r2
 8004880:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004882:	4b20      	ldr	r3, [pc, #128]	; (8004904 <HAL_RCC_ClockConfig+0x1b8>)
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	f003 0307 	and.w	r3, r3, #7
 800488a:	683a      	ldr	r2, [r7, #0]
 800488c:	429a      	cmp	r2, r3
 800488e:	d001      	beq.n	8004894 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004890:	2301      	movs	r3, #1
 8004892:	e032      	b.n	80048fa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	f003 0304 	and.w	r3, r3, #4
 800489c:	2b00      	cmp	r3, #0
 800489e:	d008      	beq.n	80048b2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80048a0:	4b19      	ldr	r3, [pc, #100]	; (8004908 <HAL_RCC_ClockConfig+0x1bc>)
 80048a2:	689b      	ldr	r3, [r3, #8]
 80048a4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	68db      	ldr	r3, [r3, #12]
 80048ac:	4916      	ldr	r1, [pc, #88]	; (8004908 <HAL_RCC_ClockConfig+0x1bc>)
 80048ae:	4313      	orrs	r3, r2
 80048b0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	f003 0308 	and.w	r3, r3, #8
 80048ba:	2b00      	cmp	r3, #0
 80048bc:	d009      	beq.n	80048d2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80048be:	4b12      	ldr	r3, [pc, #72]	; (8004908 <HAL_RCC_ClockConfig+0x1bc>)
 80048c0:	689b      	ldr	r3, [r3, #8]
 80048c2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	691b      	ldr	r3, [r3, #16]
 80048ca:	00db      	lsls	r3, r3, #3
 80048cc:	490e      	ldr	r1, [pc, #56]	; (8004908 <HAL_RCC_ClockConfig+0x1bc>)
 80048ce:	4313      	orrs	r3, r2
 80048d0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80048d2:	f000 f821 	bl	8004918 <HAL_RCC_GetSysClockFreq>
 80048d6:	4602      	mov	r2, r0
 80048d8:	4b0b      	ldr	r3, [pc, #44]	; (8004908 <HAL_RCC_ClockConfig+0x1bc>)
 80048da:	689b      	ldr	r3, [r3, #8]
 80048dc:	091b      	lsrs	r3, r3, #4
 80048de:	f003 030f 	and.w	r3, r3, #15
 80048e2:	490a      	ldr	r1, [pc, #40]	; (800490c <HAL_RCC_ClockConfig+0x1c0>)
 80048e4:	5ccb      	ldrb	r3, [r1, r3]
 80048e6:	fa22 f303 	lsr.w	r3, r2, r3
 80048ea:	4a09      	ldr	r2, [pc, #36]	; (8004910 <HAL_RCC_ClockConfig+0x1c4>)
 80048ec:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80048ee:	4b09      	ldr	r3, [pc, #36]	; (8004914 <HAL_RCC_ClockConfig+0x1c8>)
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	4618      	mov	r0, r3
 80048f4:	f7fd fc50 	bl	8002198 <HAL_InitTick>

  return HAL_OK;
 80048f8:	2300      	movs	r3, #0
}
 80048fa:	4618      	mov	r0, r3
 80048fc:	3710      	adds	r7, #16
 80048fe:	46bd      	mov	sp, r7
 8004900:	bd80      	pop	{r7, pc}
 8004902:	bf00      	nop
 8004904:	40023c00 	.word	0x40023c00
 8004908:	40023800 	.word	0x40023800
 800490c:	080066bc 	.word	0x080066bc
 8004910:	20000010 	.word	0x20000010
 8004914:	20000014 	.word	0x20000014

08004918 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004918:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800491c:	b094      	sub	sp, #80	; 0x50
 800491e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004920:	2300      	movs	r3, #0
 8004922:	647b      	str	r3, [r7, #68]	; 0x44
 8004924:	2300      	movs	r3, #0
 8004926:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004928:	2300      	movs	r3, #0
 800492a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 800492c:	2300      	movs	r3, #0
 800492e:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004930:	4b79      	ldr	r3, [pc, #484]	; (8004b18 <HAL_RCC_GetSysClockFreq+0x200>)
 8004932:	689b      	ldr	r3, [r3, #8]
 8004934:	f003 030c 	and.w	r3, r3, #12
 8004938:	2b08      	cmp	r3, #8
 800493a:	d00d      	beq.n	8004958 <HAL_RCC_GetSysClockFreq+0x40>
 800493c:	2b08      	cmp	r3, #8
 800493e:	f200 80e1 	bhi.w	8004b04 <HAL_RCC_GetSysClockFreq+0x1ec>
 8004942:	2b00      	cmp	r3, #0
 8004944:	d002      	beq.n	800494c <HAL_RCC_GetSysClockFreq+0x34>
 8004946:	2b04      	cmp	r3, #4
 8004948:	d003      	beq.n	8004952 <HAL_RCC_GetSysClockFreq+0x3a>
 800494a:	e0db      	b.n	8004b04 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800494c:	4b73      	ldr	r3, [pc, #460]	; (8004b1c <HAL_RCC_GetSysClockFreq+0x204>)
 800494e:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8004950:	e0db      	b.n	8004b0a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004952:	4b73      	ldr	r3, [pc, #460]	; (8004b20 <HAL_RCC_GetSysClockFreq+0x208>)
 8004954:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004956:	e0d8      	b.n	8004b0a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004958:	4b6f      	ldr	r3, [pc, #444]	; (8004b18 <HAL_RCC_GetSysClockFreq+0x200>)
 800495a:	685b      	ldr	r3, [r3, #4]
 800495c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004960:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004962:	4b6d      	ldr	r3, [pc, #436]	; (8004b18 <HAL_RCC_GetSysClockFreq+0x200>)
 8004964:	685b      	ldr	r3, [r3, #4]
 8004966:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800496a:	2b00      	cmp	r3, #0
 800496c:	d063      	beq.n	8004a36 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800496e:	4b6a      	ldr	r3, [pc, #424]	; (8004b18 <HAL_RCC_GetSysClockFreq+0x200>)
 8004970:	685b      	ldr	r3, [r3, #4]
 8004972:	099b      	lsrs	r3, r3, #6
 8004974:	2200      	movs	r2, #0
 8004976:	63bb      	str	r3, [r7, #56]	; 0x38
 8004978:	63fa      	str	r2, [r7, #60]	; 0x3c
 800497a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800497c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004980:	633b      	str	r3, [r7, #48]	; 0x30
 8004982:	2300      	movs	r3, #0
 8004984:	637b      	str	r3, [r7, #52]	; 0x34
 8004986:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800498a:	4622      	mov	r2, r4
 800498c:	462b      	mov	r3, r5
 800498e:	f04f 0000 	mov.w	r0, #0
 8004992:	f04f 0100 	mov.w	r1, #0
 8004996:	0159      	lsls	r1, r3, #5
 8004998:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800499c:	0150      	lsls	r0, r2, #5
 800499e:	4602      	mov	r2, r0
 80049a0:	460b      	mov	r3, r1
 80049a2:	4621      	mov	r1, r4
 80049a4:	1a51      	subs	r1, r2, r1
 80049a6:	6139      	str	r1, [r7, #16]
 80049a8:	4629      	mov	r1, r5
 80049aa:	eb63 0301 	sbc.w	r3, r3, r1
 80049ae:	617b      	str	r3, [r7, #20]
 80049b0:	f04f 0200 	mov.w	r2, #0
 80049b4:	f04f 0300 	mov.w	r3, #0
 80049b8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80049bc:	4659      	mov	r1, fp
 80049be:	018b      	lsls	r3, r1, #6
 80049c0:	4651      	mov	r1, sl
 80049c2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80049c6:	4651      	mov	r1, sl
 80049c8:	018a      	lsls	r2, r1, #6
 80049ca:	4651      	mov	r1, sl
 80049cc:	ebb2 0801 	subs.w	r8, r2, r1
 80049d0:	4659      	mov	r1, fp
 80049d2:	eb63 0901 	sbc.w	r9, r3, r1
 80049d6:	f04f 0200 	mov.w	r2, #0
 80049da:	f04f 0300 	mov.w	r3, #0
 80049de:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80049e2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80049e6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80049ea:	4690      	mov	r8, r2
 80049ec:	4699      	mov	r9, r3
 80049ee:	4623      	mov	r3, r4
 80049f0:	eb18 0303 	adds.w	r3, r8, r3
 80049f4:	60bb      	str	r3, [r7, #8]
 80049f6:	462b      	mov	r3, r5
 80049f8:	eb49 0303 	adc.w	r3, r9, r3
 80049fc:	60fb      	str	r3, [r7, #12]
 80049fe:	f04f 0200 	mov.w	r2, #0
 8004a02:	f04f 0300 	mov.w	r3, #0
 8004a06:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8004a0a:	4629      	mov	r1, r5
 8004a0c:	024b      	lsls	r3, r1, #9
 8004a0e:	4621      	mov	r1, r4
 8004a10:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004a14:	4621      	mov	r1, r4
 8004a16:	024a      	lsls	r2, r1, #9
 8004a18:	4610      	mov	r0, r2
 8004a1a:	4619      	mov	r1, r3
 8004a1c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004a1e:	2200      	movs	r2, #0
 8004a20:	62bb      	str	r3, [r7, #40]	; 0x28
 8004a22:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004a24:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004a28:	f7fb ff24 	bl	8000874 <__aeabi_uldivmod>
 8004a2c:	4602      	mov	r2, r0
 8004a2e:	460b      	mov	r3, r1
 8004a30:	4613      	mov	r3, r2
 8004a32:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004a34:	e058      	b.n	8004ae8 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004a36:	4b38      	ldr	r3, [pc, #224]	; (8004b18 <HAL_RCC_GetSysClockFreq+0x200>)
 8004a38:	685b      	ldr	r3, [r3, #4]
 8004a3a:	099b      	lsrs	r3, r3, #6
 8004a3c:	2200      	movs	r2, #0
 8004a3e:	4618      	mov	r0, r3
 8004a40:	4611      	mov	r1, r2
 8004a42:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8004a46:	623b      	str	r3, [r7, #32]
 8004a48:	2300      	movs	r3, #0
 8004a4a:	627b      	str	r3, [r7, #36]	; 0x24
 8004a4c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004a50:	4642      	mov	r2, r8
 8004a52:	464b      	mov	r3, r9
 8004a54:	f04f 0000 	mov.w	r0, #0
 8004a58:	f04f 0100 	mov.w	r1, #0
 8004a5c:	0159      	lsls	r1, r3, #5
 8004a5e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004a62:	0150      	lsls	r0, r2, #5
 8004a64:	4602      	mov	r2, r0
 8004a66:	460b      	mov	r3, r1
 8004a68:	4641      	mov	r1, r8
 8004a6a:	ebb2 0a01 	subs.w	sl, r2, r1
 8004a6e:	4649      	mov	r1, r9
 8004a70:	eb63 0b01 	sbc.w	fp, r3, r1
 8004a74:	f04f 0200 	mov.w	r2, #0
 8004a78:	f04f 0300 	mov.w	r3, #0
 8004a7c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004a80:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004a84:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004a88:	ebb2 040a 	subs.w	r4, r2, sl
 8004a8c:	eb63 050b 	sbc.w	r5, r3, fp
 8004a90:	f04f 0200 	mov.w	r2, #0
 8004a94:	f04f 0300 	mov.w	r3, #0
 8004a98:	00eb      	lsls	r3, r5, #3
 8004a9a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004a9e:	00e2      	lsls	r2, r4, #3
 8004aa0:	4614      	mov	r4, r2
 8004aa2:	461d      	mov	r5, r3
 8004aa4:	4643      	mov	r3, r8
 8004aa6:	18e3      	adds	r3, r4, r3
 8004aa8:	603b      	str	r3, [r7, #0]
 8004aaa:	464b      	mov	r3, r9
 8004aac:	eb45 0303 	adc.w	r3, r5, r3
 8004ab0:	607b      	str	r3, [r7, #4]
 8004ab2:	f04f 0200 	mov.w	r2, #0
 8004ab6:	f04f 0300 	mov.w	r3, #0
 8004aba:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004abe:	4629      	mov	r1, r5
 8004ac0:	028b      	lsls	r3, r1, #10
 8004ac2:	4621      	mov	r1, r4
 8004ac4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004ac8:	4621      	mov	r1, r4
 8004aca:	028a      	lsls	r2, r1, #10
 8004acc:	4610      	mov	r0, r2
 8004ace:	4619      	mov	r1, r3
 8004ad0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004ad2:	2200      	movs	r2, #0
 8004ad4:	61bb      	str	r3, [r7, #24]
 8004ad6:	61fa      	str	r2, [r7, #28]
 8004ad8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004adc:	f7fb feca 	bl	8000874 <__aeabi_uldivmod>
 8004ae0:	4602      	mov	r2, r0
 8004ae2:	460b      	mov	r3, r1
 8004ae4:	4613      	mov	r3, r2
 8004ae6:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004ae8:	4b0b      	ldr	r3, [pc, #44]	; (8004b18 <HAL_RCC_GetSysClockFreq+0x200>)
 8004aea:	685b      	ldr	r3, [r3, #4]
 8004aec:	0c1b      	lsrs	r3, r3, #16
 8004aee:	f003 0303 	and.w	r3, r3, #3
 8004af2:	3301      	adds	r3, #1
 8004af4:	005b      	lsls	r3, r3, #1
 8004af6:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8004af8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004afa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004afc:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b00:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004b02:	e002      	b.n	8004b0a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004b04:	4b05      	ldr	r3, [pc, #20]	; (8004b1c <HAL_RCC_GetSysClockFreq+0x204>)
 8004b06:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004b08:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004b0a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8004b0c:	4618      	mov	r0, r3
 8004b0e:	3750      	adds	r7, #80	; 0x50
 8004b10:	46bd      	mov	sp, r7
 8004b12:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004b16:	bf00      	nop
 8004b18:	40023800 	.word	0x40023800
 8004b1c:	00f42400 	.word	0x00f42400
 8004b20:	007a1200 	.word	0x007a1200

08004b24 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004b24:	b480      	push	{r7}
 8004b26:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004b28:	4b03      	ldr	r3, [pc, #12]	; (8004b38 <HAL_RCC_GetHCLKFreq+0x14>)
 8004b2a:	681b      	ldr	r3, [r3, #0]
}
 8004b2c:	4618      	mov	r0, r3
 8004b2e:	46bd      	mov	sp, r7
 8004b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b34:	4770      	bx	lr
 8004b36:	bf00      	nop
 8004b38:	20000010 	.word	0x20000010

08004b3c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004b3c:	b580      	push	{r7, lr}
 8004b3e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004b40:	f7ff fff0 	bl	8004b24 <HAL_RCC_GetHCLKFreq>
 8004b44:	4602      	mov	r2, r0
 8004b46:	4b05      	ldr	r3, [pc, #20]	; (8004b5c <HAL_RCC_GetPCLK1Freq+0x20>)
 8004b48:	689b      	ldr	r3, [r3, #8]
 8004b4a:	0a9b      	lsrs	r3, r3, #10
 8004b4c:	f003 0307 	and.w	r3, r3, #7
 8004b50:	4903      	ldr	r1, [pc, #12]	; (8004b60 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004b52:	5ccb      	ldrb	r3, [r1, r3]
 8004b54:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004b58:	4618      	mov	r0, r3
 8004b5a:	bd80      	pop	{r7, pc}
 8004b5c:	40023800 	.word	0x40023800
 8004b60:	080066cc 	.word	0x080066cc

08004b64 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004b64:	b580      	push	{r7, lr}
 8004b66:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004b68:	f7ff ffdc 	bl	8004b24 <HAL_RCC_GetHCLKFreq>
 8004b6c:	4602      	mov	r2, r0
 8004b6e:	4b05      	ldr	r3, [pc, #20]	; (8004b84 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004b70:	689b      	ldr	r3, [r3, #8]
 8004b72:	0b5b      	lsrs	r3, r3, #13
 8004b74:	f003 0307 	and.w	r3, r3, #7
 8004b78:	4903      	ldr	r1, [pc, #12]	; (8004b88 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004b7a:	5ccb      	ldrb	r3, [r1, r3]
 8004b7c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004b80:	4618      	mov	r0, r3
 8004b82:	bd80      	pop	{r7, pc}
 8004b84:	40023800 	.word	0x40023800
 8004b88:	080066cc 	.word	0x080066cc

08004b8c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004b8c:	b580      	push	{r7, lr}
 8004b8e:	b082      	sub	sp, #8
 8004b90:	af00      	add	r7, sp, #0
 8004b92:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	2b00      	cmp	r3, #0
 8004b98:	d101      	bne.n	8004b9e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004b9a:	2301      	movs	r3, #1
 8004b9c:	e07b      	b.n	8004c96 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ba2:	2b00      	cmp	r3, #0
 8004ba4:	d108      	bne.n	8004bb8 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	685b      	ldr	r3, [r3, #4]
 8004baa:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004bae:	d009      	beq.n	8004bc4 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	2200      	movs	r2, #0
 8004bb4:	61da      	str	r2, [r3, #28]
 8004bb6:	e005      	b.n	8004bc4 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	2200      	movs	r2, #0
 8004bbc:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	2200      	movs	r2, #0
 8004bc2:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	2200      	movs	r2, #0
 8004bc8:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004bd0:	b2db      	uxtb	r3, r3
 8004bd2:	2b00      	cmp	r3, #0
 8004bd4:	d106      	bne.n	8004be4 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	2200      	movs	r2, #0
 8004bda:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004bde:	6878      	ldr	r0, [r7, #4]
 8004be0:	f7fc ff76 	bl	8001ad0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	2202      	movs	r2, #2
 8004be8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	681a      	ldr	r2, [r3, #0]
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004bfa:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	685b      	ldr	r3, [r3, #4]
 8004c00:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	689b      	ldr	r3, [r3, #8]
 8004c08:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8004c0c:	431a      	orrs	r2, r3
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	68db      	ldr	r3, [r3, #12]
 8004c12:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004c16:	431a      	orrs	r2, r3
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	691b      	ldr	r3, [r3, #16]
 8004c1c:	f003 0302 	and.w	r3, r3, #2
 8004c20:	431a      	orrs	r2, r3
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	695b      	ldr	r3, [r3, #20]
 8004c26:	f003 0301 	and.w	r3, r3, #1
 8004c2a:	431a      	orrs	r2, r3
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	699b      	ldr	r3, [r3, #24]
 8004c30:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004c34:	431a      	orrs	r2, r3
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	69db      	ldr	r3, [r3, #28]
 8004c3a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004c3e:	431a      	orrs	r2, r3
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	6a1b      	ldr	r3, [r3, #32]
 8004c44:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004c48:	ea42 0103 	orr.w	r1, r2, r3
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c50:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	430a      	orrs	r2, r1
 8004c5a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	699b      	ldr	r3, [r3, #24]
 8004c60:	0c1b      	lsrs	r3, r3, #16
 8004c62:	f003 0104 	and.w	r1, r3, #4
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c6a:	f003 0210 	and.w	r2, r3, #16
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	430a      	orrs	r2, r1
 8004c74:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	69da      	ldr	r2, [r3, #28]
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004c84:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	2200      	movs	r2, #0
 8004c8a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	2201      	movs	r2, #1
 8004c90:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8004c94:	2300      	movs	r3, #0
}
 8004c96:	4618      	mov	r0, r3
 8004c98:	3708      	adds	r7, #8
 8004c9a:	46bd      	mov	sp, r7
 8004c9c:	bd80      	pop	{r7, pc}

08004c9e <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004c9e:	b580      	push	{r7, lr}
 8004ca0:	b082      	sub	sp, #8
 8004ca2:	af00      	add	r7, sp, #0
 8004ca4:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	2b00      	cmp	r3, #0
 8004caa:	d101      	bne.n	8004cb0 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004cac:	2301      	movs	r3, #1
 8004cae:	e041      	b.n	8004d34 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004cb6:	b2db      	uxtb	r3, r3
 8004cb8:	2b00      	cmp	r3, #0
 8004cba:	d106      	bne.n	8004cca <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	2200      	movs	r2, #0
 8004cc0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004cc4:	6878      	ldr	r0, [r7, #4]
 8004cc6:	f7fd f83b 	bl	8001d40 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	2202      	movs	r2, #2
 8004cce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	681a      	ldr	r2, [r3, #0]
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	3304      	adds	r3, #4
 8004cda:	4619      	mov	r1, r3
 8004cdc:	4610      	mov	r0, r2
 8004cde:	f000 fdab 	bl	8005838 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	2201      	movs	r2, #1
 8004ce6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	2201      	movs	r2, #1
 8004cee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	2201      	movs	r2, #1
 8004cf6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	2201      	movs	r2, #1
 8004cfe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	2201      	movs	r2, #1
 8004d06:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	2201      	movs	r2, #1
 8004d0e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	2201      	movs	r2, #1
 8004d16:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	2201      	movs	r2, #1
 8004d1e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	2201      	movs	r2, #1
 8004d26:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	2201      	movs	r2, #1
 8004d2e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004d32:	2300      	movs	r3, #0
}
 8004d34:	4618      	mov	r0, r3
 8004d36:	3708      	adds	r7, #8
 8004d38:	46bd      	mov	sp, r7
 8004d3a:	bd80      	pop	{r7, pc}

08004d3c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004d3c:	b480      	push	{r7}
 8004d3e:	b085      	sub	sp, #20
 8004d40:	af00      	add	r7, sp, #0
 8004d42:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004d4a:	b2db      	uxtb	r3, r3
 8004d4c:	2b01      	cmp	r3, #1
 8004d4e:	d001      	beq.n	8004d54 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004d50:	2301      	movs	r3, #1
 8004d52:	e04e      	b.n	8004df2 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	2202      	movs	r2, #2
 8004d58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	68da      	ldr	r2, [r3, #12]
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	f042 0201 	orr.w	r2, r2, #1
 8004d6a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	4a23      	ldr	r2, [pc, #140]	; (8004e00 <HAL_TIM_Base_Start_IT+0xc4>)
 8004d72:	4293      	cmp	r3, r2
 8004d74:	d022      	beq.n	8004dbc <HAL_TIM_Base_Start_IT+0x80>
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004d7e:	d01d      	beq.n	8004dbc <HAL_TIM_Base_Start_IT+0x80>
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	4a1f      	ldr	r2, [pc, #124]	; (8004e04 <HAL_TIM_Base_Start_IT+0xc8>)
 8004d86:	4293      	cmp	r3, r2
 8004d88:	d018      	beq.n	8004dbc <HAL_TIM_Base_Start_IT+0x80>
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	4a1e      	ldr	r2, [pc, #120]	; (8004e08 <HAL_TIM_Base_Start_IT+0xcc>)
 8004d90:	4293      	cmp	r3, r2
 8004d92:	d013      	beq.n	8004dbc <HAL_TIM_Base_Start_IT+0x80>
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	4a1c      	ldr	r2, [pc, #112]	; (8004e0c <HAL_TIM_Base_Start_IT+0xd0>)
 8004d9a:	4293      	cmp	r3, r2
 8004d9c:	d00e      	beq.n	8004dbc <HAL_TIM_Base_Start_IT+0x80>
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	4a1b      	ldr	r2, [pc, #108]	; (8004e10 <HAL_TIM_Base_Start_IT+0xd4>)
 8004da4:	4293      	cmp	r3, r2
 8004da6:	d009      	beq.n	8004dbc <HAL_TIM_Base_Start_IT+0x80>
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	4a19      	ldr	r2, [pc, #100]	; (8004e14 <HAL_TIM_Base_Start_IT+0xd8>)
 8004dae:	4293      	cmp	r3, r2
 8004db0:	d004      	beq.n	8004dbc <HAL_TIM_Base_Start_IT+0x80>
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	4a18      	ldr	r2, [pc, #96]	; (8004e18 <HAL_TIM_Base_Start_IT+0xdc>)
 8004db8:	4293      	cmp	r3, r2
 8004dba:	d111      	bne.n	8004de0 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	689b      	ldr	r3, [r3, #8]
 8004dc2:	f003 0307 	and.w	r3, r3, #7
 8004dc6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004dc8:	68fb      	ldr	r3, [r7, #12]
 8004dca:	2b06      	cmp	r3, #6
 8004dcc:	d010      	beq.n	8004df0 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	681a      	ldr	r2, [r3, #0]
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	f042 0201 	orr.w	r2, r2, #1
 8004ddc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004dde:	e007      	b.n	8004df0 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	681a      	ldr	r2, [r3, #0]
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	f042 0201 	orr.w	r2, r2, #1
 8004dee:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004df0:	2300      	movs	r3, #0
}
 8004df2:	4618      	mov	r0, r3
 8004df4:	3714      	adds	r7, #20
 8004df6:	46bd      	mov	sp, r7
 8004df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dfc:	4770      	bx	lr
 8004dfe:	bf00      	nop
 8004e00:	40010000 	.word	0x40010000
 8004e04:	40000400 	.word	0x40000400
 8004e08:	40000800 	.word	0x40000800
 8004e0c:	40000c00 	.word	0x40000c00
 8004e10:	40010400 	.word	0x40010400
 8004e14:	40014000 	.word	0x40014000
 8004e18:	40001800 	.word	0x40001800

08004e1c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004e1c:	b580      	push	{r7, lr}
 8004e1e:	b082      	sub	sp, #8
 8004e20:	af00      	add	r7, sp, #0
 8004e22:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	2b00      	cmp	r3, #0
 8004e28:	d101      	bne.n	8004e2e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004e2a:	2301      	movs	r3, #1
 8004e2c:	e041      	b.n	8004eb2 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004e34:	b2db      	uxtb	r3, r3
 8004e36:	2b00      	cmp	r3, #0
 8004e38:	d106      	bne.n	8004e48 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	2200      	movs	r2, #0
 8004e3e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004e42:	6878      	ldr	r0, [r7, #4]
 8004e44:	f7fc fe8c 	bl	8001b60 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	2202      	movs	r2, #2
 8004e4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	681a      	ldr	r2, [r3, #0]
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	3304      	adds	r3, #4
 8004e58:	4619      	mov	r1, r3
 8004e5a:	4610      	mov	r0, r2
 8004e5c:	f000 fcec 	bl	8005838 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	2201      	movs	r2, #1
 8004e64:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	2201      	movs	r2, #1
 8004e6c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	2201      	movs	r2, #1
 8004e74:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	2201      	movs	r2, #1
 8004e7c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	2201      	movs	r2, #1
 8004e84:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	2201      	movs	r2, #1
 8004e8c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	2201      	movs	r2, #1
 8004e94:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	2201      	movs	r2, #1
 8004e9c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	2201      	movs	r2, #1
 8004ea4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	2201      	movs	r2, #1
 8004eac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004eb0:	2300      	movs	r3, #0
}
 8004eb2:	4618      	mov	r0, r3
 8004eb4:	3708      	adds	r7, #8
 8004eb6:	46bd      	mov	sp, r7
 8004eb8:	bd80      	pop	{r7, pc}
	...

08004ebc <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004ebc:	b580      	push	{r7, lr}
 8004ebe:	b084      	sub	sp, #16
 8004ec0:	af00      	add	r7, sp, #0
 8004ec2:	6078      	str	r0, [r7, #4]
 8004ec4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004ec6:	683b      	ldr	r3, [r7, #0]
 8004ec8:	2b00      	cmp	r3, #0
 8004eca:	d109      	bne.n	8004ee0 <HAL_TIM_PWM_Start+0x24>
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004ed2:	b2db      	uxtb	r3, r3
 8004ed4:	2b01      	cmp	r3, #1
 8004ed6:	bf14      	ite	ne
 8004ed8:	2301      	movne	r3, #1
 8004eda:	2300      	moveq	r3, #0
 8004edc:	b2db      	uxtb	r3, r3
 8004ede:	e022      	b.n	8004f26 <HAL_TIM_PWM_Start+0x6a>
 8004ee0:	683b      	ldr	r3, [r7, #0]
 8004ee2:	2b04      	cmp	r3, #4
 8004ee4:	d109      	bne.n	8004efa <HAL_TIM_PWM_Start+0x3e>
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004eec:	b2db      	uxtb	r3, r3
 8004eee:	2b01      	cmp	r3, #1
 8004ef0:	bf14      	ite	ne
 8004ef2:	2301      	movne	r3, #1
 8004ef4:	2300      	moveq	r3, #0
 8004ef6:	b2db      	uxtb	r3, r3
 8004ef8:	e015      	b.n	8004f26 <HAL_TIM_PWM_Start+0x6a>
 8004efa:	683b      	ldr	r3, [r7, #0]
 8004efc:	2b08      	cmp	r3, #8
 8004efe:	d109      	bne.n	8004f14 <HAL_TIM_PWM_Start+0x58>
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004f06:	b2db      	uxtb	r3, r3
 8004f08:	2b01      	cmp	r3, #1
 8004f0a:	bf14      	ite	ne
 8004f0c:	2301      	movne	r3, #1
 8004f0e:	2300      	moveq	r3, #0
 8004f10:	b2db      	uxtb	r3, r3
 8004f12:	e008      	b.n	8004f26 <HAL_TIM_PWM_Start+0x6a>
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004f1a:	b2db      	uxtb	r3, r3
 8004f1c:	2b01      	cmp	r3, #1
 8004f1e:	bf14      	ite	ne
 8004f20:	2301      	movne	r3, #1
 8004f22:	2300      	moveq	r3, #0
 8004f24:	b2db      	uxtb	r3, r3
 8004f26:	2b00      	cmp	r3, #0
 8004f28:	d001      	beq.n	8004f2e <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8004f2a:	2301      	movs	r3, #1
 8004f2c:	e07c      	b.n	8005028 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004f2e:	683b      	ldr	r3, [r7, #0]
 8004f30:	2b00      	cmp	r3, #0
 8004f32:	d104      	bne.n	8004f3e <HAL_TIM_PWM_Start+0x82>
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	2202      	movs	r2, #2
 8004f38:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004f3c:	e013      	b.n	8004f66 <HAL_TIM_PWM_Start+0xaa>
 8004f3e:	683b      	ldr	r3, [r7, #0]
 8004f40:	2b04      	cmp	r3, #4
 8004f42:	d104      	bne.n	8004f4e <HAL_TIM_PWM_Start+0x92>
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	2202      	movs	r2, #2
 8004f48:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004f4c:	e00b      	b.n	8004f66 <HAL_TIM_PWM_Start+0xaa>
 8004f4e:	683b      	ldr	r3, [r7, #0]
 8004f50:	2b08      	cmp	r3, #8
 8004f52:	d104      	bne.n	8004f5e <HAL_TIM_PWM_Start+0xa2>
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	2202      	movs	r2, #2
 8004f58:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004f5c:	e003      	b.n	8004f66 <HAL_TIM_PWM_Start+0xaa>
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	2202      	movs	r2, #2
 8004f62:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	2201      	movs	r2, #1
 8004f6c:	6839      	ldr	r1, [r7, #0]
 8004f6e:	4618      	mov	r0, r3
 8004f70:	f000 ff58 	bl	8005e24 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	4a2d      	ldr	r2, [pc, #180]	; (8005030 <HAL_TIM_PWM_Start+0x174>)
 8004f7a:	4293      	cmp	r3, r2
 8004f7c:	d004      	beq.n	8004f88 <HAL_TIM_PWM_Start+0xcc>
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	4a2c      	ldr	r2, [pc, #176]	; (8005034 <HAL_TIM_PWM_Start+0x178>)
 8004f84:	4293      	cmp	r3, r2
 8004f86:	d101      	bne.n	8004f8c <HAL_TIM_PWM_Start+0xd0>
 8004f88:	2301      	movs	r3, #1
 8004f8a:	e000      	b.n	8004f8e <HAL_TIM_PWM_Start+0xd2>
 8004f8c:	2300      	movs	r3, #0
 8004f8e:	2b00      	cmp	r3, #0
 8004f90:	d007      	beq.n	8004fa2 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004fa0:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	4a22      	ldr	r2, [pc, #136]	; (8005030 <HAL_TIM_PWM_Start+0x174>)
 8004fa8:	4293      	cmp	r3, r2
 8004faa:	d022      	beq.n	8004ff2 <HAL_TIM_PWM_Start+0x136>
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004fb4:	d01d      	beq.n	8004ff2 <HAL_TIM_PWM_Start+0x136>
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	4a1f      	ldr	r2, [pc, #124]	; (8005038 <HAL_TIM_PWM_Start+0x17c>)
 8004fbc:	4293      	cmp	r3, r2
 8004fbe:	d018      	beq.n	8004ff2 <HAL_TIM_PWM_Start+0x136>
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	4a1d      	ldr	r2, [pc, #116]	; (800503c <HAL_TIM_PWM_Start+0x180>)
 8004fc6:	4293      	cmp	r3, r2
 8004fc8:	d013      	beq.n	8004ff2 <HAL_TIM_PWM_Start+0x136>
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	4a1c      	ldr	r2, [pc, #112]	; (8005040 <HAL_TIM_PWM_Start+0x184>)
 8004fd0:	4293      	cmp	r3, r2
 8004fd2:	d00e      	beq.n	8004ff2 <HAL_TIM_PWM_Start+0x136>
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	4a16      	ldr	r2, [pc, #88]	; (8005034 <HAL_TIM_PWM_Start+0x178>)
 8004fda:	4293      	cmp	r3, r2
 8004fdc:	d009      	beq.n	8004ff2 <HAL_TIM_PWM_Start+0x136>
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	4a18      	ldr	r2, [pc, #96]	; (8005044 <HAL_TIM_PWM_Start+0x188>)
 8004fe4:	4293      	cmp	r3, r2
 8004fe6:	d004      	beq.n	8004ff2 <HAL_TIM_PWM_Start+0x136>
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	4a16      	ldr	r2, [pc, #88]	; (8005048 <HAL_TIM_PWM_Start+0x18c>)
 8004fee:	4293      	cmp	r3, r2
 8004ff0:	d111      	bne.n	8005016 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	689b      	ldr	r3, [r3, #8]
 8004ff8:	f003 0307 	and.w	r3, r3, #7
 8004ffc:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004ffe:	68fb      	ldr	r3, [r7, #12]
 8005000:	2b06      	cmp	r3, #6
 8005002:	d010      	beq.n	8005026 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	681a      	ldr	r2, [r3, #0]
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	f042 0201 	orr.w	r2, r2, #1
 8005012:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005014:	e007      	b.n	8005026 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	681a      	ldr	r2, [r3, #0]
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	f042 0201 	orr.w	r2, r2, #1
 8005024:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005026:	2300      	movs	r3, #0
}
 8005028:	4618      	mov	r0, r3
 800502a:	3710      	adds	r7, #16
 800502c:	46bd      	mov	sp, r7
 800502e:	bd80      	pop	{r7, pc}
 8005030:	40010000 	.word	0x40010000
 8005034:	40010400 	.word	0x40010400
 8005038:	40000400 	.word	0x40000400
 800503c:	40000800 	.word	0x40000800
 8005040:	40000c00 	.word	0x40000c00
 8005044:	40014000 	.word	0x40014000
 8005048:	40001800 	.word	0x40001800

0800504c <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 800504c:	b580      	push	{r7, lr}
 800504e:	b086      	sub	sp, #24
 8005050:	af00      	add	r7, sp, #0
 8005052:	6078      	str	r0, [r7, #4]
 8005054:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	2b00      	cmp	r3, #0
 800505a:	d101      	bne.n	8005060 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 800505c:	2301      	movs	r3, #1
 800505e:	e097      	b.n	8005190 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005066:	b2db      	uxtb	r3, r3
 8005068:	2b00      	cmp	r3, #0
 800506a:	d106      	bne.n	800507a <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	2200      	movs	r2, #0
 8005070:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8005074:	6878      	ldr	r0, [r7, #4]
 8005076:	f7fc fdd5 	bl	8001c24 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	2202      	movs	r2, #2
 800507e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	689b      	ldr	r3, [r3, #8]
 8005088:	687a      	ldr	r2, [r7, #4]
 800508a:	6812      	ldr	r2, [r2, #0]
 800508c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005090:	f023 0307 	bic.w	r3, r3, #7
 8005094:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	681a      	ldr	r2, [r3, #0]
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	3304      	adds	r3, #4
 800509e:	4619      	mov	r1, r3
 80050a0:	4610      	mov	r0, r2
 80050a2:	f000 fbc9 	bl	8005838 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	689b      	ldr	r3, [r3, #8]
 80050ac:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	699b      	ldr	r3, [r3, #24]
 80050b4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	6a1b      	ldr	r3, [r3, #32]
 80050bc:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 80050be:	683b      	ldr	r3, [r7, #0]
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	697a      	ldr	r2, [r7, #20]
 80050c4:	4313      	orrs	r3, r2
 80050c6:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 80050c8:	693b      	ldr	r3, [r7, #16]
 80050ca:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80050ce:	f023 0303 	bic.w	r3, r3, #3
 80050d2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 80050d4:	683b      	ldr	r3, [r7, #0]
 80050d6:	689a      	ldr	r2, [r3, #8]
 80050d8:	683b      	ldr	r3, [r7, #0]
 80050da:	699b      	ldr	r3, [r3, #24]
 80050dc:	021b      	lsls	r3, r3, #8
 80050de:	4313      	orrs	r3, r2
 80050e0:	693a      	ldr	r2, [r7, #16]
 80050e2:	4313      	orrs	r3, r2
 80050e4:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 80050e6:	693b      	ldr	r3, [r7, #16]
 80050e8:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 80050ec:	f023 030c 	bic.w	r3, r3, #12
 80050f0:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 80050f2:	693b      	ldr	r3, [r7, #16]
 80050f4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80050f8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80050fc:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 80050fe:	683b      	ldr	r3, [r7, #0]
 8005100:	68da      	ldr	r2, [r3, #12]
 8005102:	683b      	ldr	r3, [r7, #0]
 8005104:	69db      	ldr	r3, [r3, #28]
 8005106:	021b      	lsls	r3, r3, #8
 8005108:	4313      	orrs	r3, r2
 800510a:	693a      	ldr	r2, [r7, #16]
 800510c:	4313      	orrs	r3, r2
 800510e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8005110:	683b      	ldr	r3, [r7, #0]
 8005112:	691b      	ldr	r3, [r3, #16]
 8005114:	011a      	lsls	r2, r3, #4
 8005116:	683b      	ldr	r3, [r7, #0]
 8005118:	6a1b      	ldr	r3, [r3, #32]
 800511a:	031b      	lsls	r3, r3, #12
 800511c:	4313      	orrs	r3, r2
 800511e:	693a      	ldr	r2, [r7, #16]
 8005120:	4313      	orrs	r3, r2
 8005122:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8005124:	68fb      	ldr	r3, [r7, #12]
 8005126:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 800512a:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 800512c:	68fb      	ldr	r3, [r7, #12]
 800512e:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8005132:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8005134:	683b      	ldr	r3, [r7, #0]
 8005136:	685a      	ldr	r2, [r3, #4]
 8005138:	683b      	ldr	r3, [r7, #0]
 800513a:	695b      	ldr	r3, [r3, #20]
 800513c:	011b      	lsls	r3, r3, #4
 800513e:	4313      	orrs	r3, r2
 8005140:	68fa      	ldr	r2, [r7, #12]
 8005142:	4313      	orrs	r3, r2
 8005144:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	697a      	ldr	r2, [r7, #20]
 800514c:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	693a      	ldr	r2, [r7, #16]
 8005154:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	68fa      	ldr	r2, [r7, #12]
 800515c:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	2201      	movs	r2, #1
 8005162:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	2201      	movs	r2, #1
 800516a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	2201      	movs	r2, #1
 8005172:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	2201      	movs	r2, #1
 800517a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	2201      	movs	r2, #1
 8005182:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	2201      	movs	r2, #1
 800518a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800518e:	2300      	movs	r3, #0
}
 8005190:	4618      	mov	r0, r3
 8005192:	3718      	adds	r7, #24
 8005194:	46bd      	mov	sp, r7
 8005196:	bd80      	pop	{r7, pc}

08005198 <HAL_TIM_Encoder_Start_IT>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005198:	b580      	push	{r7, lr}
 800519a:	b084      	sub	sp, #16
 800519c:	af00      	add	r7, sp, #0
 800519e:	6078      	str	r0, [r7, #4]
 80051a0:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80051a8:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80051b0:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80051b8:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80051c0:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 80051c2:	683b      	ldr	r3, [r7, #0]
 80051c4:	2b00      	cmp	r3, #0
 80051c6:	d110      	bne.n	80051ea <HAL_TIM_Encoder_Start_IT+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80051c8:	7bfb      	ldrb	r3, [r7, #15]
 80051ca:	2b01      	cmp	r3, #1
 80051cc:	d102      	bne.n	80051d4 <HAL_TIM_Encoder_Start_IT+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 80051ce:	7b7b      	ldrb	r3, [r7, #13]
 80051d0:	2b01      	cmp	r3, #1
 80051d2:	d001      	beq.n	80051d8 <HAL_TIM_Encoder_Start_IT+0x40>
    {
      return HAL_ERROR;
 80051d4:	2301      	movs	r3, #1
 80051d6:	e089      	b.n	80052ec <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	2202      	movs	r2, #2
 80051dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	2202      	movs	r2, #2
 80051e4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80051e8:	e031      	b.n	800524e <HAL_TIM_Encoder_Start_IT+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 80051ea:	683b      	ldr	r3, [r7, #0]
 80051ec:	2b04      	cmp	r3, #4
 80051ee:	d110      	bne.n	8005212 <HAL_TIM_Encoder_Start_IT+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80051f0:	7bbb      	ldrb	r3, [r7, #14]
 80051f2:	2b01      	cmp	r3, #1
 80051f4:	d102      	bne.n	80051fc <HAL_TIM_Encoder_Start_IT+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80051f6:	7b3b      	ldrb	r3, [r7, #12]
 80051f8:	2b01      	cmp	r3, #1
 80051fa:	d001      	beq.n	8005200 <HAL_TIM_Encoder_Start_IT+0x68>
    {
      return HAL_ERROR;
 80051fc:	2301      	movs	r3, #1
 80051fe:	e075      	b.n	80052ec <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	2202      	movs	r2, #2
 8005204:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	2202      	movs	r2, #2
 800520c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005210:	e01d      	b.n	800524e <HAL_TIM_Encoder_Start_IT+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8005212:	7bfb      	ldrb	r3, [r7, #15]
 8005214:	2b01      	cmp	r3, #1
 8005216:	d108      	bne.n	800522a <HAL_TIM_Encoder_Start_IT+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8005218:	7bbb      	ldrb	r3, [r7, #14]
 800521a:	2b01      	cmp	r3, #1
 800521c:	d105      	bne.n	800522a <HAL_TIM_Encoder_Start_IT+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800521e:	7b7b      	ldrb	r3, [r7, #13]
 8005220:	2b01      	cmp	r3, #1
 8005222:	d102      	bne.n	800522a <HAL_TIM_Encoder_Start_IT+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8005224:	7b3b      	ldrb	r3, [r7, #12]
 8005226:	2b01      	cmp	r3, #1
 8005228:	d001      	beq.n	800522e <HAL_TIM_Encoder_Start_IT+0x96>
    {
      return HAL_ERROR;
 800522a:	2301      	movs	r3, #1
 800522c:	e05e      	b.n	80052ec <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	2202      	movs	r2, #2
 8005232:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	2202      	movs	r2, #2
 800523a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	2202      	movs	r2, #2
 8005242:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	2202      	movs	r2, #2
 800524a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  /* Enable the capture compare Interrupts 1 and/or 2 */
  switch (Channel)
 800524e:	683b      	ldr	r3, [r7, #0]
 8005250:	2b00      	cmp	r3, #0
 8005252:	d003      	beq.n	800525c <HAL_TIM_Encoder_Start_IT+0xc4>
 8005254:	683b      	ldr	r3, [r7, #0]
 8005256:	2b04      	cmp	r3, #4
 8005258:	d010      	beq.n	800527c <HAL_TIM_Encoder_Start_IT+0xe4>
 800525a:	e01f      	b.n	800529c <HAL_TIM_Encoder_Start_IT+0x104>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	2201      	movs	r2, #1
 8005262:	2100      	movs	r1, #0
 8005264:	4618      	mov	r0, r3
 8005266:	f000 fddd 	bl	8005e24 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	68da      	ldr	r2, [r3, #12]
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	f042 0202 	orr.w	r2, r2, #2
 8005278:	60da      	str	r2, [r3, #12]
      break;
 800527a:	e02e      	b.n	80052da <HAL_TIM_Encoder_Start_IT+0x142>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	2201      	movs	r2, #1
 8005282:	2104      	movs	r1, #4
 8005284:	4618      	mov	r0, r3
 8005286:	f000 fdcd 	bl	8005e24 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	68da      	ldr	r2, [r3, #12]
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	f042 0204 	orr.w	r2, r2, #4
 8005298:	60da      	str	r2, [r3, #12]
      break;
 800529a:	e01e      	b.n	80052da <HAL_TIM_Encoder_Start_IT+0x142>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	2201      	movs	r2, #1
 80052a2:	2100      	movs	r1, #0
 80052a4:	4618      	mov	r0, r3
 80052a6:	f000 fdbd 	bl	8005e24 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	2201      	movs	r2, #1
 80052b0:	2104      	movs	r1, #4
 80052b2:	4618      	mov	r0, r3
 80052b4:	f000 fdb6 	bl	8005e24 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	68da      	ldr	r2, [r3, #12]
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	f042 0202 	orr.w	r2, r2, #2
 80052c6:	60da      	str	r2, [r3, #12]
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	68da      	ldr	r2, [r3, #12]
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	f042 0204 	orr.w	r2, r2, #4
 80052d6:	60da      	str	r2, [r3, #12]
      break;
 80052d8:	bf00      	nop
    }
  }

  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	681a      	ldr	r2, [r3, #0]
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	f042 0201 	orr.w	r2, r2, #1
 80052e8:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80052ea:	2300      	movs	r3, #0
}
 80052ec:	4618      	mov	r0, r3
 80052ee:	3710      	adds	r7, #16
 80052f0:	46bd      	mov	sp, r7
 80052f2:	bd80      	pop	{r7, pc}

080052f4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80052f4:	b580      	push	{r7, lr}
 80052f6:	b084      	sub	sp, #16
 80052f8:	af00      	add	r7, sp, #0
 80052fa:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	68db      	ldr	r3, [r3, #12]
 8005302:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	691b      	ldr	r3, [r3, #16]
 800530a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800530c:	68bb      	ldr	r3, [r7, #8]
 800530e:	f003 0302 	and.w	r3, r3, #2
 8005312:	2b00      	cmp	r3, #0
 8005314:	d020      	beq.n	8005358 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8005316:	68fb      	ldr	r3, [r7, #12]
 8005318:	f003 0302 	and.w	r3, r3, #2
 800531c:	2b00      	cmp	r3, #0
 800531e:	d01b      	beq.n	8005358 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	f06f 0202 	mvn.w	r2, #2
 8005328:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	2201      	movs	r2, #1
 800532e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	699b      	ldr	r3, [r3, #24]
 8005336:	f003 0303 	and.w	r3, r3, #3
 800533a:	2b00      	cmp	r3, #0
 800533c:	d003      	beq.n	8005346 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800533e:	6878      	ldr	r0, [r7, #4]
 8005340:	f000 fa5b 	bl	80057fa <HAL_TIM_IC_CaptureCallback>
 8005344:	e005      	b.n	8005352 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005346:	6878      	ldr	r0, [r7, #4]
 8005348:	f000 fa4d 	bl	80057e6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800534c:	6878      	ldr	r0, [r7, #4]
 800534e:	f000 fa5e 	bl	800580e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	2200      	movs	r2, #0
 8005356:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8005358:	68bb      	ldr	r3, [r7, #8]
 800535a:	f003 0304 	and.w	r3, r3, #4
 800535e:	2b00      	cmp	r3, #0
 8005360:	d020      	beq.n	80053a4 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8005362:	68fb      	ldr	r3, [r7, #12]
 8005364:	f003 0304 	and.w	r3, r3, #4
 8005368:	2b00      	cmp	r3, #0
 800536a:	d01b      	beq.n	80053a4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	f06f 0204 	mvn.w	r2, #4
 8005374:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	2202      	movs	r2, #2
 800537a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	699b      	ldr	r3, [r3, #24]
 8005382:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005386:	2b00      	cmp	r3, #0
 8005388:	d003      	beq.n	8005392 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800538a:	6878      	ldr	r0, [r7, #4]
 800538c:	f000 fa35 	bl	80057fa <HAL_TIM_IC_CaptureCallback>
 8005390:	e005      	b.n	800539e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005392:	6878      	ldr	r0, [r7, #4]
 8005394:	f000 fa27 	bl	80057e6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005398:	6878      	ldr	r0, [r7, #4]
 800539a:	f000 fa38 	bl	800580e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	2200      	movs	r2, #0
 80053a2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80053a4:	68bb      	ldr	r3, [r7, #8]
 80053a6:	f003 0308 	and.w	r3, r3, #8
 80053aa:	2b00      	cmp	r3, #0
 80053ac:	d020      	beq.n	80053f0 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80053ae:	68fb      	ldr	r3, [r7, #12]
 80053b0:	f003 0308 	and.w	r3, r3, #8
 80053b4:	2b00      	cmp	r3, #0
 80053b6:	d01b      	beq.n	80053f0 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	f06f 0208 	mvn.w	r2, #8
 80053c0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	2204      	movs	r2, #4
 80053c6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	69db      	ldr	r3, [r3, #28]
 80053ce:	f003 0303 	and.w	r3, r3, #3
 80053d2:	2b00      	cmp	r3, #0
 80053d4:	d003      	beq.n	80053de <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80053d6:	6878      	ldr	r0, [r7, #4]
 80053d8:	f000 fa0f 	bl	80057fa <HAL_TIM_IC_CaptureCallback>
 80053dc:	e005      	b.n	80053ea <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80053de:	6878      	ldr	r0, [r7, #4]
 80053e0:	f000 fa01 	bl	80057e6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80053e4:	6878      	ldr	r0, [r7, #4]
 80053e6:	f000 fa12 	bl	800580e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	2200      	movs	r2, #0
 80053ee:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80053f0:	68bb      	ldr	r3, [r7, #8]
 80053f2:	f003 0310 	and.w	r3, r3, #16
 80053f6:	2b00      	cmp	r3, #0
 80053f8:	d020      	beq.n	800543c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80053fa:	68fb      	ldr	r3, [r7, #12]
 80053fc:	f003 0310 	and.w	r3, r3, #16
 8005400:	2b00      	cmp	r3, #0
 8005402:	d01b      	beq.n	800543c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	f06f 0210 	mvn.w	r2, #16
 800540c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	2208      	movs	r2, #8
 8005412:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	69db      	ldr	r3, [r3, #28]
 800541a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800541e:	2b00      	cmp	r3, #0
 8005420:	d003      	beq.n	800542a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005422:	6878      	ldr	r0, [r7, #4]
 8005424:	f000 f9e9 	bl	80057fa <HAL_TIM_IC_CaptureCallback>
 8005428:	e005      	b.n	8005436 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800542a:	6878      	ldr	r0, [r7, #4]
 800542c:	f000 f9db 	bl	80057e6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005430:	6878      	ldr	r0, [r7, #4]
 8005432:	f000 f9ec 	bl	800580e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	2200      	movs	r2, #0
 800543a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800543c:	68bb      	ldr	r3, [r7, #8]
 800543e:	f003 0301 	and.w	r3, r3, #1
 8005442:	2b00      	cmp	r3, #0
 8005444:	d00c      	beq.n	8005460 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8005446:	68fb      	ldr	r3, [r7, #12]
 8005448:	f003 0301 	and.w	r3, r3, #1
 800544c:	2b00      	cmp	r3, #0
 800544e:	d007      	beq.n	8005460 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	f06f 0201 	mvn.w	r2, #1
 8005458:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800545a:	6878      	ldr	r0, [r7, #4]
 800545c:	f7fc fa64 	bl	8001928 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8005460:	68bb      	ldr	r3, [r7, #8]
 8005462:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005466:	2b00      	cmp	r3, #0
 8005468:	d00c      	beq.n	8005484 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800546a:	68fb      	ldr	r3, [r7, #12]
 800546c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005470:	2b00      	cmp	r3, #0
 8005472:	d007      	beq.n	8005484 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800547c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800547e:	6878      	ldr	r0, [r7, #4]
 8005480:	f000 fdce 	bl	8006020 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8005484:	68bb      	ldr	r3, [r7, #8]
 8005486:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800548a:	2b00      	cmp	r3, #0
 800548c:	d00c      	beq.n	80054a8 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800548e:	68fb      	ldr	r3, [r7, #12]
 8005490:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005494:	2b00      	cmp	r3, #0
 8005496:	d007      	beq.n	80054a8 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80054a0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80054a2:	6878      	ldr	r0, [r7, #4]
 80054a4:	f000 f9bd 	bl	8005822 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80054a8:	68bb      	ldr	r3, [r7, #8]
 80054aa:	f003 0320 	and.w	r3, r3, #32
 80054ae:	2b00      	cmp	r3, #0
 80054b0:	d00c      	beq.n	80054cc <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80054b2:	68fb      	ldr	r3, [r7, #12]
 80054b4:	f003 0320 	and.w	r3, r3, #32
 80054b8:	2b00      	cmp	r3, #0
 80054ba:	d007      	beq.n	80054cc <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	f06f 0220 	mvn.w	r2, #32
 80054c4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80054c6:	6878      	ldr	r0, [r7, #4]
 80054c8:	f000 fda0 	bl	800600c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80054cc:	bf00      	nop
 80054ce:	3710      	adds	r7, #16
 80054d0:	46bd      	mov	sp, r7
 80054d2:	bd80      	pop	{r7, pc}

080054d4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80054d4:	b580      	push	{r7, lr}
 80054d6:	b086      	sub	sp, #24
 80054d8:	af00      	add	r7, sp, #0
 80054da:	60f8      	str	r0, [r7, #12]
 80054dc:	60b9      	str	r1, [r7, #8]
 80054de:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80054e0:	2300      	movs	r3, #0
 80054e2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80054e4:	68fb      	ldr	r3, [r7, #12]
 80054e6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80054ea:	2b01      	cmp	r3, #1
 80054ec:	d101      	bne.n	80054f2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80054ee:	2302      	movs	r3, #2
 80054f0:	e0ae      	b.n	8005650 <HAL_TIM_PWM_ConfigChannel+0x17c>
 80054f2:	68fb      	ldr	r3, [r7, #12]
 80054f4:	2201      	movs	r2, #1
 80054f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	2b0c      	cmp	r3, #12
 80054fe:	f200 809f 	bhi.w	8005640 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8005502:	a201      	add	r2, pc, #4	; (adr r2, 8005508 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005504:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005508:	0800553d 	.word	0x0800553d
 800550c:	08005641 	.word	0x08005641
 8005510:	08005641 	.word	0x08005641
 8005514:	08005641 	.word	0x08005641
 8005518:	0800557d 	.word	0x0800557d
 800551c:	08005641 	.word	0x08005641
 8005520:	08005641 	.word	0x08005641
 8005524:	08005641 	.word	0x08005641
 8005528:	080055bf 	.word	0x080055bf
 800552c:	08005641 	.word	0x08005641
 8005530:	08005641 	.word	0x08005641
 8005534:	08005641 	.word	0x08005641
 8005538:	080055ff 	.word	0x080055ff
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800553c:	68fb      	ldr	r3, [r7, #12]
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	68b9      	ldr	r1, [r7, #8]
 8005542:	4618      	mov	r0, r3
 8005544:	f000 fa24 	bl	8005990 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005548:	68fb      	ldr	r3, [r7, #12]
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	699a      	ldr	r2, [r3, #24]
 800554e:	68fb      	ldr	r3, [r7, #12]
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	f042 0208 	orr.w	r2, r2, #8
 8005556:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005558:	68fb      	ldr	r3, [r7, #12]
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	699a      	ldr	r2, [r3, #24]
 800555e:	68fb      	ldr	r3, [r7, #12]
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	f022 0204 	bic.w	r2, r2, #4
 8005566:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005568:	68fb      	ldr	r3, [r7, #12]
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	6999      	ldr	r1, [r3, #24]
 800556e:	68bb      	ldr	r3, [r7, #8]
 8005570:	691a      	ldr	r2, [r3, #16]
 8005572:	68fb      	ldr	r3, [r7, #12]
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	430a      	orrs	r2, r1
 8005578:	619a      	str	r2, [r3, #24]
      break;
 800557a:	e064      	b.n	8005646 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800557c:	68fb      	ldr	r3, [r7, #12]
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	68b9      	ldr	r1, [r7, #8]
 8005582:	4618      	mov	r0, r3
 8005584:	f000 fa74 	bl	8005a70 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005588:	68fb      	ldr	r3, [r7, #12]
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	699a      	ldr	r2, [r3, #24]
 800558e:	68fb      	ldr	r3, [r7, #12]
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005596:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005598:	68fb      	ldr	r3, [r7, #12]
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	699a      	ldr	r2, [r3, #24]
 800559e:	68fb      	ldr	r3, [r7, #12]
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80055a6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80055a8:	68fb      	ldr	r3, [r7, #12]
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	6999      	ldr	r1, [r3, #24]
 80055ae:	68bb      	ldr	r3, [r7, #8]
 80055b0:	691b      	ldr	r3, [r3, #16]
 80055b2:	021a      	lsls	r2, r3, #8
 80055b4:	68fb      	ldr	r3, [r7, #12]
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	430a      	orrs	r2, r1
 80055ba:	619a      	str	r2, [r3, #24]
      break;
 80055bc:	e043      	b.n	8005646 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80055be:	68fb      	ldr	r3, [r7, #12]
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	68b9      	ldr	r1, [r7, #8]
 80055c4:	4618      	mov	r0, r3
 80055c6:	f000 fac9 	bl	8005b5c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80055ca:	68fb      	ldr	r3, [r7, #12]
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	69da      	ldr	r2, [r3, #28]
 80055d0:	68fb      	ldr	r3, [r7, #12]
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	f042 0208 	orr.w	r2, r2, #8
 80055d8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80055da:	68fb      	ldr	r3, [r7, #12]
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	69da      	ldr	r2, [r3, #28]
 80055e0:	68fb      	ldr	r3, [r7, #12]
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	f022 0204 	bic.w	r2, r2, #4
 80055e8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80055ea:	68fb      	ldr	r3, [r7, #12]
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	69d9      	ldr	r1, [r3, #28]
 80055f0:	68bb      	ldr	r3, [r7, #8]
 80055f2:	691a      	ldr	r2, [r3, #16]
 80055f4:	68fb      	ldr	r3, [r7, #12]
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	430a      	orrs	r2, r1
 80055fa:	61da      	str	r2, [r3, #28]
      break;
 80055fc:	e023      	b.n	8005646 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80055fe:	68fb      	ldr	r3, [r7, #12]
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	68b9      	ldr	r1, [r7, #8]
 8005604:	4618      	mov	r0, r3
 8005606:	f000 fb1d 	bl	8005c44 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800560a:	68fb      	ldr	r3, [r7, #12]
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	69da      	ldr	r2, [r3, #28]
 8005610:	68fb      	ldr	r3, [r7, #12]
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005618:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800561a:	68fb      	ldr	r3, [r7, #12]
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	69da      	ldr	r2, [r3, #28]
 8005620:	68fb      	ldr	r3, [r7, #12]
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005628:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800562a:	68fb      	ldr	r3, [r7, #12]
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	69d9      	ldr	r1, [r3, #28]
 8005630:	68bb      	ldr	r3, [r7, #8]
 8005632:	691b      	ldr	r3, [r3, #16]
 8005634:	021a      	lsls	r2, r3, #8
 8005636:	68fb      	ldr	r3, [r7, #12]
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	430a      	orrs	r2, r1
 800563c:	61da      	str	r2, [r3, #28]
      break;
 800563e:	e002      	b.n	8005646 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8005640:	2301      	movs	r3, #1
 8005642:	75fb      	strb	r3, [r7, #23]
      break;
 8005644:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005646:	68fb      	ldr	r3, [r7, #12]
 8005648:	2200      	movs	r2, #0
 800564a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800564e:	7dfb      	ldrb	r3, [r7, #23]
}
 8005650:	4618      	mov	r0, r3
 8005652:	3718      	adds	r7, #24
 8005654:	46bd      	mov	sp, r7
 8005656:	bd80      	pop	{r7, pc}

08005658 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005658:	b580      	push	{r7, lr}
 800565a:	b084      	sub	sp, #16
 800565c:	af00      	add	r7, sp, #0
 800565e:	6078      	str	r0, [r7, #4]
 8005660:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005662:	2300      	movs	r3, #0
 8005664:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800566c:	2b01      	cmp	r3, #1
 800566e:	d101      	bne.n	8005674 <HAL_TIM_ConfigClockSource+0x1c>
 8005670:	2302      	movs	r3, #2
 8005672:	e0b4      	b.n	80057de <HAL_TIM_ConfigClockSource+0x186>
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	2201      	movs	r2, #1
 8005678:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	2202      	movs	r2, #2
 8005680:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	689b      	ldr	r3, [r3, #8]
 800568a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800568c:	68bb      	ldr	r3, [r7, #8]
 800568e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8005692:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005694:	68bb      	ldr	r3, [r7, #8]
 8005696:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800569a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	68ba      	ldr	r2, [r7, #8]
 80056a2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80056a4:	683b      	ldr	r3, [r7, #0]
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80056ac:	d03e      	beq.n	800572c <HAL_TIM_ConfigClockSource+0xd4>
 80056ae:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80056b2:	f200 8087 	bhi.w	80057c4 <HAL_TIM_ConfigClockSource+0x16c>
 80056b6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80056ba:	f000 8086 	beq.w	80057ca <HAL_TIM_ConfigClockSource+0x172>
 80056be:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80056c2:	d87f      	bhi.n	80057c4 <HAL_TIM_ConfigClockSource+0x16c>
 80056c4:	2b70      	cmp	r3, #112	; 0x70
 80056c6:	d01a      	beq.n	80056fe <HAL_TIM_ConfigClockSource+0xa6>
 80056c8:	2b70      	cmp	r3, #112	; 0x70
 80056ca:	d87b      	bhi.n	80057c4 <HAL_TIM_ConfigClockSource+0x16c>
 80056cc:	2b60      	cmp	r3, #96	; 0x60
 80056ce:	d050      	beq.n	8005772 <HAL_TIM_ConfigClockSource+0x11a>
 80056d0:	2b60      	cmp	r3, #96	; 0x60
 80056d2:	d877      	bhi.n	80057c4 <HAL_TIM_ConfigClockSource+0x16c>
 80056d4:	2b50      	cmp	r3, #80	; 0x50
 80056d6:	d03c      	beq.n	8005752 <HAL_TIM_ConfigClockSource+0xfa>
 80056d8:	2b50      	cmp	r3, #80	; 0x50
 80056da:	d873      	bhi.n	80057c4 <HAL_TIM_ConfigClockSource+0x16c>
 80056dc:	2b40      	cmp	r3, #64	; 0x40
 80056de:	d058      	beq.n	8005792 <HAL_TIM_ConfigClockSource+0x13a>
 80056e0:	2b40      	cmp	r3, #64	; 0x40
 80056e2:	d86f      	bhi.n	80057c4 <HAL_TIM_ConfigClockSource+0x16c>
 80056e4:	2b30      	cmp	r3, #48	; 0x30
 80056e6:	d064      	beq.n	80057b2 <HAL_TIM_ConfigClockSource+0x15a>
 80056e8:	2b30      	cmp	r3, #48	; 0x30
 80056ea:	d86b      	bhi.n	80057c4 <HAL_TIM_ConfigClockSource+0x16c>
 80056ec:	2b20      	cmp	r3, #32
 80056ee:	d060      	beq.n	80057b2 <HAL_TIM_ConfigClockSource+0x15a>
 80056f0:	2b20      	cmp	r3, #32
 80056f2:	d867      	bhi.n	80057c4 <HAL_TIM_ConfigClockSource+0x16c>
 80056f4:	2b00      	cmp	r3, #0
 80056f6:	d05c      	beq.n	80057b2 <HAL_TIM_ConfigClockSource+0x15a>
 80056f8:	2b10      	cmp	r3, #16
 80056fa:	d05a      	beq.n	80057b2 <HAL_TIM_ConfigClockSource+0x15a>
 80056fc:	e062      	b.n	80057c4 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005702:	683b      	ldr	r3, [r7, #0]
 8005704:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005706:	683b      	ldr	r3, [r7, #0]
 8005708:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800570a:	683b      	ldr	r3, [r7, #0]
 800570c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800570e:	f000 fb69 	bl	8005de4 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	689b      	ldr	r3, [r3, #8]
 8005718:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800571a:	68bb      	ldr	r3, [r7, #8]
 800571c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005720:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	68ba      	ldr	r2, [r7, #8]
 8005728:	609a      	str	r2, [r3, #8]
      break;
 800572a:	e04f      	b.n	80057cc <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005730:	683b      	ldr	r3, [r7, #0]
 8005732:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005734:	683b      	ldr	r3, [r7, #0]
 8005736:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005738:	683b      	ldr	r3, [r7, #0]
 800573a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800573c:	f000 fb52 	bl	8005de4 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	689a      	ldr	r2, [r3, #8]
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800574e:	609a      	str	r2, [r3, #8]
      break;
 8005750:	e03c      	b.n	80057cc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005756:	683b      	ldr	r3, [r7, #0]
 8005758:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800575a:	683b      	ldr	r3, [r7, #0]
 800575c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800575e:	461a      	mov	r2, r3
 8005760:	f000 fac6 	bl	8005cf0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	2150      	movs	r1, #80	; 0x50
 800576a:	4618      	mov	r0, r3
 800576c:	f000 fb1f 	bl	8005dae <TIM_ITRx_SetConfig>
      break;
 8005770:	e02c      	b.n	80057cc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005776:	683b      	ldr	r3, [r7, #0]
 8005778:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800577a:	683b      	ldr	r3, [r7, #0]
 800577c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800577e:	461a      	mov	r2, r3
 8005780:	f000 fae5 	bl	8005d4e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	2160      	movs	r1, #96	; 0x60
 800578a:	4618      	mov	r0, r3
 800578c:	f000 fb0f 	bl	8005dae <TIM_ITRx_SetConfig>
      break;
 8005790:	e01c      	b.n	80057cc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005796:	683b      	ldr	r3, [r7, #0]
 8005798:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800579a:	683b      	ldr	r3, [r7, #0]
 800579c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800579e:	461a      	mov	r2, r3
 80057a0:	f000 faa6 	bl	8005cf0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	2140      	movs	r1, #64	; 0x40
 80057aa:	4618      	mov	r0, r3
 80057ac:	f000 faff 	bl	8005dae <TIM_ITRx_SetConfig>
      break;
 80057b0:	e00c      	b.n	80057cc <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	681a      	ldr	r2, [r3, #0]
 80057b6:	683b      	ldr	r3, [r7, #0]
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	4619      	mov	r1, r3
 80057bc:	4610      	mov	r0, r2
 80057be:	f000 faf6 	bl	8005dae <TIM_ITRx_SetConfig>
      break;
 80057c2:	e003      	b.n	80057cc <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80057c4:	2301      	movs	r3, #1
 80057c6:	73fb      	strb	r3, [r7, #15]
      break;
 80057c8:	e000      	b.n	80057cc <HAL_TIM_ConfigClockSource+0x174>
      break;
 80057ca:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	2201      	movs	r2, #1
 80057d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	2200      	movs	r2, #0
 80057d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80057dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80057de:	4618      	mov	r0, r3
 80057e0:	3710      	adds	r7, #16
 80057e2:	46bd      	mov	sp, r7
 80057e4:	bd80      	pop	{r7, pc}

080057e6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80057e6:	b480      	push	{r7}
 80057e8:	b083      	sub	sp, #12
 80057ea:	af00      	add	r7, sp, #0
 80057ec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80057ee:	bf00      	nop
 80057f0:	370c      	adds	r7, #12
 80057f2:	46bd      	mov	sp, r7
 80057f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057f8:	4770      	bx	lr

080057fa <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80057fa:	b480      	push	{r7}
 80057fc:	b083      	sub	sp, #12
 80057fe:	af00      	add	r7, sp, #0
 8005800:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005802:	bf00      	nop
 8005804:	370c      	adds	r7, #12
 8005806:	46bd      	mov	sp, r7
 8005808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800580c:	4770      	bx	lr

0800580e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800580e:	b480      	push	{r7}
 8005810:	b083      	sub	sp, #12
 8005812:	af00      	add	r7, sp, #0
 8005814:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005816:	bf00      	nop
 8005818:	370c      	adds	r7, #12
 800581a:	46bd      	mov	sp, r7
 800581c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005820:	4770      	bx	lr

08005822 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005822:	b480      	push	{r7}
 8005824:	b083      	sub	sp, #12
 8005826:	af00      	add	r7, sp, #0
 8005828:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800582a:	bf00      	nop
 800582c:	370c      	adds	r7, #12
 800582e:	46bd      	mov	sp, r7
 8005830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005834:	4770      	bx	lr
	...

08005838 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005838:	b480      	push	{r7}
 800583a:	b085      	sub	sp, #20
 800583c:	af00      	add	r7, sp, #0
 800583e:	6078      	str	r0, [r7, #4]
 8005840:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	4a46      	ldr	r2, [pc, #280]	; (8005964 <TIM_Base_SetConfig+0x12c>)
 800584c:	4293      	cmp	r3, r2
 800584e:	d013      	beq.n	8005878 <TIM_Base_SetConfig+0x40>
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005856:	d00f      	beq.n	8005878 <TIM_Base_SetConfig+0x40>
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	4a43      	ldr	r2, [pc, #268]	; (8005968 <TIM_Base_SetConfig+0x130>)
 800585c:	4293      	cmp	r3, r2
 800585e:	d00b      	beq.n	8005878 <TIM_Base_SetConfig+0x40>
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	4a42      	ldr	r2, [pc, #264]	; (800596c <TIM_Base_SetConfig+0x134>)
 8005864:	4293      	cmp	r3, r2
 8005866:	d007      	beq.n	8005878 <TIM_Base_SetConfig+0x40>
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	4a41      	ldr	r2, [pc, #260]	; (8005970 <TIM_Base_SetConfig+0x138>)
 800586c:	4293      	cmp	r3, r2
 800586e:	d003      	beq.n	8005878 <TIM_Base_SetConfig+0x40>
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	4a40      	ldr	r2, [pc, #256]	; (8005974 <TIM_Base_SetConfig+0x13c>)
 8005874:	4293      	cmp	r3, r2
 8005876:	d108      	bne.n	800588a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005878:	68fb      	ldr	r3, [r7, #12]
 800587a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800587e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005880:	683b      	ldr	r3, [r7, #0]
 8005882:	685b      	ldr	r3, [r3, #4]
 8005884:	68fa      	ldr	r2, [r7, #12]
 8005886:	4313      	orrs	r3, r2
 8005888:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	4a35      	ldr	r2, [pc, #212]	; (8005964 <TIM_Base_SetConfig+0x12c>)
 800588e:	4293      	cmp	r3, r2
 8005890:	d02b      	beq.n	80058ea <TIM_Base_SetConfig+0xb2>
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005898:	d027      	beq.n	80058ea <TIM_Base_SetConfig+0xb2>
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	4a32      	ldr	r2, [pc, #200]	; (8005968 <TIM_Base_SetConfig+0x130>)
 800589e:	4293      	cmp	r3, r2
 80058a0:	d023      	beq.n	80058ea <TIM_Base_SetConfig+0xb2>
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	4a31      	ldr	r2, [pc, #196]	; (800596c <TIM_Base_SetConfig+0x134>)
 80058a6:	4293      	cmp	r3, r2
 80058a8:	d01f      	beq.n	80058ea <TIM_Base_SetConfig+0xb2>
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	4a30      	ldr	r2, [pc, #192]	; (8005970 <TIM_Base_SetConfig+0x138>)
 80058ae:	4293      	cmp	r3, r2
 80058b0:	d01b      	beq.n	80058ea <TIM_Base_SetConfig+0xb2>
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	4a2f      	ldr	r2, [pc, #188]	; (8005974 <TIM_Base_SetConfig+0x13c>)
 80058b6:	4293      	cmp	r3, r2
 80058b8:	d017      	beq.n	80058ea <TIM_Base_SetConfig+0xb2>
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	4a2e      	ldr	r2, [pc, #184]	; (8005978 <TIM_Base_SetConfig+0x140>)
 80058be:	4293      	cmp	r3, r2
 80058c0:	d013      	beq.n	80058ea <TIM_Base_SetConfig+0xb2>
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	4a2d      	ldr	r2, [pc, #180]	; (800597c <TIM_Base_SetConfig+0x144>)
 80058c6:	4293      	cmp	r3, r2
 80058c8:	d00f      	beq.n	80058ea <TIM_Base_SetConfig+0xb2>
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	4a2c      	ldr	r2, [pc, #176]	; (8005980 <TIM_Base_SetConfig+0x148>)
 80058ce:	4293      	cmp	r3, r2
 80058d0:	d00b      	beq.n	80058ea <TIM_Base_SetConfig+0xb2>
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	4a2b      	ldr	r2, [pc, #172]	; (8005984 <TIM_Base_SetConfig+0x14c>)
 80058d6:	4293      	cmp	r3, r2
 80058d8:	d007      	beq.n	80058ea <TIM_Base_SetConfig+0xb2>
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	4a2a      	ldr	r2, [pc, #168]	; (8005988 <TIM_Base_SetConfig+0x150>)
 80058de:	4293      	cmp	r3, r2
 80058e0:	d003      	beq.n	80058ea <TIM_Base_SetConfig+0xb2>
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	4a29      	ldr	r2, [pc, #164]	; (800598c <TIM_Base_SetConfig+0x154>)
 80058e6:	4293      	cmp	r3, r2
 80058e8:	d108      	bne.n	80058fc <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80058ea:	68fb      	ldr	r3, [r7, #12]
 80058ec:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80058f0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80058f2:	683b      	ldr	r3, [r7, #0]
 80058f4:	68db      	ldr	r3, [r3, #12]
 80058f6:	68fa      	ldr	r2, [r7, #12]
 80058f8:	4313      	orrs	r3, r2
 80058fa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80058fc:	68fb      	ldr	r3, [r7, #12]
 80058fe:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005902:	683b      	ldr	r3, [r7, #0]
 8005904:	695b      	ldr	r3, [r3, #20]
 8005906:	4313      	orrs	r3, r2
 8005908:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	68fa      	ldr	r2, [r7, #12]
 800590e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005910:	683b      	ldr	r3, [r7, #0]
 8005912:	689a      	ldr	r2, [r3, #8]
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005918:	683b      	ldr	r3, [r7, #0]
 800591a:	681a      	ldr	r2, [r3, #0]
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	4a10      	ldr	r2, [pc, #64]	; (8005964 <TIM_Base_SetConfig+0x12c>)
 8005924:	4293      	cmp	r3, r2
 8005926:	d003      	beq.n	8005930 <TIM_Base_SetConfig+0xf8>
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	4a12      	ldr	r2, [pc, #72]	; (8005974 <TIM_Base_SetConfig+0x13c>)
 800592c:	4293      	cmp	r3, r2
 800592e:	d103      	bne.n	8005938 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005930:	683b      	ldr	r3, [r7, #0]
 8005932:	691a      	ldr	r2, [r3, #16]
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	2201      	movs	r2, #1
 800593c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	691b      	ldr	r3, [r3, #16]
 8005942:	f003 0301 	and.w	r3, r3, #1
 8005946:	2b01      	cmp	r3, #1
 8005948:	d105      	bne.n	8005956 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	691b      	ldr	r3, [r3, #16]
 800594e:	f023 0201 	bic.w	r2, r3, #1
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	611a      	str	r2, [r3, #16]
  }
}
 8005956:	bf00      	nop
 8005958:	3714      	adds	r7, #20
 800595a:	46bd      	mov	sp, r7
 800595c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005960:	4770      	bx	lr
 8005962:	bf00      	nop
 8005964:	40010000 	.word	0x40010000
 8005968:	40000400 	.word	0x40000400
 800596c:	40000800 	.word	0x40000800
 8005970:	40000c00 	.word	0x40000c00
 8005974:	40010400 	.word	0x40010400
 8005978:	40014000 	.word	0x40014000
 800597c:	40014400 	.word	0x40014400
 8005980:	40014800 	.word	0x40014800
 8005984:	40001800 	.word	0x40001800
 8005988:	40001c00 	.word	0x40001c00
 800598c:	40002000 	.word	0x40002000

08005990 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005990:	b480      	push	{r7}
 8005992:	b087      	sub	sp, #28
 8005994:	af00      	add	r7, sp, #0
 8005996:	6078      	str	r0, [r7, #4]
 8005998:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	6a1b      	ldr	r3, [r3, #32]
 800599e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	6a1b      	ldr	r3, [r3, #32]
 80059a4:	f023 0201 	bic.w	r2, r3, #1
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	685b      	ldr	r3, [r3, #4]
 80059b0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	699b      	ldr	r3, [r3, #24]
 80059b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80059b8:	68fb      	ldr	r3, [r7, #12]
 80059ba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80059be:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80059c0:	68fb      	ldr	r3, [r7, #12]
 80059c2:	f023 0303 	bic.w	r3, r3, #3
 80059c6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80059c8:	683b      	ldr	r3, [r7, #0]
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	68fa      	ldr	r2, [r7, #12]
 80059ce:	4313      	orrs	r3, r2
 80059d0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80059d2:	697b      	ldr	r3, [r7, #20]
 80059d4:	f023 0302 	bic.w	r3, r3, #2
 80059d8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80059da:	683b      	ldr	r3, [r7, #0]
 80059dc:	689b      	ldr	r3, [r3, #8]
 80059de:	697a      	ldr	r2, [r7, #20]
 80059e0:	4313      	orrs	r3, r2
 80059e2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	4a20      	ldr	r2, [pc, #128]	; (8005a68 <TIM_OC1_SetConfig+0xd8>)
 80059e8:	4293      	cmp	r3, r2
 80059ea:	d003      	beq.n	80059f4 <TIM_OC1_SetConfig+0x64>
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	4a1f      	ldr	r2, [pc, #124]	; (8005a6c <TIM_OC1_SetConfig+0xdc>)
 80059f0:	4293      	cmp	r3, r2
 80059f2:	d10c      	bne.n	8005a0e <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80059f4:	697b      	ldr	r3, [r7, #20]
 80059f6:	f023 0308 	bic.w	r3, r3, #8
 80059fa:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80059fc:	683b      	ldr	r3, [r7, #0]
 80059fe:	68db      	ldr	r3, [r3, #12]
 8005a00:	697a      	ldr	r2, [r7, #20]
 8005a02:	4313      	orrs	r3, r2
 8005a04:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005a06:	697b      	ldr	r3, [r7, #20]
 8005a08:	f023 0304 	bic.w	r3, r3, #4
 8005a0c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	4a15      	ldr	r2, [pc, #84]	; (8005a68 <TIM_OC1_SetConfig+0xd8>)
 8005a12:	4293      	cmp	r3, r2
 8005a14:	d003      	beq.n	8005a1e <TIM_OC1_SetConfig+0x8e>
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	4a14      	ldr	r2, [pc, #80]	; (8005a6c <TIM_OC1_SetConfig+0xdc>)
 8005a1a:	4293      	cmp	r3, r2
 8005a1c:	d111      	bne.n	8005a42 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005a1e:	693b      	ldr	r3, [r7, #16]
 8005a20:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005a24:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005a26:	693b      	ldr	r3, [r7, #16]
 8005a28:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005a2c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005a2e:	683b      	ldr	r3, [r7, #0]
 8005a30:	695b      	ldr	r3, [r3, #20]
 8005a32:	693a      	ldr	r2, [r7, #16]
 8005a34:	4313      	orrs	r3, r2
 8005a36:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005a38:	683b      	ldr	r3, [r7, #0]
 8005a3a:	699b      	ldr	r3, [r3, #24]
 8005a3c:	693a      	ldr	r2, [r7, #16]
 8005a3e:	4313      	orrs	r3, r2
 8005a40:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	693a      	ldr	r2, [r7, #16]
 8005a46:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	68fa      	ldr	r2, [r7, #12]
 8005a4c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005a4e:	683b      	ldr	r3, [r7, #0]
 8005a50:	685a      	ldr	r2, [r3, #4]
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	697a      	ldr	r2, [r7, #20]
 8005a5a:	621a      	str	r2, [r3, #32]
}
 8005a5c:	bf00      	nop
 8005a5e:	371c      	adds	r7, #28
 8005a60:	46bd      	mov	sp, r7
 8005a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a66:	4770      	bx	lr
 8005a68:	40010000 	.word	0x40010000
 8005a6c:	40010400 	.word	0x40010400

08005a70 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005a70:	b480      	push	{r7}
 8005a72:	b087      	sub	sp, #28
 8005a74:	af00      	add	r7, sp, #0
 8005a76:	6078      	str	r0, [r7, #4]
 8005a78:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	6a1b      	ldr	r3, [r3, #32]
 8005a7e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	6a1b      	ldr	r3, [r3, #32]
 8005a84:	f023 0210 	bic.w	r2, r3, #16
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	685b      	ldr	r3, [r3, #4]
 8005a90:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	699b      	ldr	r3, [r3, #24]
 8005a96:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005a98:	68fb      	ldr	r3, [r7, #12]
 8005a9a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005a9e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005aa0:	68fb      	ldr	r3, [r7, #12]
 8005aa2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005aa6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005aa8:	683b      	ldr	r3, [r7, #0]
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	021b      	lsls	r3, r3, #8
 8005aae:	68fa      	ldr	r2, [r7, #12]
 8005ab0:	4313      	orrs	r3, r2
 8005ab2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005ab4:	697b      	ldr	r3, [r7, #20]
 8005ab6:	f023 0320 	bic.w	r3, r3, #32
 8005aba:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005abc:	683b      	ldr	r3, [r7, #0]
 8005abe:	689b      	ldr	r3, [r3, #8]
 8005ac0:	011b      	lsls	r3, r3, #4
 8005ac2:	697a      	ldr	r2, [r7, #20]
 8005ac4:	4313      	orrs	r3, r2
 8005ac6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	4a22      	ldr	r2, [pc, #136]	; (8005b54 <TIM_OC2_SetConfig+0xe4>)
 8005acc:	4293      	cmp	r3, r2
 8005ace:	d003      	beq.n	8005ad8 <TIM_OC2_SetConfig+0x68>
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	4a21      	ldr	r2, [pc, #132]	; (8005b58 <TIM_OC2_SetConfig+0xe8>)
 8005ad4:	4293      	cmp	r3, r2
 8005ad6:	d10d      	bne.n	8005af4 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005ad8:	697b      	ldr	r3, [r7, #20]
 8005ada:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005ade:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005ae0:	683b      	ldr	r3, [r7, #0]
 8005ae2:	68db      	ldr	r3, [r3, #12]
 8005ae4:	011b      	lsls	r3, r3, #4
 8005ae6:	697a      	ldr	r2, [r7, #20]
 8005ae8:	4313      	orrs	r3, r2
 8005aea:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005aec:	697b      	ldr	r3, [r7, #20]
 8005aee:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005af2:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	4a17      	ldr	r2, [pc, #92]	; (8005b54 <TIM_OC2_SetConfig+0xe4>)
 8005af8:	4293      	cmp	r3, r2
 8005afa:	d003      	beq.n	8005b04 <TIM_OC2_SetConfig+0x94>
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	4a16      	ldr	r2, [pc, #88]	; (8005b58 <TIM_OC2_SetConfig+0xe8>)
 8005b00:	4293      	cmp	r3, r2
 8005b02:	d113      	bne.n	8005b2c <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005b04:	693b      	ldr	r3, [r7, #16]
 8005b06:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005b0a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005b0c:	693b      	ldr	r3, [r7, #16]
 8005b0e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005b12:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005b14:	683b      	ldr	r3, [r7, #0]
 8005b16:	695b      	ldr	r3, [r3, #20]
 8005b18:	009b      	lsls	r3, r3, #2
 8005b1a:	693a      	ldr	r2, [r7, #16]
 8005b1c:	4313      	orrs	r3, r2
 8005b1e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005b20:	683b      	ldr	r3, [r7, #0]
 8005b22:	699b      	ldr	r3, [r3, #24]
 8005b24:	009b      	lsls	r3, r3, #2
 8005b26:	693a      	ldr	r2, [r7, #16]
 8005b28:	4313      	orrs	r3, r2
 8005b2a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	693a      	ldr	r2, [r7, #16]
 8005b30:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	68fa      	ldr	r2, [r7, #12]
 8005b36:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005b38:	683b      	ldr	r3, [r7, #0]
 8005b3a:	685a      	ldr	r2, [r3, #4]
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	697a      	ldr	r2, [r7, #20]
 8005b44:	621a      	str	r2, [r3, #32]
}
 8005b46:	bf00      	nop
 8005b48:	371c      	adds	r7, #28
 8005b4a:	46bd      	mov	sp, r7
 8005b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b50:	4770      	bx	lr
 8005b52:	bf00      	nop
 8005b54:	40010000 	.word	0x40010000
 8005b58:	40010400 	.word	0x40010400

08005b5c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005b5c:	b480      	push	{r7}
 8005b5e:	b087      	sub	sp, #28
 8005b60:	af00      	add	r7, sp, #0
 8005b62:	6078      	str	r0, [r7, #4]
 8005b64:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	6a1b      	ldr	r3, [r3, #32]
 8005b6a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	6a1b      	ldr	r3, [r3, #32]
 8005b70:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	685b      	ldr	r3, [r3, #4]
 8005b7c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	69db      	ldr	r3, [r3, #28]
 8005b82:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005b84:	68fb      	ldr	r3, [r7, #12]
 8005b86:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005b8a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005b8c:	68fb      	ldr	r3, [r7, #12]
 8005b8e:	f023 0303 	bic.w	r3, r3, #3
 8005b92:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005b94:	683b      	ldr	r3, [r7, #0]
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	68fa      	ldr	r2, [r7, #12]
 8005b9a:	4313      	orrs	r3, r2
 8005b9c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005b9e:	697b      	ldr	r3, [r7, #20]
 8005ba0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005ba4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005ba6:	683b      	ldr	r3, [r7, #0]
 8005ba8:	689b      	ldr	r3, [r3, #8]
 8005baa:	021b      	lsls	r3, r3, #8
 8005bac:	697a      	ldr	r2, [r7, #20]
 8005bae:	4313      	orrs	r3, r2
 8005bb0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	4a21      	ldr	r2, [pc, #132]	; (8005c3c <TIM_OC3_SetConfig+0xe0>)
 8005bb6:	4293      	cmp	r3, r2
 8005bb8:	d003      	beq.n	8005bc2 <TIM_OC3_SetConfig+0x66>
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	4a20      	ldr	r2, [pc, #128]	; (8005c40 <TIM_OC3_SetConfig+0xe4>)
 8005bbe:	4293      	cmp	r3, r2
 8005bc0:	d10d      	bne.n	8005bde <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005bc2:	697b      	ldr	r3, [r7, #20]
 8005bc4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005bc8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005bca:	683b      	ldr	r3, [r7, #0]
 8005bcc:	68db      	ldr	r3, [r3, #12]
 8005bce:	021b      	lsls	r3, r3, #8
 8005bd0:	697a      	ldr	r2, [r7, #20]
 8005bd2:	4313      	orrs	r3, r2
 8005bd4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005bd6:	697b      	ldr	r3, [r7, #20]
 8005bd8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005bdc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	4a16      	ldr	r2, [pc, #88]	; (8005c3c <TIM_OC3_SetConfig+0xe0>)
 8005be2:	4293      	cmp	r3, r2
 8005be4:	d003      	beq.n	8005bee <TIM_OC3_SetConfig+0x92>
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	4a15      	ldr	r2, [pc, #84]	; (8005c40 <TIM_OC3_SetConfig+0xe4>)
 8005bea:	4293      	cmp	r3, r2
 8005bec:	d113      	bne.n	8005c16 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005bee:	693b      	ldr	r3, [r7, #16]
 8005bf0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005bf4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005bf6:	693b      	ldr	r3, [r7, #16]
 8005bf8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005bfc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005bfe:	683b      	ldr	r3, [r7, #0]
 8005c00:	695b      	ldr	r3, [r3, #20]
 8005c02:	011b      	lsls	r3, r3, #4
 8005c04:	693a      	ldr	r2, [r7, #16]
 8005c06:	4313      	orrs	r3, r2
 8005c08:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005c0a:	683b      	ldr	r3, [r7, #0]
 8005c0c:	699b      	ldr	r3, [r3, #24]
 8005c0e:	011b      	lsls	r3, r3, #4
 8005c10:	693a      	ldr	r2, [r7, #16]
 8005c12:	4313      	orrs	r3, r2
 8005c14:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	693a      	ldr	r2, [r7, #16]
 8005c1a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	68fa      	ldr	r2, [r7, #12]
 8005c20:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005c22:	683b      	ldr	r3, [r7, #0]
 8005c24:	685a      	ldr	r2, [r3, #4]
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	697a      	ldr	r2, [r7, #20]
 8005c2e:	621a      	str	r2, [r3, #32]
}
 8005c30:	bf00      	nop
 8005c32:	371c      	adds	r7, #28
 8005c34:	46bd      	mov	sp, r7
 8005c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c3a:	4770      	bx	lr
 8005c3c:	40010000 	.word	0x40010000
 8005c40:	40010400 	.word	0x40010400

08005c44 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005c44:	b480      	push	{r7}
 8005c46:	b087      	sub	sp, #28
 8005c48:	af00      	add	r7, sp, #0
 8005c4a:	6078      	str	r0, [r7, #4]
 8005c4c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	6a1b      	ldr	r3, [r3, #32]
 8005c52:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	6a1b      	ldr	r3, [r3, #32]
 8005c58:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	685b      	ldr	r3, [r3, #4]
 8005c64:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	69db      	ldr	r3, [r3, #28]
 8005c6a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005c6c:	68fb      	ldr	r3, [r7, #12]
 8005c6e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005c72:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005c74:	68fb      	ldr	r3, [r7, #12]
 8005c76:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005c7a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005c7c:	683b      	ldr	r3, [r7, #0]
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	021b      	lsls	r3, r3, #8
 8005c82:	68fa      	ldr	r2, [r7, #12]
 8005c84:	4313      	orrs	r3, r2
 8005c86:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005c88:	693b      	ldr	r3, [r7, #16]
 8005c8a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005c8e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005c90:	683b      	ldr	r3, [r7, #0]
 8005c92:	689b      	ldr	r3, [r3, #8]
 8005c94:	031b      	lsls	r3, r3, #12
 8005c96:	693a      	ldr	r2, [r7, #16]
 8005c98:	4313      	orrs	r3, r2
 8005c9a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	4a12      	ldr	r2, [pc, #72]	; (8005ce8 <TIM_OC4_SetConfig+0xa4>)
 8005ca0:	4293      	cmp	r3, r2
 8005ca2:	d003      	beq.n	8005cac <TIM_OC4_SetConfig+0x68>
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	4a11      	ldr	r2, [pc, #68]	; (8005cec <TIM_OC4_SetConfig+0xa8>)
 8005ca8:	4293      	cmp	r3, r2
 8005caa:	d109      	bne.n	8005cc0 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005cac:	697b      	ldr	r3, [r7, #20]
 8005cae:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005cb2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005cb4:	683b      	ldr	r3, [r7, #0]
 8005cb6:	695b      	ldr	r3, [r3, #20]
 8005cb8:	019b      	lsls	r3, r3, #6
 8005cba:	697a      	ldr	r2, [r7, #20]
 8005cbc:	4313      	orrs	r3, r2
 8005cbe:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	697a      	ldr	r2, [r7, #20]
 8005cc4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	68fa      	ldr	r2, [r7, #12]
 8005cca:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005ccc:	683b      	ldr	r3, [r7, #0]
 8005cce:	685a      	ldr	r2, [r3, #4]
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	693a      	ldr	r2, [r7, #16]
 8005cd8:	621a      	str	r2, [r3, #32]
}
 8005cda:	bf00      	nop
 8005cdc:	371c      	adds	r7, #28
 8005cde:	46bd      	mov	sp, r7
 8005ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ce4:	4770      	bx	lr
 8005ce6:	bf00      	nop
 8005ce8:	40010000 	.word	0x40010000
 8005cec:	40010400 	.word	0x40010400

08005cf0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005cf0:	b480      	push	{r7}
 8005cf2:	b087      	sub	sp, #28
 8005cf4:	af00      	add	r7, sp, #0
 8005cf6:	60f8      	str	r0, [r7, #12]
 8005cf8:	60b9      	str	r1, [r7, #8]
 8005cfa:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005cfc:	68fb      	ldr	r3, [r7, #12]
 8005cfe:	6a1b      	ldr	r3, [r3, #32]
 8005d00:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005d02:	68fb      	ldr	r3, [r7, #12]
 8005d04:	6a1b      	ldr	r3, [r3, #32]
 8005d06:	f023 0201 	bic.w	r2, r3, #1
 8005d0a:	68fb      	ldr	r3, [r7, #12]
 8005d0c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005d0e:	68fb      	ldr	r3, [r7, #12]
 8005d10:	699b      	ldr	r3, [r3, #24]
 8005d12:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005d14:	693b      	ldr	r3, [r7, #16]
 8005d16:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005d1a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	011b      	lsls	r3, r3, #4
 8005d20:	693a      	ldr	r2, [r7, #16]
 8005d22:	4313      	orrs	r3, r2
 8005d24:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005d26:	697b      	ldr	r3, [r7, #20]
 8005d28:	f023 030a 	bic.w	r3, r3, #10
 8005d2c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005d2e:	697a      	ldr	r2, [r7, #20]
 8005d30:	68bb      	ldr	r3, [r7, #8]
 8005d32:	4313      	orrs	r3, r2
 8005d34:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005d36:	68fb      	ldr	r3, [r7, #12]
 8005d38:	693a      	ldr	r2, [r7, #16]
 8005d3a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005d3c:	68fb      	ldr	r3, [r7, #12]
 8005d3e:	697a      	ldr	r2, [r7, #20]
 8005d40:	621a      	str	r2, [r3, #32]
}
 8005d42:	bf00      	nop
 8005d44:	371c      	adds	r7, #28
 8005d46:	46bd      	mov	sp, r7
 8005d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d4c:	4770      	bx	lr

08005d4e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005d4e:	b480      	push	{r7}
 8005d50:	b087      	sub	sp, #28
 8005d52:	af00      	add	r7, sp, #0
 8005d54:	60f8      	str	r0, [r7, #12]
 8005d56:	60b9      	str	r1, [r7, #8]
 8005d58:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8005d5a:	68fb      	ldr	r3, [r7, #12]
 8005d5c:	6a1b      	ldr	r3, [r3, #32]
 8005d5e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005d60:	68fb      	ldr	r3, [r7, #12]
 8005d62:	6a1b      	ldr	r3, [r3, #32]
 8005d64:	f023 0210 	bic.w	r2, r3, #16
 8005d68:	68fb      	ldr	r3, [r7, #12]
 8005d6a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005d6c:	68fb      	ldr	r3, [r7, #12]
 8005d6e:	699b      	ldr	r3, [r3, #24]
 8005d70:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005d72:	693b      	ldr	r3, [r7, #16]
 8005d74:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005d78:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	031b      	lsls	r3, r3, #12
 8005d7e:	693a      	ldr	r2, [r7, #16]
 8005d80:	4313      	orrs	r3, r2
 8005d82:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005d84:	697b      	ldr	r3, [r7, #20]
 8005d86:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005d8a:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005d8c:	68bb      	ldr	r3, [r7, #8]
 8005d8e:	011b      	lsls	r3, r3, #4
 8005d90:	697a      	ldr	r2, [r7, #20]
 8005d92:	4313      	orrs	r3, r2
 8005d94:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005d96:	68fb      	ldr	r3, [r7, #12]
 8005d98:	693a      	ldr	r2, [r7, #16]
 8005d9a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005d9c:	68fb      	ldr	r3, [r7, #12]
 8005d9e:	697a      	ldr	r2, [r7, #20]
 8005da0:	621a      	str	r2, [r3, #32]
}
 8005da2:	bf00      	nop
 8005da4:	371c      	adds	r7, #28
 8005da6:	46bd      	mov	sp, r7
 8005da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dac:	4770      	bx	lr

08005dae <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005dae:	b480      	push	{r7}
 8005db0:	b085      	sub	sp, #20
 8005db2:	af00      	add	r7, sp, #0
 8005db4:	6078      	str	r0, [r7, #4]
 8005db6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	689b      	ldr	r3, [r3, #8]
 8005dbc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005dbe:	68fb      	ldr	r3, [r7, #12]
 8005dc0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005dc4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005dc6:	683a      	ldr	r2, [r7, #0]
 8005dc8:	68fb      	ldr	r3, [r7, #12]
 8005dca:	4313      	orrs	r3, r2
 8005dcc:	f043 0307 	orr.w	r3, r3, #7
 8005dd0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	68fa      	ldr	r2, [r7, #12]
 8005dd6:	609a      	str	r2, [r3, #8]
}
 8005dd8:	bf00      	nop
 8005dda:	3714      	adds	r7, #20
 8005ddc:	46bd      	mov	sp, r7
 8005dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005de2:	4770      	bx	lr

08005de4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005de4:	b480      	push	{r7}
 8005de6:	b087      	sub	sp, #28
 8005de8:	af00      	add	r7, sp, #0
 8005dea:	60f8      	str	r0, [r7, #12]
 8005dec:	60b9      	str	r1, [r7, #8]
 8005dee:	607a      	str	r2, [r7, #4]
 8005df0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005df2:	68fb      	ldr	r3, [r7, #12]
 8005df4:	689b      	ldr	r3, [r3, #8]
 8005df6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005df8:	697b      	ldr	r3, [r7, #20]
 8005dfa:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005dfe:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005e00:	683b      	ldr	r3, [r7, #0]
 8005e02:	021a      	lsls	r2, r3, #8
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	431a      	orrs	r2, r3
 8005e08:	68bb      	ldr	r3, [r7, #8]
 8005e0a:	4313      	orrs	r3, r2
 8005e0c:	697a      	ldr	r2, [r7, #20]
 8005e0e:	4313      	orrs	r3, r2
 8005e10:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005e12:	68fb      	ldr	r3, [r7, #12]
 8005e14:	697a      	ldr	r2, [r7, #20]
 8005e16:	609a      	str	r2, [r3, #8]
}
 8005e18:	bf00      	nop
 8005e1a:	371c      	adds	r7, #28
 8005e1c:	46bd      	mov	sp, r7
 8005e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e22:	4770      	bx	lr

08005e24 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005e24:	b480      	push	{r7}
 8005e26:	b087      	sub	sp, #28
 8005e28:	af00      	add	r7, sp, #0
 8005e2a:	60f8      	str	r0, [r7, #12]
 8005e2c:	60b9      	str	r1, [r7, #8]
 8005e2e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005e30:	68bb      	ldr	r3, [r7, #8]
 8005e32:	f003 031f 	and.w	r3, r3, #31
 8005e36:	2201      	movs	r2, #1
 8005e38:	fa02 f303 	lsl.w	r3, r2, r3
 8005e3c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005e3e:	68fb      	ldr	r3, [r7, #12]
 8005e40:	6a1a      	ldr	r2, [r3, #32]
 8005e42:	697b      	ldr	r3, [r7, #20]
 8005e44:	43db      	mvns	r3, r3
 8005e46:	401a      	ands	r2, r3
 8005e48:	68fb      	ldr	r3, [r7, #12]
 8005e4a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005e4c:	68fb      	ldr	r3, [r7, #12]
 8005e4e:	6a1a      	ldr	r2, [r3, #32]
 8005e50:	68bb      	ldr	r3, [r7, #8]
 8005e52:	f003 031f 	and.w	r3, r3, #31
 8005e56:	6879      	ldr	r1, [r7, #4]
 8005e58:	fa01 f303 	lsl.w	r3, r1, r3
 8005e5c:	431a      	orrs	r2, r3
 8005e5e:	68fb      	ldr	r3, [r7, #12]
 8005e60:	621a      	str	r2, [r3, #32]
}
 8005e62:	bf00      	nop
 8005e64:	371c      	adds	r7, #28
 8005e66:	46bd      	mov	sp, r7
 8005e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e6c:	4770      	bx	lr
	...

08005e70 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005e70:	b480      	push	{r7}
 8005e72:	b085      	sub	sp, #20
 8005e74:	af00      	add	r7, sp, #0
 8005e76:	6078      	str	r0, [r7, #4]
 8005e78:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005e80:	2b01      	cmp	r3, #1
 8005e82:	d101      	bne.n	8005e88 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005e84:	2302      	movs	r3, #2
 8005e86:	e05a      	b.n	8005f3e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	2201      	movs	r2, #1
 8005e8c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	2202      	movs	r2, #2
 8005e94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	685b      	ldr	r3, [r3, #4]
 8005e9e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	689b      	ldr	r3, [r3, #8]
 8005ea6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005ea8:	68fb      	ldr	r3, [r7, #12]
 8005eaa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005eae:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005eb0:	683b      	ldr	r3, [r7, #0]
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	68fa      	ldr	r2, [r7, #12]
 8005eb6:	4313      	orrs	r3, r2
 8005eb8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	68fa      	ldr	r2, [r7, #12]
 8005ec0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	681b      	ldr	r3, [r3, #0]
 8005ec6:	4a21      	ldr	r2, [pc, #132]	; (8005f4c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8005ec8:	4293      	cmp	r3, r2
 8005eca:	d022      	beq.n	8005f12 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005ed4:	d01d      	beq.n	8005f12 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	4a1d      	ldr	r2, [pc, #116]	; (8005f50 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8005edc:	4293      	cmp	r3, r2
 8005ede:	d018      	beq.n	8005f12 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	4a1b      	ldr	r2, [pc, #108]	; (8005f54 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8005ee6:	4293      	cmp	r3, r2
 8005ee8:	d013      	beq.n	8005f12 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	4a1a      	ldr	r2, [pc, #104]	; (8005f58 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8005ef0:	4293      	cmp	r3, r2
 8005ef2:	d00e      	beq.n	8005f12 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	4a18      	ldr	r2, [pc, #96]	; (8005f5c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8005efa:	4293      	cmp	r3, r2
 8005efc:	d009      	beq.n	8005f12 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	4a17      	ldr	r2, [pc, #92]	; (8005f60 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8005f04:	4293      	cmp	r3, r2
 8005f06:	d004      	beq.n	8005f12 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	4a15      	ldr	r2, [pc, #84]	; (8005f64 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8005f0e:	4293      	cmp	r3, r2
 8005f10:	d10c      	bne.n	8005f2c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005f12:	68bb      	ldr	r3, [r7, #8]
 8005f14:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005f18:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005f1a:	683b      	ldr	r3, [r7, #0]
 8005f1c:	685b      	ldr	r3, [r3, #4]
 8005f1e:	68ba      	ldr	r2, [r7, #8]
 8005f20:	4313      	orrs	r3, r2
 8005f22:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	68ba      	ldr	r2, [r7, #8]
 8005f2a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	2201      	movs	r2, #1
 8005f30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	2200      	movs	r2, #0
 8005f38:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005f3c:	2300      	movs	r3, #0
}
 8005f3e:	4618      	mov	r0, r3
 8005f40:	3714      	adds	r7, #20
 8005f42:	46bd      	mov	sp, r7
 8005f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f48:	4770      	bx	lr
 8005f4a:	bf00      	nop
 8005f4c:	40010000 	.word	0x40010000
 8005f50:	40000400 	.word	0x40000400
 8005f54:	40000800 	.word	0x40000800
 8005f58:	40000c00 	.word	0x40000c00
 8005f5c:	40010400 	.word	0x40010400
 8005f60:	40014000 	.word	0x40014000
 8005f64:	40001800 	.word	0x40001800

08005f68 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8005f68:	b480      	push	{r7}
 8005f6a:	b085      	sub	sp, #20
 8005f6c:	af00      	add	r7, sp, #0
 8005f6e:	6078      	str	r0, [r7, #4]
 8005f70:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8005f72:	2300      	movs	r3, #0
 8005f74:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005f7c:	2b01      	cmp	r3, #1
 8005f7e:	d101      	bne.n	8005f84 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8005f80:	2302      	movs	r3, #2
 8005f82:	e03d      	b.n	8006000 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	2201      	movs	r2, #1
 8005f88:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8005f8c:	68fb      	ldr	r3, [r7, #12]
 8005f8e:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8005f92:	683b      	ldr	r3, [r7, #0]
 8005f94:	68db      	ldr	r3, [r3, #12]
 8005f96:	4313      	orrs	r3, r2
 8005f98:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8005f9a:	68fb      	ldr	r3, [r7, #12]
 8005f9c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005fa0:	683b      	ldr	r3, [r7, #0]
 8005fa2:	689b      	ldr	r3, [r3, #8]
 8005fa4:	4313      	orrs	r3, r2
 8005fa6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8005fa8:	68fb      	ldr	r3, [r7, #12]
 8005faa:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8005fae:	683b      	ldr	r3, [r7, #0]
 8005fb0:	685b      	ldr	r3, [r3, #4]
 8005fb2:	4313      	orrs	r3, r2
 8005fb4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8005fb6:	68fb      	ldr	r3, [r7, #12]
 8005fb8:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8005fbc:	683b      	ldr	r3, [r7, #0]
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	4313      	orrs	r3, r2
 8005fc2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8005fc4:	68fb      	ldr	r3, [r7, #12]
 8005fc6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005fca:	683b      	ldr	r3, [r7, #0]
 8005fcc:	691b      	ldr	r3, [r3, #16]
 8005fce:	4313      	orrs	r3, r2
 8005fd0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8005fd2:	68fb      	ldr	r3, [r7, #12]
 8005fd4:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8005fd8:	683b      	ldr	r3, [r7, #0]
 8005fda:	695b      	ldr	r3, [r3, #20]
 8005fdc:	4313      	orrs	r3, r2
 8005fde:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8005fe0:	68fb      	ldr	r3, [r7, #12]
 8005fe2:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8005fe6:	683b      	ldr	r3, [r7, #0]
 8005fe8:	69db      	ldr	r3, [r3, #28]
 8005fea:	4313      	orrs	r3, r2
 8005fec:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	681b      	ldr	r3, [r3, #0]
 8005ff2:	68fa      	ldr	r2, [r7, #12]
 8005ff4:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	2200      	movs	r2, #0
 8005ffa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005ffe:	2300      	movs	r3, #0
}
 8006000:	4618      	mov	r0, r3
 8006002:	3714      	adds	r7, #20
 8006004:	46bd      	mov	sp, r7
 8006006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800600a:	4770      	bx	lr

0800600c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800600c:	b480      	push	{r7}
 800600e:	b083      	sub	sp, #12
 8006010:	af00      	add	r7, sp, #0
 8006012:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006014:	bf00      	nop
 8006016:	370c      	adds	r7, #12
 8006018:	46bd      	mov	sp, r7
 800601a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800601e:	4770      	bx	lr

08006020 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006020:	b480      	push	{r7}
 8006022:	b083      	sub	sp, #12
 8006024:	af00      	add	r7, sp, #0
 8006026:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006028:	bf00      	nop
 800602a:	370c      	adds	r7, #12
 800602c:	46bd      	mov	sp, r7
 800602e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006032:	4770      	bx	lr

08006034 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006034:	b580      	push	{r7, lr}
 8006036:	b082      	sub	sp, #8
 8006038:	af00      	add	r7, sp, #0
 800603a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	2b00      	cmp	r3, #0
 8006040:	d101      	bne.n	8006046 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006042:	2301      	movs	r3, #1
 8006044:	e042      	b.n	80060cc <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800604c:	b2db      	uxtb	r3, r3
 800604e:	2b00      	cmp	r3, #0
 8006050:	d106      	bne.n	8006060 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	2200      	movs	r2, #0
 8006056:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800605a:	6878      	ldr	r0, [r7, #4]
 800605c:	f7fb ff44 	bl	8001ee8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	2224      	movs	r2, #36	; 0x24
 8006064:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	68da      	ldr	r2, [r3, #12]
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006076:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006078:	6878      	ldr	r0, [r7, #4]
 800607a:	f000 f82b 	bl	80060d4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	681b      	ldr	r3, [r3, #0]
 8006082:	691a      	ldr	r2, [r3, #16]
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	681b      	ldr	r3, [r3, #0]
 8006088:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800608c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	681b      	ldr	r3, [r3, #0]
 8006092:	695a      	ldr	r2, [r3, #20]
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800609c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	681b      	ldr	r3, [r3, #0]
 80060a2:	68da      	ldr	r2, [r3, #12]
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80060ac:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	2200      	movs	r2, #0
 80060b2:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	2220      	movs	r2, #32
 80060b8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	2220      	movs	r2, #32
 80060c0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	2200      	movs	r2, #0
 80060c8:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 80060ca:	2300      	movs	r3, #0
}
 80060cc:	4618      	mov	r0, r3
 80060ce:	3708      	adds	r7, #8
 80060d0:	46bd      	mov	sp, r7
 80060d2:	bd80      	pop	{r7, pc}

080060d4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80060d4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80060d8:	b0c0      	sub	sp, #256	; 0x100
 80060da:	af00      	add	r7, sp, #0
 80060dc:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80060e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	691b      	ldr	r3, [r3, #16]
 80060e8:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80060ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80060f0:	68d9      	ldr	r1, [r3, #12]
 80060f2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80060f6:	681a      	ldr	r2, [r3, #0]
 80060f8:	ea40 0301 	orr.w	r3, r0, r1
 80060fc:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80060fe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006102:	689a      	ldr	r2, [r3, #8]
 8006104:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006108:	691b      	ldr	r3, [r3, #16]
 800610a:	431a      	orrs	r2, r3
 800610c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006110:	695b      	ldr	r3, [r3, #20]
 8006112:	431a      	orrs	r2, r3
 8006114:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006118:	69db      	ldr	r3, [r3, #28]
 800611a:	4313      	orrs	r3, r2
 800611c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8006120:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006124:	681b      	ldr	r3, [r3, #0]
 8006126:	68db      	ldr	r3, [r3, #12]
 8006128:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800612c:	f021 010c 	bic.w	r1, r1, #12
 8006130:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006134:	681a      	ldr	r2, [r3, #0]
 8006136:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800613a:	430b      	orrs	r3, r1
 800613c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800613e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	695b      	ldr	r3, [r3, #20]
 8006146:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800614a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800614e:	6999      	ldr	r1, [r3, #24]
 8006150:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006154:	681a      	ldr	r2, [r3, #0]
 8006156:	ea40 0301 	orr.w	r3, r0, r1
 800615a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800615c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006160:	681a      	ldr	r2, [r3, #0]
 8006162:	4b8f      	ldr	r3, [pc, #572]	; (80063a0 <UART_SetConfig+0x2cc>)
 8006164:	429a      	cmp	r2, r3
 8006166:	d005      	beq.n	8006174 <UART_SetConfig+0xa0>
 8006168:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800616c:	681a      	ldr	r2, [r3, #0]
 800616e:	4b8d      	ldr	r3, [pc, #564]	; (80063a4 <UART_SetConfig+0x2d0>)
 8006170:	429a      	cmp	r2, r3
 8006172:	d104      	bne.n	800617e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8006174:	f7fe fcf6 	bl	8004b64 <HAL_RCC_GetPCLK2Freq>
 8006178:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 800617c:	e003      	b.n	8006186 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800617e:	f7fe fcdd 	bl	8004b3c <HAL_RCC_GetPCLK1Freq>
 8006182:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006186:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800618a:	69db      	ldr	r3, [r3, #28]
 800618c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006190:	f040 810c 	bne.w	80063ac <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006194:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006198:	2200      	movs	r2, #0
 800619a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800619e:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80061a2:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80061a6:	4622      	mov	r2, r4
 80061a8:	462b      	mov	r3, r5
 80061aa:	1891      	adds	r1, r2, r2
 80061ac:	65b9      	str	r1, [r7, #88]	; 0x58
 80061ae:	415b      	adcs	r3, r3
 80061b0:	65fb      	str	r3, [r7, #92]	; 0x5c
 80061b2:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80061b6:	4621      	mov	r1, r4
 80061b8:	eb12 0801 	adds.w	r8, r2, r1
 80061bc:	4629      	mov	r1, r5
 80061be:	eb43 0901 	adc.w	r9, r3, r1
 80061c2:	f04f 0200 	mov.w	r2, #0
 80061c6:	f04f 0300 	mov.w	r3, #0
 80061ca:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80061ce:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80061d2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80061d6:	4690      	mov	r8, r2
 80061d8:	4699      	mov	r9, r3
 80061da:	4623      	mov	r3, r4
 80061dc:	eb18 0303 	adds.w	r3, r8, r3
 80061e0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80061e4:	462b      	mov	r3, r5
 80061e6:	eb49 0303 	adc.w	r3, r9, r3
 80061ea:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80061ee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80061f2:	685b      	ldr	r3, [r3, #4]
 80061f4:	2200      	movs	r2, #0
 80061f6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80061fa:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80061fe:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8006202:	460b      	mov	r3, r1
 8006204:	18db      	adds	r3, r3, r3
 8006206:	653b      	str	r3, [r7, #80]	; 0x50
 8006208:	4613      	mov	r3, r2
 800620a:	eb42 0303 	adc.w	r3, r2, r3
 800620e:	657b      	str	r3, [r7, #84]	; 0x54
 8006210:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8006214:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8006218:	f7fa fb2c 	bl	8000874 <__aeabi_uldivmod>
 800621c:	4602      	mov	r2, r0
 800621e:	460b      	mov	r3, r1
 8006220:	4b61      	ldr	r3, [pc, #388]	; (80063a8 <UART_SetConfig+0x2d4>)
 8006222:	fba3 2302 	umull	r2, r3, r3, r2
 8006226:	095b      	lsrs	r3, r3, #5
 8006228:	011c      	lsls	r4, r3, #4
 800622a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800622e:	2200      	movs	r2, #0
 8006230:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006234:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8006238:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 800623c:	4642      	mov	r2, r8
 800623e:	464b      	mov	r3, r9
 8006240:	1891      	adds	r1, r2, r2
 8006242:	64b9      	str	r1, [r7, #72]	; 0x48
 8006244:	415b      	adcs	r3, r3
 8006246:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006248:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800624c:	4641      	mov	r1, r8
 800624e:	eb12 0a01 	adds.w	sl, r2, r1
 8006252:	4649      	mov	r1, r9
 8006254:	eb43 0b01 	adc.w	fp, r3, r1
 8006258:	f04f 0200 	mov.w	r2, #0
 800625c:	f04f 0300 	mov.w	r3, #0
 8006260:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8006264:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8006268:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800626c:	4692      	mov	sl, r2
 800626e:	469b      	mov	fp, r3
 8006270:	4643      	mov	r3, r8
 8006272:	eb1a 0303 	adds.w	r3, sl, r3
 8006276:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800627a:	464b      	mov	r3, r9
 800627c:	eb4b 0303 	adc.w	r3, fp, r3
 8006280:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8006284:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006288:	685b      	ldr	r3, [r3, #4]
 800628a:	2200      	movs	r2, #0
 800628c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006290:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8006294:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8006298:	460b      	mov	r3, r1
 800629a:	18db      	adds	r3, r3, r3
 800629c:	643b      	str	r3, [r7, #64]	; 0x40
 800629e:	4613      	mov	r3, r2
 80062a0:	eb42 0303 	adc.w	r3, r2, r3
 80062a4:	647b      	str	r3, [r7, #68]	; 0x44
 80062a6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80062aa:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80062ae:	f7fa fae1 	bl	8000874 <__aeabi_uldivmod>
 80062b2:	4602      	mov	r2, r0
 80062b4:	460b      	mov	r3, r1
 80062b6:	4611      	mov	r1, r2
 80062b8:	4b3b      	ldr	r3, [pc, #236]	; (80063a8 <UART_SetConfig+0x2d4>)
 80062ba:	fba3 2301 	umull	r2, r3, r3, r1
 80062be:	095b      	lsrs	r3, r3, #5
 80062c0:	2264      	movs	r2, #100	; 0x64
 80062c2:	fb02 f303 	mul.w	r3, r2, r3
 80062c6:	1acb      	subs	r3, r1, r3
 80062c8:	00db      	lsls	r3, r3, #3
 80062ca:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80062ce:	4b36      	ldr	r3, [pc, #216]	; (80063a8 <UART_SetConfig+0x2d4>)
 80062d0:	fba3 2302 	umull	r2, r3, r3, r2
 80062d4:	095b      	lsrs	r3, r3, #5
 80062d6:	005b      	lsls	r3, r3, #1
 80062d8:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80062dc:	441c      	add	r4, r3
 80062de:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80062e2:	2200      	movs	r2, #0
 80062e4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80062e8:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80062ec:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80062f0:	4642      	mov	r2, r8
 80062f2:	464b      	mov	r3, r9
 80062f4:	1891      	adds	r1, r2, r2
 80062f6:	63b9      	str	r1, [r7, #56]	; 0x38
 80062f8:	415b      	adcs	r3, r3
 80062fa:	63fb      	str	r3, [r7, #60]	; 0x3c
 80062fc:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8006300:	4641      	mov	r1, r8
 8006302:	1851      	adds	r1, r2, r1
 8006304:	6339      	str	r1, [r7, #48]	; 0x30
 8006306:	4649      	mov	r1, r9
 8006308:	414b      	adcs	r3, r1
 800630a:	637b      	str	r3, [r7, #52]	; 0x34
 800630c:	f04f 0200 	mov.w	r2, #0
 8006310:	f04f 0300 	mov.w	r3, #0
 8006314:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8006318:	4659      	mov	r1, fp
 800631a:	00cb      	lsls	r3, r1, #3
 800631c:	4651      	mov	r1, sl
 800631e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006322:	4651      	mov	r1, sl
 8006324:	00ca      	lsls	r2, r1, #3
 8006326:	4610      	mov	r0, r2
 8006328:	4619      	mov	r1, r3
 800632a:	4603      	mov	r3, r0
 800632c:	4642      	mov	r2, r8
 800632e:	189b      	adds	r3, r3, r2
 8006330:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006334:	464b      	mov	r3, r9
 8006336:	460a      	mov	r2, r1
 8006338:	eb42 0303 	adc.w	r3, r2, r3
 800633c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006340:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006344:	685b      	ldr	r3, [r3, #4]
 8006346:	2200      	movs	r2, #0
 8006348:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800634c:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8006350:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8006354:	460b      	mov	r3, r1
 8006356:	18db      	adds	r3, r3, r3
 8006358:	62bb      	str	r3, [r7, #40]	; 0x28
 800635a:	4613      	mov	r3, r2
 800635c:	eb42 0303 	adc.w	r3, r2, r3
 8006360:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006362:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8006366:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800636a:	f7fa fa83 	bl	8000874 <__aeabi_uldivmod>
 800636e:	4602      	mov	r2, r0
 8006370:	460b      	mov	r3, r1
 8006372:	4b0d      	ldr	r3, [pc, #52]	; (80063a8 <UART_SetConfig+0x2d4>)
 8006374:	fba3 1302 	umull	r1, r3, r3, r2
 8006378:	095b      	lsrs	r3, r3, #5
 800637a:	2164      	movs	r1, #100	; 0x64
 800637c:	fb01 f303 	mul.w	r3, r1, r3
 8006380:	1ad3      	subs	r3, r2, r3
 8006382:	00db      	lsls	r3, r3, #3
 8006384:	3332      	adds	r3, #50	; 0x32
 8006386:	4a08      	ldr	r2, [pc, #32]	; (80063a8 <UART_SetConfig+0x2d4>)
 8006388:	fba2 2303 	umull	r2, r3, r2, r3
 800638c:	095b      	lsrs	r3, r3, #5
 800638e:	f003 0207 	and.w	r2, r3, #7
 8006392:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006396:	681b      	ldr	r3, [r3, #0]
 8006398:	4422      	add	r2, r4
 800639a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800639c:	e106      	b.n	80065ac <UART_SetConfig+0x4d8>
 800639e:	bf00      	nop
 80063a0:	40011000 	.word	0x40011000
 80063a4:	40011400 	.word	0x40011400
 80063a8:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80063ac:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80063b0:	2200      	movs	r2, #0
 80063b2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80063b6:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80063ba:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80063be:	4642      	mov	r2, r8
 80063c0:	464b      	mov	r3, r9
 80063c2:	1891      	adds	r1, r2, r2
 80063c4:	6239      	str	r1, [r7, #32]
 80063c6:	415b      	adcs	r3, r3
 80063c8:	627b      	str	r3, [r7, #36]	; 0x24
 80063ca:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80063ce:	4641      	mov	r1, r8
 80063d0:	1854      	adds	r4, r2, r1
 80063d2:	4649      	mov	r1, r9
 80063d4:	eb43 0501 	adc.w	r5, r3, r1
 80063d8:	f04f 0200 	mov.w	r2, #0
 80063dc:	f04f 0300 	mov.w	r3, #0
 80063e0:	00eb      	lsls	r3, r5, #3
 80063e2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80063e6:	00e2      	lsls	r2, r4, #3
 80063e8:	4614      	mov	r4, r2
 80063ea:	461d      	mov	r5, r3
 80063ec:	4643      	mov	r3, r8
 80063ee:	18e3      	adds	r3, r4, r3
 80063f0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80063f4:	464b      	mov	r3, r9
 80063f6:	eb45 0303 	adc.w	r3, r5, r3
 80063fa:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80063fe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006402:	685b      	ldr	r3, [r3, #4]
 8006404:	2200      	movs	r2, #0
 8006406:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800640a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800640e:	f04f 0200 	mov.w	r2, #0
 8006412:	f04f 0300 	mov.w	r3, #0
 8006416:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800641a:	4629      	mov	r1, r5
 800641c:	008b      	lsls	r3, r1, #2
 800641e:	4621      	mov	r1, r4
 8006420:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006424:	4621      	mov	r1, r4
 8006426:	008a      	lsls	r2, r1, #2
 8006428:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800642c:	f7fa fa22 	bl	8000874 <__aeabi_uldivmod>
 8006430:	4602      	mov	r2, r0
 8006432:	460b      	mov	r3, r1
 8006434:	4b60      	ldr	r3, [pc, #384]	; (80065b8 <UART_SetConfig+0x4e4>)
 8006436:	fba3 2302 	umull	r2, r3, r3, r2
 800643a:	095b      	lsrs	r3, r3, #5
 800643c:	011c      	lsls	r4, r3, #4
 800643e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006442:	2200      	movs	r2, #0
 8006444:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8006448:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800644c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8006450:	4642      	mov	r2, r8
 8006452:	464b      	mov	r3, r9
 8006454:	1891      	adds	r1, r2, r2
 8006456:	61b9      	str	r1, [r7, #24]
 8006458:	415b      	adcs	r3, r3
 800645a:	61fb      	str	r3, [r7, #28]
 800645c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006460:	4641      	mov	r1, r8
 8006462:	1851      	adds	r1, r2, r1
 8006464:	6139      	str	r1, [r7, #16]
 8006466:	4649      	mov	r1, r9
 8006468:	414b      	adcs	r3, r1
 800646a:	617b      	str	r3, [r7, #20]
 800646c:	f04f 0200 	mov.w	r2, #0
 8006470:	f04f 0300 	mov.w	r3, #0
 8006474:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006478:	4659      	mov	r1, fp
 800647a:	00cb      	lsls	r3, r1, #3
 800647c:	4651      	mov	r1, sl
 800647e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006482:	4651      	mov	r1, sl
 8006484:	00ca      	lsls	r2, r1, #3
 8006486:	4610      	mov	r0, r2
 8006488:	4619      	mov	r1, r3
 800648a:	4603      	mov	r3, r0
 800648c:	4642      	mov	r2, r8
 800648e:	189b      	adds	r3, r3, r2
 8006490:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8006494:	464b      	mov	r3, r9
 8006496:	460a      	mov	r2, r1
 8006498:	eb42 0303 	adc.w	r3, r2, r3
 800649c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80064a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80064a4:	685b      	ldr	r3, [r3, #4]
 80064a6:	2200      	movs	r2, #0
 80064a8:	67bb      	str	r3, [r7, #120]	; 0x78
 80064aa:	67fa      	str	r2, [r7, #124]	; 0x7c
 80064ac:	f04f 0200 	mov.w	r2, #0
 80064b0:	f04f 0300 	mov.w	r3, #0
 80064b4:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80064b8:	4649      	mov	r1, r9
 80064ba:	008b      	lsls	r3, r1, #2
 80064bc:	4641      	mov	r1, r8
 80064be:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80064c2:	4641      	mov	r1, r8
 80064c4:	008a      	lsls	r2, r1, #2
 80064c6:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80064ca:	f7fa f9d3 	bl	8000874 <__aeabi_uldivmod>
 80064ce:	4602      	mov	r2, r0
 80064d0:	460b      	mov	r3, r1
 80064d2:	4611      	mov	r1, r2
 80064d4:	4b38      	ldr	r3, [pc, #224]	; (80065b8 <UART_SetConfig+0x4e4>)
 80064d6:	fba3 2301 	umull	r2, r3, r3, r1
 80064da:	095b      	lsrs	r3, r3, #5
 80064dc:	2264      	movs	r2, #100	; 0x64
 80064de:	fb02 f303 	mul.w	r3, r2, r3
 80064e2:	1acb      	subs	r3, r1, r3
 80064e4:	011b      	lsls	r3, r3, #4
 80064e6:	3332      	adds	r3, #50	; 0x32
 80064e8:	4a33      	ldr	r2, [pc, #204]	; (80065b8 <UART_SetConfig+0x4e4>)
 80064ea:	fba2 2303 	umull	r2, r3, r2, r3
 80064ee:	095b      	lsrs	r3, r3, #5
 80064f0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80064f4:	441c      	add	r4, r3
 80064f6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80064fa:	2200      	movs	r2, #0
 80064fc:	673b      	str	r3, [r7, #112]	; 0x70
 80064fe:	677a      	str	r2, [r7, #116]	; 0x74
 8006500:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8006504:	4642      	mov	r2, r8
 8006506:	464b      	mov	r3, r9
 8006508:	1891      	adds	r1, r2, r2
 800650a:	60b9      	str	r1, [r7, #8]
 800650c:	415b      	adcs	r3, r3
 800650e:	60fb      	str	r3, [r7, #12]
 8006510:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006514:	4641      	mov	r1, r8
 8006516:	1851      	adds	r1, r2, r1
 8006518:	6039      	str	r1, [r7, #0]
 800651a:	4649      	mov	r1, r9
 800651c:	414b      	adcs	r3, r1
 800651e:	607b      	str	r3, [r7, #4]
 8006520:	f04f 0200 	mov.w	r2, #0
 8006524:	f04f 0300 	mov.w	r3, #0
 8006528:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800652c:	4659      	mov	r1, fp
 800652e:	00cb      	lsls	r3, r1, #3
 8006530:	4651      	mov	r1, sl
 8006532:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006536:	4651      	mov	r1, sl
 8006538:	00ca      	lsls	r2, r1, #3
 800653a:	4610      	mov	r0, r2
 800653c:	4619      	mov	r1, r3
 800653e:	4603      	mov	r3, r0
 8006540:	4642      	mov	r2, r8
 8006542:	189b      	adds	r3, r3, r2
 8006544:	66bb      	str	r3, [r7, #104]	; 0x68
 8006546:	464b      	mov	r3, r9
 8006548:	460a      	mov	r2, r1
 800654a:	eb42 0303 	adc.w	r3, r2, r3
 800654e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006550:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006554:	685b      	ldr	r3, [r3, #4]
 8006556:	2200      	movs	r2, #0
 8006558:	663b      	str	r3, [r7, #96]	; 0x60
 800655a:	667a      	str	r2, [r7, #100]	; 0x64
 800655c:	f04f 0200 	mov.w	r2, #0
 8006560:	f04f 0300 	mov.w	r3, #0
 8006564:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8006568:	4649      	mov	r1, r9
 800656a:	008b      	lsls	r3, r1, #2
 800656c:	4641      	mov	r1, r8
 800656e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006572:	4641      	mov	r1, r8
 8006574:	008a      	lsls	r2, r1, #2
 8006576:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800657a:	f7fa f97b 	bl	8000874 <__aeabi_uldivmod>
 800657e:	4602      	mov	r2, r0
 8006580:	460b      	mov	r3, r1
 8006582:	4b0d      	ldr	r3, [pc, #52]	; (80065b8 <UART_SetConfig+0x4e4>)
 8006584:	fba3 1302 	umull	r1, r3, r3, r2
 8006588:	095b      	lsrs	r3, r3, #5
 800658a:	2164      	movs	r1, #100	; 0x64
 800658c:	fb01 f303 	mul.w	r3, r1, r3
 8006590:	1ad3      	subs	r3, r2, r3
 8006592:	011b      	lsls	r3, r3, #4
 8006594:	3332      	adds	r3, #50	; 0x32
 8006596:	4a08      	ldr	r2, [pc, #32]	; (80065b8 <UART_SetConfig+0x4e4>)
 8006598:	fba2 2303 	umull	r2, r3, r2, r3
 800659c:	095b      	lsrs	r3, r3, #5
 800659e:	f003 020f 	and.w	r2, r3, #15
 80065a2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80065a6:	681b      	ldr	r3, [r3, #0]
 80065a8:	4422      	add	r2, r4
 80065aa:	609a      	str	r2, [r3, #8]
}
 80065ac:	bf00      	nop
 80065ae:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80065b2:	46bd      	mov	sp, r7
 80065b4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80065b8:	51eb851f 	.word	0x51eb851f

080065bc <memset>:
 80065bc:	4402      	add	r2, r0
 80065be:	4603      	mov	r3, r0
 80065c0:	4293      	cmp	r3, r2
 80065c2:	d100      	bne.n	80065c6 <memset+0xa>
 80065c4:	4770      	bx	lr
 80065c6:	f803 1b01 	strb.w	r1, [r3], #1
 80065ca:	e7f9      	b.n	80065c0 <memset+0x4>

080065cc <__libc_init_array>:
 80065cc:	b570      	push	{r4, r5, r6, lr}
 80065ce:	4d0d      	ldr	r5, [pc, #52]	; (8006604 <__libc_init_array+0x38>)
 80065d0:	4c0d      	ldr	r4, [pc, #52]	; (8006608 <__libc_init_array+0x3c>)
 80065d2:	1b64      	subs	r4, r4, r5
 80065d4:	10a4      	asrs	r4, r4, #2
 80065d6:	2600      	movs	r6, #0
 80065d8:	42a6      	cmp	r6, r4
 80065da:	d109      	bne.n	80065f0 <__libc_init_array+0x24>
 80065dc:	4d0b      	ldr	r5, [pc, #44]	; (800660c <__libc_init_array+0x40>)
 80065de:	4c0c      	ldr	r4, [pc, #48]	; (8006610 <__libc_init_array+0x44>)
 80065e0:	f000 f860 	bl	80066a4 <_init>
 80065e4:	1b64      	subs	r4, r4, r5
 80065e6:	10a4      	asrs	r4, r4, #2
 80065e8:	2600      	movs	r6, #0
 80065ea:	42a6      	cmp	r6, r4
 80065ec:	d105      	bne.n	80065fa <__libc_init_array+0x2e>
 80065ee:	bd70      	pop	{r4, r5, r6, pc}
 80065f0:	f855 3b04 	ldr.w	r3, [r5], #4
 80065f4:	4798      	blx	r3
 80065f6:	3601      	adds	r6, #1
 80065f8:	e7ee      	b.n	80065d8 <__libc_init_array+0xc>
 80065fa:	f855 3b04 	ldr.w	r3, [r5], #4
 80065fe:	4798      	blx	r3
 8006600:	3601      	adds	r6, #1
 8006602:	e7f2      	b.n	80065ea <__libc_init_array+0x1e>
 8006604:	080066dc 	.word	0x080066dc
 8006608:	080066dc 	.word	0x080066dc
 800660c:	080066dc 	.word	0x080066dc
 8006610:	080066e0 	.word	0x080066e0

08006614 <round>:
 8006614:	ec53 2b10 	vmov	r2, r3, d0
 8006618:	b570      	push	{r4, r5, r6, lr}
 800661a:	f3c3 540a 	ubfx	r4, r3, #20, #11
 800661e:	f2a4 30ff 	subw	r0, r4, #1023	; 0x3ff
 8006622:	2813      	cmp	r0, #19
 8006624:	ee10 5a10 	vmov	r5, s0
 8006628:	4619      	mov	r1, r3
 800662a:	dc18      	bgt.n	800665e <round+0x4a>
 800662c:	2800      	cmp	r0, #0
 800662e:	da09      	bge.n	8006644 <round+0x30>
 8006630:	3001      	adds	r0, #1
 8006632:	f003 4100 	and.w	r1, r3, #2147483648	; 0x80000000
 8006636:	d103      	bne.n	8006640 <round+0x2c>
 8006638:	f041 517f 	orr.w	r1, r1, #1069547520	; 0x3fc00000
 800663c:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 8006640:	2300      	movs	r3, #0
 8006642:	e02a      	b.n	800669a <round+0x86>
 8006644:	4c16      	ldr	r4, [pc, #88]	; (80066a0 <round+0x8c>)
 8006646:	4104      	asrs	r4, r0
 8006648:	ea03 0604 	and.w	r6, r3, r4
 800664c:	4316      	orrs	r6, r2
 800664e:	d011      	beq.n	8006674 <round+0x60>
 8006650:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8006654:	4103      	asrs	r3, r0
 8006656:	440b      	add	r3, r1
 8006658:	ea23 0104 	bic.w	r1, r3, r4
 800665c:	e7f0      	b.n	8006640 <round+0x2c>
 800665e:	2833      	cmp	r0, #51	; 0x33
 8006660:	dd0b      	ble.n	800667a <round+0x66>
 8006662:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
 8006666:	d105      	bne.n	8006674 <round+0x60>
 8006668:	ee10 0a10 	vmov	r0, s0
 800666c:	f7f9 fedc 	bl	8000428 <__adddf3>
 8006670:	4602      	mov	r2, r0
 8006672:	460b      	mov	r3, r1
 8006674:	ec43 2b10 	vmov	d0, r2, r3
 8006678:	bd70      	pop	{r4, r5, r6, pc}
 800667a:	f2a4 4613 	subw	r6, r4, #1043	; 0x413
 800667e:	f04f 34ff 	mov.w	r4, #4294967295
 8006682:	40f4      	lsrs	r4, r6
 8006684:	4214      	tst	r4, r2
 8006686:	d0f5      	beq.n	8006674 <round+0x60>
 8006688:	f1c0 0033 	rsb	r0, r0, #51	; 0x33
 800668c:	2301      	movs	r3, #1
 800668e:	4083      	lsls	r3, r0
 8006690:	195b      	adds	r3, r3, r5
 8006692:	bf28      	it	cs
 8006694:	3101      	addcs	r1, #1
 8006696:	ea23 0304 	bic.w	r3, r3, r4
 800669a:	461a      	mov	r2, r3
 800669c:	460b      	mov	r3, r1
 800669e:	e7e9      	b.n	8006674 <round+0x60>
 80066a0:	000fffff 	.word	0x000fffff

080066a4 <_init>:
 80066a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80066a6:	bf00      	nop
 80066a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80066aa:	bc08      	pop	{r3}
 80066ac:	469e      	mov	lr, r3
 80066ae:	4770      	bx	lr

080066b0 <_fini>:
 80066b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80066b2:	bf00      	nop
 80066b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80066b6:	bc08      	pop	{r3}
 80066b8:	469e      	mov	lr, r3
 80066ba:	4770      	bx	lr
